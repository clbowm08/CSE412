
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000012b6  0000134a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080011e  0080011e  00001368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000013d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002513  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001088  00000000  00000000  00003aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011c6  00000000  00000000  00004b33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00005cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089d  00000000  00000000  00006164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001367  00000000  00000000  00006a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_11>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e6 eb       	ldi	r30, 0xB6	; 182
      c8:	f2 e1       	ldi	r31, 0x12	; 18
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ae 31       	cpi	r26, 0x1E	; 30
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	ae e1       	ldi	r26, 0x1E	; 30
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a9 32       	cpi	r26, 0x29	; 41
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 48 05 	call	0xa90	; 0xa90 <main>
      ea:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TIM1_COMPA>:
.global cycle_level			
.section ".text"			

.global TIM1_COMPA
TIM1_COMPA:
		lds		r19, cycle_level
      f2:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <cycle_level>
		sbrc	r19,0				
      f6:	30 fd       	sbrc	r19, 0
		rjmp	ONE					
      f8:	06 c0       	rjmp	.+12     	; 0x106 <ONE>
		lds		r25, freq_low			
      fa:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <freq_low>
		lds		r18, freq_high			
      fe:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <freq_high>
		ldi		r19,1				
     102:	31 e0       	ldi	r19, 0x01	; 1
		rjmp	BEGIN				
     104:	20 c0       	rjmp	.+64     	; 0x146 <BEGIN>

00000106 <ONE>:
ONE:	lds		r25,freq_low			
     106:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <freq_low>
		lds		r18,freq_high			
     10a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <freq_high>
		ldi		r19,0				
     10e:	30 e0       	ldi	r19, 0x00	; 0

		lds		r20, max_cycle_L//one side of cycle, load and compares cycle to max
     110:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <max_cycle_L>
		lds		r21, max_cycle_H
     114:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <max_cycle_H>
		lds		r22, cycle_count_L
     118:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <cycle_count_L>
		lds		r23, cycle_count_H
     11c:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <cycle_count_H>
		ldi     r24, 0x1
     120:	81 e0       	ldi	r24, 0x01	; 1
		add     r22,r24
     122:	68 0f       	add	r22, r24
		adc		r23,r19
     124:	73 1f       	adc	r23, r19
		sts		cycle_count_L,r22
     126:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <cycle_count_L>
		sts		cycle_count_H,r23
     12a:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <cycle_count_H>
		cp		r20,r22
     12e:	46 17       	cp	r20, r22
		cpc		r21,r23
     130:	57 07       	cpc	r21, r23
		brge	BEGIN
     132:	4c f4       	brge	.+18     	; 0x146 <BEGIN>
		cli						//at max, disable interrups
     134:	f8 94       	cli
		ldi r26,0x00			
     136:	a0 e0       	ldi	r26, 0x00	; 0
		sts TIMSK1,r26			
     138:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		out TIFR1,r26	
     13c:	a6 bf       	out	0x36, r26	; 54
		ldi r26,0x00			
     13e:	a0 e0       	ldi	r26, 0x00	; 0
		sts TCCR1A,r26//turn off B1 output pin
     140:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sei
     144:	78 94       	sei

00000146 <BEGIN>:

BEGIN:	lds		r26,OCR1AL			
     146:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		add		r25,r26			
     14a:	9a 0f       	add	r25, r26
		lds		r26,OCR1AH			
     14c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		adc		r18,r26				
     150:	2a 1f       	adc	r18, r26
		sts		OCR1AH,r18			
     152:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		sts		OCR1AL,r25			
     156:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		sbrc r19,0
     15a:	30 fd       	sbrc	r19, 0
		rjmp Return
     15c:	00 c0       	rjmp	.+0      	; 0x15e <Return>

0000015e <Return>:
Return:
	sts cycle_level,r19
     15e:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <cycle_level>
	ret
     162:	08 95       	ret

00000164 <ResetBoard>:
#include <util/delay.h>
#include "Physics.h"
#include "Sound.h"

void ResetBoard(struct Player *player)
{
     164:	fc 01       	movw	r30, r24
	player[0].downFlag = false;
     166:	11 82       	std	Z+1, r1	; 0x01
	player[0].upFlag = false;
     168:	10 82       	st	Z, r1
	player[1].downFlag = false;
     16a:	13 86       	std	Z+11, r1	; 0x0b
	player[1].upFlag = false;
     16c:	12 86       	std	Z+10, r1	; 0x0a
	
		
	player[0].xPos = 0;
     16e:	12 82       	std	Z+2, r1	; 0x02
	player[0].yPos = 2;
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b0 e4       	ldi	r27, 0x40	; 64
     178:	83 83       	std	Z+3, r24	; 0x03
     17a:	94 83       	std	Z+4, r25	; 0x04
     17c:	a5 83       	std	Z+5, r26	; 0x05
     17e:	b6 83       	std	Z+6, r27	; 0x06
	player[1].xPos = 17;
     180:	21 e1       	ldi	r18, 0x11	; 17
     182:	24 87       	std	Z+12, r18	; 0x0c
	player[1].yPos = 2;
     184:	85 87       	std	Z+13, r24	; 0x0d
     186:	96 87       	std	Z+14, r25	; 0x0e
     188:	a7 87       	std	Z+15, r26	; 0x0f
     18a:	b0 8b       	std	Z+16, r27	; 0x10
	
	player[0].score = 0;
     18c:	11 86       	std	Z+9, r1	; 0x09
	player[1].score = 0;
     18e:	13 8a       	std	Z+19, r1	; 0x13
     190:	08 95       	ret

00000192 <printscore>:
		SendData(0x7C);
		SetCursorPosition(19, (player[1].curYCoord) + 1);
		SendData(0x7C);
	}
}
void printscore(unsigned char score, unsigned char xpos){
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	c8 2f       	mov	r28, r24
     198:	d6 2f       	mov	r29, r22
	SetCursorPosition(xpos+2,1);
     19a:	61 e0       	ldi	r22, 0x01	; 1
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	8d 0f       	add	r24, r29
     1a0:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
	unsigned char out = (score%10)+48;
     1a4:	9d ec       	ldi	r25, 0xCD	; 205
     1a6:	c9 9f       	mul	r28, r25
     1a8:	91 2d       	mov	r25, r1
     1aa:	11 24       	eor	r1, r1
     1ac:	96 95       	lsr	r25
     1ae:	96 95       	lsr	r25
     1b0:	96 95       	lsr	r25
     1b2:	99 0f       	add	r25, r25
     1b4:	89 2f       	mov	r24, r25
     1b6:	88 0f       	add	r24, r24
     1b8:	88 0f       	add	r24, r24
     1ba:	98 0f       	add	r25, r24
     1bc:	8c 2f       	mov	r24, r28
     1be:	89 1b       	sub	r24, r25
	SendData(out);
     1c0:	80 5d       	subi	r24, 0xD0	; 208
     1c2:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
	if(score<10){
     1c6:	ca 30       	cpi	r28, 0x0A	; 10
     1c8:	50 f1       	brcs	.+84     	; 0x21e <printscore+0x8c>
		return;
	}
	SetCursorPosition(xpos+1,1);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	8d 0f       	add	r24, r29
     1d0:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
	out = (score%100)/10+48;
     1d4:	89 e2       	ldi	r24, 0x29	; 41
     1d6:	c8 9f       	mul	r28, r24
     1d8:	81 2d       	mov	r24, r1
     1da:	11 24       	eor	r1, r1
     1dc:	82 95       	swap	r24
     1de:	8f 70       	andi	r24, 0x0F	; 15
     1e0:	9c 2f       	mov	r25, r28
     1e2:	24 e6       	ldi	r18, 0x64	; 100
     1e4:	82 9f       	mul	r24, r18
     1e6:	90 19       	sub	r25, r0
     1e8:	11 24       	eor	r1, r1
     1ea:	89 2f       	mov	r24, r25
     1ec:	9d ec       	ldi	r25, 0xCD	; 205
     1ee:	89 9f       	mul	r24, r25
     1f0:	81 2d       	mov	r24, r1
     1f2:	11 24       	eor	r1, r1
     1f4:	86 95       	lsr	r24
     1f6:	86 95       	lsr	r24
     1f8:	86 95       	lsr	r24
	SendData(out);
     1fa:	80 5d       	subi	r24, 0xD0	; 208
     1fc:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
	if(score<100){
     200:	c4 36       	cpi	r28, 0x64	; 100
     202:	68 f0       	brcs	.+26     	; 0x21e <printscore+0x8c>
		return;
	}
	SetCursorPosition(xpos,1);
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	8d 2f       	mov	r24, r29
     208:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
	out = score/100+48;
     20c:	89 e2       	ldi	r24, 0x29	; 41
     20e:	c8 9f       	mul	r28, r24
     210:	81 2d       	mov	r24, r1
     212:	11 24       	eor	r1, r1
     214:	82 95       	swap	r24
     216:	8f 70       	andi	r24, 0x0F	; 15
	SendData(out);
     218:	80 5d       	subi	r24, 0xD0	; 208
     21a:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	08 95       	ret

00000224 <UpdateBoard>:
	player[0].score = 0;
	player[1].score = 0;
}

void UpdateBoard(struct Player *player,struct Ball *ball)
{
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	ec 01       	movw	r28, r24
     22e:	8b 01       	movw	r16, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     230:	8f ed       	ldi	r24, 0xDF	; 223
     232:	9e e2       	ldi	r25, 0x2E	; 46
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <UpdateBoard+0x10>
     238:	00 c0       	rjmp	.+0      	; 0x23a <UpdateBoard+0x16>
     23a:	00 00       	nop
	_delay_ms(3);
	SendCommand(0x02);
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
	printscore(player[0].score,3);
     242:	89 85       	ldd	r24, Y+9	; 0x09
     244:	63 e0       	ldi	r22, 0x03	; 3
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	0e 94 c9 00 	call	0x192	; 0x192 <printscore>
	printscore(player[1].score,16);
     24e:	8b 89       	ldd	r24, Y+19	; 0x13
     250:	60 e1       	ldi	r22, 0x10	; 16
     252:	70 e0       	ldi	r23, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 c9 00 	call	0x192	; 0x192 <printscore>
	if ((ball[0].curXCoord != ball[0].prevXCoord) || (ball[0].curYCoord != ball[0].prevYCoord))
     25a:	f8 01       	movw	r30, r16
     25c:	90 85       	ldd	r25, Z+8	; 0x08
     25e:	82 85       	ldd	r24, Z+10	; 0x0a
     260:	98 13       	cpse	r25, r24
     262:	04 c0       	rjmp	.+8      	; 0x26c <UpdateBoard+0x48>
     264:	21 85       	ldd	r18, Z+9	; 0x09
     266:	93 85       	ldd	r25, Z+11	; 0x0b
     268:	29 17       	cp	r18, r25
     26a:	79 f0       	breq	.+30     	; 0x28a <UpdateBoard+0x66>
	{
		//Clear the ball from screen
		SetCursorPosition(ball[0].prevXCoord, ball[0].prevYCoord);
     26c:	f8 01       	movw	r30, r16
     26e:	63 85       	ldd	r22, Z+11	; 0x0b
     270:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(' ');
     274:	80 e2       	ldi	r24, 0x20	; 32
     276:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
		
		SetCursorPosition(ball[0].curXCoord, ball[0].curYCoord);
     27a:	f8 01       	movw	r30, r16
     27c:	61 85       	ldd	r22, Z+9	; 0x09
     27e:	80 85       	ldd	r24, Z+8	; 0x08
     280:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData('o');
     284:	8f e6       	ldi	r24, 0x6F	; 111
     286:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
	}
	
	if (player[0].curYCoord != player[0].prevYCoord)
     28a:	88 85       	ldd	r24, Y+8	; 0x08
     28c:	6f 81       	ldd	r22, Y+7	; 0x07
     28e:	86 17       	cp	r24, r22
     290:	e9 f0       	breq	.+58     	; 0x2cc <UpdateBoard+0xa8>
	{
		//clearing what needs to be cleared
		SetCursorPosition(2, player[0].prevYCoord);
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(' ');
     298:	80 e2       	ldi	r24, 0x20	; 32
     29a:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
		SetCursorPosition(2, (player[0].prevYCoord + 1));
     29e:	6f 81       	ldd	r22, Y+7	; 0x07
     2a0:	6f 5f       	subi	r22, 0xFF	; 255
     2a2:	82 e0       	ldi	r24, 0x02	; 2
     2a4:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(' ');
     2a8:	80 e2       	ldi	r24, 0x20	; 32
     2aa:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
		
		//Sending updated location
		SetCursorPosition(2, player[0].curYCoord);
     2ae:	68 85       	ldd	r22, Y+8	; 0x08
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(0x7C);
     2b6:	8c e7       	ldi	r24, 0x7C	; 124
     2b8:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
		SetCursorPosition(2, (player[0].curYCoord + 1));
     2bc:	68 85       	ldd	r22, Y+8	; 0x08
     2be:	6f 5f       	subi	r22, 0xFF	; 255
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(0x7C);
     2c6:	8c e7       	ldi	r24, 0x7C	; 124
     2c8:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
	}
	
	if (player[1].curYCoord != player[1].prevYCoord)
     2cc:	8a 89       	ldd	r24, Y+18	; 0x12
     2ce:	69 89       	ldd	r22, Y+17	; 0x11
     2d0:	86 17       	cp	r24, r22
     2d2:	e9 f0       	breq	.+58     	; 0x30e <UpdateBoard+0xea>
	{
		//clearing what needs to be cleared
		SetCursorPosition(19, player[1].prevYCoord);
     2d4:	83 e1       	ldi	r24, 0x13	; 19
     2d6:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(' ');
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
		SetCursorPosition(19, (player[1].prevYCoord + 1));
     2e0:	69 89       	ldd	r22, Y+17	; 0x11
     2e2:	6f 5f       	subi	r22, 0xFF	; 255
     2e4:	83 e1       	ldi	r24, 0x13	; 19
     2e6:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(' ');
     2ea:	80 e2       	ldi	r24, 0x20	; 32
     2ec:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
		
		//Sending updated location
		SetCursorPosition(19, player[1].curYCoord);
     2f0:	6a 89       	ldd	r22, Y+18	; 0x12
     2f2:	83 e1       	ldi	r24, 0x13	; 19
     2f4:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(0x7C);
     2f8:	8c e7       	ldi	r24, 0x7C	; 124
     2fa:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
		SetCursorPosition(19, (player[1].curYCoord) + 1);
     2fe:	6a 89       	ldd	r22, Y+18	; 0x12
     300:	6f 5f       	subi	r22, 0xFF	; 255
     302:	83 e1       	ldi	r24, 0x13	; 19
     304:	0e 94 c9 04 	call	0x992	; 0x992 <SetCursorPosition>
		SendData(0x7C);
     308:	8c e7       	ldi	r24, 0x7C	; 124
     30a:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
	}
}
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	1f 91       	pop	r17
     314:	0f 91       	pop	r16
     316:	08 95       	ret

00000318 <DetectUpdateScore>:
	}
	SetCursorPosition(xpos,1);
	out = score/100+48;
	SendData(out);
}
DetectUpdateScore(struct Player *player,struct Ball *ball, char *resetDeltaTime){
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	8c 01       	movw	r16, r24
     328:	eb 01       	movw	r28, r22
     32a:	7a 01       	movw	r14, r20
	if((ball[0].curXCoord <= 1) && (ball[0].xVel < 0)){
     32c:	88 85       	ldd	r24, Y+8	; 0x08
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	28 f5       	brcc	.+74     	; 0x37c <DetectUpdateScore+0x64>
     332:	8d 85       	ldd	r24, Y+13	; 0x0d
     334:	88 23       	and	r24, r24
     336:	14 f5       	brge	.+68     	; 0x37c <DetectUpdateScore+0x64>
		player[1].score+=1;
     338:	f8 01       	movw	r30, r16
     33a:	83 89       	ldd	r24, Z+19	; 0x13
     33c:	8f 5f       	subi	r24, 0xFF	; 255
     33e:	83 8b       	std	Z+19, r24	; 0x13
		ball[0].xPos +=10; 
     340:	20 e0       	ldi	r18, 0x00	; 0
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	40 e2       	ldi	r20, 0x20	; 32
     346:	51 e4       	ldi	r21, 0x41	; 65
     348:	68 81       	ld	r22, Y
     34a:	79 81       	ldd	r23, Y+1	; 0x01
     34c:	8a 81       	ldd	r24, Y+2	; 0x02
     34e:	9b 81       	ldd	r25, Y+3	; 0x03
     350:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     354:	68 83       	st	Y, r22
     356:	79 83       	std	Y+1, r23	; 0x01
     358:	8a 83       	std	Y+2, r24	; 0x02
     35a:	9b 83       	std	Y+3, r25	; 0x03
		ball[0].speedOfBall = 1;
     35c:	dd 24       	eor	r13, r13
     35e:	d3 94       	inc	r13
     360:	dc 86       	std	Y+12, r13	; 0x0c
		score_sound();
     362:	0e 94 36 06 	call	0xc6c	; 0xc6c <score_sound>
     366:	ff ef       	ldi	r31, 0xFF	; 255
     368:	2b e7       	ldi	r18, 0x7B	; 123
     36a:	82 e9       	ldi	r24, 0x92	; 146
     36c:	f1 50       	subi	r31, 0x01	; 1
     36e:	20 40       	sbci	r18, 0x00	; 0
     370:	80 40       	sbci	r24, 0x00	; 0
     372:	e1 f7       	brne	.-8      	; 0x36c <DetectUpdateScore+0x54>
     374:	00 c0       	rjmp	.+0      	; 0x376 <DetectUpdateScore+0x5e>
     376:	00 00       	nop
		_delay_ms(3000);
		*resetDeltaTime = 1;
     378:	f7 01       	movw	r30, r14
     37a:	d0 82       	st	Z, r13
		
	}
	if((ball[0].curXCoord >= 20) && (ball[0].xVel > 0)){
     37c:	88 85       	ldd	r24, Y+8	; 0x08
     37e:	84 31       	cpi	r24, 0x14	; 20
     380:	20 f1       	brcs	.+72     	; 0x3ca <DetectUpdateScore+0xb2>
     382:	8d 85       	ldd	r24, Y+13	; 0x0d
     384:	18 16       	cp	r1, r24
     386:	0c f5       	brge	.+66     	; 0x3ca <DetectUpdateScore+0xb2>
		player[0].score+=1;
     388:	f8 01       	movw	r30, r16
     38a:	81 85       	ldd	r24, Z+9	; 0x09
     38c:	8f 5f       	subi	r24, 0xFF	; 255
     38e:	81 87       	std	Z+9, r24	; 0x09
		ball[0].xPos -=10;
     390:	20 e0       	ldi	r18, 0x00	; 0
     392:	30 e0       	ldi	r19, 0x00	; 0
     394:	40 e2       	ldi	r20, 0x20	; 32
     396:	51 e4       	ldi	r21, 0x41	; 65
     398:	68 81       	ld	r22, Y
     39a:	79 81       	ldd	r23, Y+1	; 0x01
     39c:	8a 81       	ldd	r24, Y+2	; 0x02
     39e:	9b 81       	ldd	r25, Y+3	; 0x03
     3a0:	0e 94 72 06 	call	0xce4	; 0xce4 <__subsf3>
     3a4:	68 83       	st	Y, r22
     3a6:	79 83       	std	Y+1, r23	; 0x01
     3a8:	8a 83       	std	Y+2, r24	; 0x02
     3aa:	9b 83       	std	Y+3, r25	; 0x03
		ball[0].speedOfBall = 0;
     3ac:	1c 86       	std	Y+12, r1	; 0x0c
		score_sound();
     3ae:	0e 94 36 06 	call	0xc6c	; 0xc6c <score_sound>
     3b2:	ff ef       	ldi	r31, 0xFF	; 255
     3b4:	21 e1       	ldi	r18, 0x11	; 17
     3b6:	8a e7       	ldi	r24, 0x7A	; 122
     3b8:	f1 50       	subi	r31, 0x01	; 1
     3ba:	20 40       	sbci	r18, 0x00	; 0
     3bc:	80 40       	sbci	r24, 0x00	; 0
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <DetectUpdateScore+0xa0>
     3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <DetectUpdateScore+0xaa>
     3c2:	00 00       	nop
		_delay_ms(2500);
		*resetDeltaTime = 1;
     3c4:	81 e0       	ldi	r24, 0x01	; 1
     3c6:	f7 01       	movw	r30, r14
     3c8:	80 83       	st	Z, r24
	}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	08 95       	ret

000003da <init_ball>:
#define xmax 20
#define ymax 4
#define xmin 1
#define ymin 1

void init_ball(struct Ball *ball, unsigned char xpos, unsigned char ypos, signed char xvel,signed char yvel){
     3da:	ff 92       	push	r15
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	ec 01       	movw	r28, r24
     3e6:	14 2f       	mov	r17, r20
     3e8:	f2 2e       	mov	r15, r18
	ball[0].xPos = xpos;
     3ea:	70 e0       	ldi	r23, 0x00	; 0
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 85 07 	call	0xf0a	; 0xf0a <__floatunsisf>
     3f4:	68 83       	st	Y, r22
     3f6:	79 83       	std	Y+1, r23	; 0x01
     3f8:	8a 83       	std	Y+2, r24	; 0x02
     3fa:	9b 83       	std	Y+3, r25	; 0x03
	ball[0].yPos = ypos;
     3fc:	61 2f       	mov	r22, r17
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 85 07 	call	0xf0a	; 0xf0a <__floatunsisf>
     408:	6c 83       	std	Y+4, r22	; 0x04
     40a:	7d 83       	std	Y+5, r23	; 0x05
     40c:	8e 83       	std	Y+6, r24	; 0x06
     40e:	9f 83       	std	Y+7, r25	; 0x07
	ball[0].xVel = xvel;
     410:	fd 86       	std	Y+13, r15	; 0x0d
	ball[0].yVel = yvel;
     412:	0e 87       	std	Y+14, r16	; 0x0e
	ball[0].curXCoord = 0;
     414:	18 86       	std	Y+8, r1	; 0x08
	ball[0].curYCoord = 0;
     416:	19 86       	std	Y+9, r1	; 0x09
	ball[0].prevXCoord = 0;
     418:	1a 86       	std	Y+10, r1	; 0x0a
	ball[0].prevYCoord = 0;
     41a:	1b 86       	std	Y+11, r1	; 0x0b
	ball[0].speedOfBall = 1;
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	8c 87       	std	Y+12, r24	; 0x0c
}
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	ff 90       	pop	r15
     42a:	08 95       	ret

0000042c <UpdateBallVel>:
	ball[0].yPos +=(ball[0].yVel * deltaTime * 5);
	
	ball[0].curXCoord = round(ball[0].xPos);
	ball[0].curYCoord = round(ball[0].yPos);
}
void UpdateBallVel(struct Ball *ball){
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	ec 01       	movw	r28, r24
	if ((ball[0].yPos <= ymin) && (ball[0].yVel<0)){
     432:	6c 81       	ldd	r22, Y+4	; 0x04
     434:	7d 81       	ldd	r23, Y+5	; 0x05
     436:	8e 81       	ldd	r24, Y+6	; 0x06
     438:	9f 81       	ldd	r25, Y+7	; 0x07
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	40 e8       	ldi	r20, 0x80	; 128
     440:	5f e3       	ldi	r21, 0x3F	; 63
     442:	0e 94 df 06 	call	0xdbe	; 0xdbe <__cmpsf2>
     446:	18 16       	cp	r1, r24
     448:	3c f0       	brlt	.+14     	; 0x458 <UpdateBallVel+0x2c>
     44a:	8e 85       	ldd	r24, Y+14	; 0x0e
     44c:	88 23       	and	r24, r24
     44e:	24 f4       	brge	.+8      	; 0x458 <UpdateBallVel+0x2c>
		ball[0].yVel = -1*ball[0].yVel;
     450:	81 95       	neg	r24
     452:	8e 87       	std	Y+14, r24	; 0x0e
		bounce_sound();
     454:	0e 94 64 06 	call	0xcc8	; 0xcc8 <bounce_sound>
	}
	if ((ball[0].yPos >= ymax) && (ball[0].yVel>0)){
     458:	6c 81       	ldd	r22, Y+4	; 0x04
     45a:	7d 81       	ldd	r23, Y+5	; 0x05
     45c:	8e 81       	ldd	r24, Y+6	; 0x06
     45e:	9f 81       	ldd	r25, Y+7	; 0x07
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	40 e8       	ldi	r20, 0x80	; 128
     466:	50 e4       	ldi	r21, 0x40	; 64
     468:	0e 94 37 08 	call	0x106e	; 0x106e <__gesf2>
     46c:	88 23       	and	r24, r24
     46e:	3c f0       	brlt	.+14     	; 0x47e <UpdateBallVel+0x52>
     470:	8e 85       	ldd	r24, Y+14	; 0x0e
     472:	18 16       	cp	r1, r24
     474:	24 f4       	brge	.+8      	; 0x47e <UpdateBallVel+0x52>
		ball[0].yVel = -1*ball[0].yVel;
     476:	81 95       	neg	r24
     478:	8e 87       	std	Y+14, r24	; 0x0e
		bounce_sound();
     47a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <bounce_sound>
	}
}
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <UpdateBallPosVel>:
	ball[0].curYCoord = 0;
	ball[0].prevXCoord = 0;
	ball[0].prevYCoord = 0;
	ball[0].speedOfBall = 1;
}
void UpdateBallPosVel(struct Ball *ball, float deltaTime){
     484:	8f 92       	push	r8
     486:	9f 92       	push	r9
     488:	af 92       	push	r10
     48a:	bf 92       	push	r11
     48c:	cf 92       	push	r12
     48e:	df 92       	push	r13
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	ec 01       	movw	r28, r24
     49a:	6a 01       	movw	r12, r20
     49c:	7b 01       	movw	r14, r22
	UpdateBallVel(ball);
     49e:	0e 94 16 02 	call	0x42c	; 0x42c <UpdateBallVel>
	ball[0].prevXCoord = ball[0].curXCoord;
     4a2:	88 85       	ldd	r24, Y+8	; 0x08
     4a4:	8a 87       	std	Y+10, r24	; 0x0a
	ball[0].prevYCoord = ball[0].curYCoord; 
     4a6:	89 85       	ldd	r24, Y+9	; 0x09
     4a8:	8b 87       	std	Y+11, r24	; 0x0b
	
	ball[0].xPos +=(ball[0].xVel * deltaTime * ball[0].speedOfBall);
     4aa:	6d 85       	ldd	r22, Y+13	; 0x0d
     4ac:	06 2e       	mov	r0, r22
     4ae:	00 0c       	add	r0, r0
     4b0:	77 0b       	sbc	r23, r23
     4b2:	88 0b       	sbc	r24, r24
     4b4:	99 0b       	sbc	r25, r25
     4b6:	0e 94 87 07 	call	0xf0e	; 0xf0e <__floatsisf>
     4ba:	a7 01       	movw	r20, r14
     4bc:	96 01       	movw	r18, r12
     4be:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3>
     4c2:	4b 01       	movw	r8, r22
     4c4:	5c 01       	movw	r10, r24
     4c6:	6c 85       	ldd	r22, Y+12	; 0x0c
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 87 07 	call	0xf0e	; 0xf0e <__floatsisf>
     4d2:	a5 01       	movw	r20, r10
     4d4:	94 01       	movw	r18, r8
     4d6:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3>
     4da:	28 81       	ld	r18, Y
     4dc:	39 81       	ldd	r19, Y+1	; 0x01
     4de:	4a 81       	ldd	r20, Y+2	; 0x02
     4e0:	5b 81       	ldd	r21, Y+3	; 0x03
     4e2:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     4e6:	4b 01       	movw	r8, r22
     4e8:	5c 01       	movw	r10, r24
     4ea:	68 83       	st	Y, r22
     4ec:	79 83       	std	Y+1, r23	; 0x01
     4ee:	8a 83       	std	Y+2, r24	; 0x02
     4f0:	9b 83       	std	Y+3, r25	; 0x03
	ball[0].yPos +=(ball[0].yVel * deltaTime * 5);
     4f2:	6e 85       	ldd	r22, Y+14	; 0x0e
     4f4:	06 2e       	mov	r0, r22
     4f6:	00 0c       	add	r0, r0
     4f8:	77 0b       	sbc	r23, r23
     4fa:	88 0b       	sbc	r24, r24
     4fc:	99 0b       	sbc	r25, r25
     4fe:	0e 94 87 07 	call	0xf0e	; 0xf0e <__floatsisf>
     502:	a7 01       	movw	r20, r14
     504:	96 01       	movw	r18, r12
     506:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 ea       	ldi	r20, 0xA0	; 160
     510:	50 e4       	ldi	r21, 0x40	; 64
     512:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3>
     516:	2c 81       	ldd	r18, Y+4	; 0x04
     518:	3d 81       	ldd	r19, Y+5	; 0x05
     51a:	4e 81       	ldd	r20, Y+6	; 0x06
     51c:	5f 81       	ldd	r21, Y+7	; 0x07
     51e:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     522:	6b 01       	movw	r12, r22
     524:	7c 01       	movw	r14, r24
     526:	6c 83       	std	Y+4, r22	; 0x04
     528:	7d 83       	std	Y+5, r23	; 0x05
     52a:	8e 83       	std	Y+6, r24	; 0x06
     52c:	9f 83       	std	Y+7, r25	; 0x07
	
	ball[0].curXCoord = round(ball[0].xPos);
     52e:	c5 01       	movw	r24, r10
     530:	b4 01       	movw	r22, r8
     532:	0e 94 a9 08 	call	0x1152	; 0x1152 <round>
     536:	0e 94 56 07 	call	0xeac	; 0xeac <__fixunssfsi>
     53a:	68 87       	std	Y+8, r22	; 0x08
	ball[0].curYCoord = round(ball[0].yPos);
     53c:	c7 01       	movw	r24, r14
     53e:	b6 01       	movw	r22, r12
     540:	0e 94 a9 08 	call	0x1152	; 0x1152 <round>
     544:	0e 94 56 07 	call	0xeac	; 0xeac <__fixunssfsi>
     548:	69 87       	std	Y+9, r22	; 0x09
}
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	ff 90       	pop	r15
     550:	ef 90       	pop	r14
     552:	df 90       	pop	r13
     554:	cf 90       	pop	r12
     556:	bf 90       	pop	r11
     558:	af 90       	pop	r10
     55a:	9f 90       	pop	r9
     55c:	8f 90       	pop	r8
     55e:	08 95       	ret

00000560 <reflect_paddles>:
	if ((ball[0].yPos >= ymax) && (ball[0].yVel>0)){
		ball[0].yVel = -1*ball[0].yVel;
		bounce_sound();
	}
}
void reflect_paddles(struct Player *player, struct Ball *ball){
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	8c 01       	movw	r16, r24
     56a:	eb 01       	movw	r28, r22
	if(((ball[0].curXCoord <= (player[0].xPos + 3)) && (ball[0].xVel < 0)) && ((ball[0].curYCoord >= player[0].curYCoord) && (ball[0].curYCoord <= player[0].curYCoord + 1)))
     56c:	28 85       	ldd	r18, Y+8	; 0x08
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	fc 01       	movw	r30, r24
     572:	82 81       	ldd	r24, Z+2	; 0x02
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	03 96       	adiw	r24, 0x03	; 3
     578:	82 17       	cp	r24, r18
     57a:	93 07       	cpc	r25, r19
     57c:	ac f0       	brlt	.+42     	; 0x5a8 <reflect_paddles+0x48>
     57e:	8d 85       	ldd	r24, Y+13	; 0x0d
     580:	88 23       	and	r24, r24
     582:	94 f4       	brge	.+36     	; 0x5a8 <reflect_paddles+0x48>
     584:	49 85       	ldd	r20, Y+9	; 0x09
     586:	20 85       	ldd	r18, Z+8	; 0x08
     588:	42 17       	cp	r20, r18
     58a:	70 f0       	brcs	.+28     	; 0x5a8 <reflect_paddles+0x48>
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	2f 5f       	subi	r18, 0xFF	; 255
     592:	3f 4f       	sbci	r19, 0xFF	; 255
     594:	24 17       	cp	r18, r20
     596:	35 07       	cpc	r19, r21
     598:	3c f0       	brlt	.+14     	; 0x5a8 <reflect_paddles+0x48>
	{
		ball[0].xVel = -1 * ball[0].xVel;
     59a:	81 95       	neg	r24
     59c:	8d 87       	std	Y+13, r24	; 0x0d
		paddle_sound();
     59e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <paddle_sound>
		ball[0].speedOfBall += 1;
     5a2:	8c 85       	ldd	r24, Y+12	; 0x0c
     5a4:	8f 5f       	subi	r24, 0xFF	; 255
     5a6:	8c 87       	std	Y+12, r24	; 0x0c
	}
	if(((ball[0].curXCoord > (player[1].xPos)) && (ball[0].xVel > 0)) && ((ball[0].curYCoord >= player[1].curYCoord) && (ball[0].curYCoord <= player[1].curYCoord + 1)))
     5a8:	98 85       	ldd	r25, Y+8	; 0x08
     5aa:	f8 01       	movw	r30, r16
     5ac:	84 85       	ldd	r24, Z+12	; 0x0c
     5ae:	89 17       	cp	r24, r25
     5b0:	a0 f4       	brcc	.+40     	; 0x5da <reflect_paddles+0x7a>
     5b2:	4d 85       	ldd	r20, Y+13	; 0x0d
     5b4:	14 16       	cp	r1, r20
     5b6:	8c f4       	brge	.+34     	; 0x5da <reflect_paddles+0x7a>
     5b8:	29 85       	ldd	r18, Y+9	; 0x09
     5ba:	82 89       	ldd	r24, Z+18	; 0x12
     5bc:	28 17       	cp	r18, r24
     5be:	68 f0       	brcs	.+26     	; 0x5da <reflect_paddles+0x7a>
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	82 17       	cp	r24, r18
     5c8:	93 07       	cpc	r25, r19
     5ca:	3c f0       	brlt	.+14     	; 0x5da <reflect_paddles+0x7a>
	{
		ball[0].xVel = -1 * ball[0].xVel;
     5cc:	41 95       	neg	r20
     5ce:	4d 87       	std	Y+13, r20	; 0x0d
		paddle_sound();
     5d0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <paddle_sound>
		ball[0].speedOfBall += 1;
     5d4:	8c 85       	ldd	r24, Y+12	; 0x0c
     5d6:	8f 5f       	subi	r24, 0xFF	; 255
     5d8:	8c 87       	std	Y+12, r24	; 0x0c
	}
	
     5da:	df 91       	pop	r29
     5dc:	cf 91       	pop	r28
     5de:	1f 91       	pop	r17
     5e0:	0f 91       	pop	r16
     5e2:	08 95       	ret

000005e4 <InitInputs>:
#include <avr/io.h>

#define PADDLE_VELOCITY 5

void InitInputs(struct Player *player)
{	
     5e4:	fc 01       	movw	r30, r24
	//Initializing data direction register for button ports to be Inputs
	DDRC |= (0 << DDRC3);
     5e6:	87 b1       	in	r24, 0x07	; 7
     5e8:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC2);
     5ea:	87 b1       	in	r24, 0x07	; 7
     5ec:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC1);
     5ee:	87 b1       	in	r24, 0x07	; 7
     5f0:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC0);
     5f2:	87 b1       	in	r24, 0x07	; 7
     5f4:	87 b9       	out	0x07, r24	; 7
	
	//Initializing ports of buttons to produce a signal enabling ()
	PORTC |= (1 << PORTC3);
     5f6:	88 b1       	in	r24, 0x08	; 8
     5f8:	88 60       	ori	r24, 0x08	; 8
     5fa:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC2);
     5fc:	88 b1       	in	r24, 0x08	; 8
     5fe:	84 60       	ori	r24, 0x04	; 4
     600:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC1);
     602:	88 b1       	in	r24, 0x08	; 8
     604:	82 60       	ori	r24, 0x02	; 2
     606:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC0);
     608:	88 b1       	in	r24, 0x08	; 8
     60a:	81 60       	ori	r24, 0x01	; 1
     60c:	88 b9       	out	0x08, r24	; 8
	
	//Initializing LED output (CAN BE DELETED AFTER DEBUG PHASE)
	DDRB |= (1 << DDRB5);
     60e:	84 b1       	in	r24, 0x04	; 4
     610:	80 62       	ori	r24, 0x20	; 32
     612:	84 b9       	out	0x04, r24	; 4
	
	player[0].prevYCoord = 0;
     614:	17 82       	std	Z+7, r1	; 0x07
	player[0].curYCoord = 0;
     616:	10 86       	std	Z+8, r1	; 0x08
	player[1].prevYCoord = 0;
     618:	11 8a       	std	Z+17, r1	; 0x11
	player[1].curYCoord = 0;
     61a:	12 8a       	std	Z+18, r1	; 0x12
     61c:	08 95       	ret

0000061e <PollInputs>:
}

void PollInputs(struct Player *player)
{
     61e:	fc 01       	movw	r30, r24
	//Poll for first button
	if (!(BUTTON_PORTS & FIRST_BUTTON_PIN_LOCATION))
     620:	33 99       	sbic	0x06, 3	; 6
     622:	03 c0       	rjmp	.+6      	; 0x62a <PollInputs+0xc>
	{
		player[0].downFlag = true;
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	81 83       	std	Z+1, r24	; 0x01
     628:	01 c0       	rjmp	.+2      	; 0x62c <PollInputs+0xe>
	}
	else
	{
		player[0].downFlag = false;
     62a:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//Poll for second button
	if (!(BUTTON_PORTS & SECOND_BUTTON_PIN_LOCATION))
     62c:	32 99       	sbic	0x06, 2	; 6
     62e:	03 c0       	rjmp	.+6      	; 0x636 <PollInputs+0x18>
	{
		player[0].upFlag = true;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 83       	st	Z, r24
     634:	01 c0       	rjmp	.+2      	; 0x638 <PollInputs+0x1a>
	}
	else
	{
		player[0].upFlag = false;
     636:	10 82       	st	Z, r1
	}
	
	//Poll for third button
	if (!(BUTTON_PORTS & THIRD_BUTTON_PIN_LOCATION))
     638:	31 99       	sbic	0x06, 1	; 6
     63a:	03 c0       	rjmp	.+6      	; 0x642 <PollInputs+0x24>
	{
		player[1].downFlag = true;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	83 87       	std	Z+11, r24	; 0x0b
     640:	01 c0       	rjmp	.+2      	; 0x644 <PollInputs+0x26>
	}
	else
	{
		player[1].downFlag = false;
     642:	13 86       	std	Z+11, r1	; 0x0b
	}
	
	//Poll for fourth button
	if (!(BUTTON_PORTS & FOURTH_BUTTON_PIN_LOCATION))
     644:	30 99       	sbic	0x06, 0	; 6
     646:	03 c0       	rjmp	.+6      	; 0x64e <PollInputs+0x30>
	{
		player[1].upFlag = true;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	82 87       	std	Z+10, r24	; 0x0a
     64c:	08 95       	ret
	}
	else
	{
		player[1].upFlag = false;
     64e:	12 86       	std	Z+10, r1	; 0x0a
     650:	08 95       	ret

00000652 <CheckInputs>:
	}
}

void CheckInputs(struct Player *player)
{
     652:	fc 01       	movw	r30, r24

	//checking for double inputs
	if ((player[0].downFlag == true) && (player[0].upFlag == true))
     654:	81 81       	ldd	r24, Z+1	; 0x01
     656:	88 23       	and	r24, r24
     658:	29 f0       	breq	.+10     	; 0x664 <CheckInputs+0x12>
     65a:	80 81       	ld	r24, Z
     65c:	88 23       	and	r24, r24
     65e:	11 f0       	breq	.+4      	; 0x664 <CheckInputs+0x12>
	{
		player[0].downFlag = false;
     660:	11 82       	std	Z+1, r1	; 0x01
		player[0].upFlag = false;
     662:	10 82       	st	Z, r1
	}
	if ((player[1].downFlag == true) && (player[1].upFlag == true))
     664:	83 85       	ldd	r24, Z+11	; 0x0b
     666:	88 23       	and	r24, r24
     668:	29 f0       	breq	.+10     	; 0x674 <CheckInputs+0x22>
     66a:	82 85       	ldd	r24, Z+10	; 0x0a
     66c:	88 23       	and	r24, r24
     66e:	11 f0       	breq	.+4      	; 0x674 <CheckInputs+0x22>
	{
		player[1].downFlag = false;
     670:	13 86       	std	Z+11, r1	; 0x0b
		player[1].upFlag = false;
     672:	12 86       	std	Z+10, r1	; 0x0a
	}
	
	//Checking up flag boundaries
	if ((player[0].upFlag == true) && (player[0].curYCoord <= 1))
     674:	80 81       	ld	r24, Z
     676:	88 23       	and	r24, r24
     678:	21 f0       	breq	.+8      	; 0x682 <CheckInputs+0x30>
     67a:	80 85       	ldd	r24, Z+8	; 0x08
     67c:	82 30       	cpi	r24, 0x02	; 2
     67e:	08 f4       	brcc	.+2      	; 0x682 <CheckInputs+0x30>
	{
		player[0].upFlag = false;
     680:	10 82       	st	Z, r1
	}
	if ((player[1].upFlag == true) && (player[1].curYCoord <= 1))
     682:	82 85       	ldd	r24, Z+10	; 0x0a
     684:	88 23       	and	r24, r24
     686:	21 f0       	breq	.+8      	; 0x690 <CheckInputs+0x3e>
     688:	82 89       	ldd	r24, Z+18	; 0x12
     68a:	82 30       	cpi	r24, 0x02	; 2
     68c:	08 f4       	brcc	.+2      	; 0x690 <CheckInputs+0x3e>
	{
		player[1].upFlag = false;
     68e:	12 86       	std	Z+10, r1	; 0x0a
	}
	
	//Checking down flag boundaries
	if ((player[0].downFlag == true) && (player[0].curYCoord >= 3))
     690:	81 81       	ldd	r24, Z+1	; 0x01
     692:	88 23       	and	r24, r24
     694:	21 f0       	breq	.+8      	; 0x69e <CheckInputs+0x4c>
     696:	80 85       	ldd	r24, Z+8	; 0x08
     698:	83 30       	cpi	r24, 0x03	; 3
     69a:	08 f0       	brcs	.+2      	; 0x69e <CheckInputs+0x4c>
	{
		player[0].downFlag = false;
     69c:	11 82       	std	Z+1, r1	; 0x01
	}
	if ((player[1].downFlag == true) && (player[1].curYCoord >= 3))
     69e:	83 85       	ldd	r24, Z+11	; 0x0b
     6a0:	88 23       	and	r24, r24
     6a2:	21 f0       	breq	.+8      	; 0x6ac <CheckInputs+0x5a>
     6a4:	82 89       	ldd	r24, Z+18	; 0x12
     6a6:	83 30       	cpi	r24, 0x03	; 3
     6a8:	08 f0       	brcs	.+2      	; 0x6ac <CheckInputs+0x5a>
	{
		player[1].downFlag = false;
     6aa:	13 86       	std	Z+11, r1	; 0x0b
     6ac:	08 95       	ret

000006ae <ExecuteInputs>:
	}
}

void ExecuteInputs(struct Player *player, float deltaTime)
{
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	ec 01       	movw	r28, r24
     6bc:	6a 01       	movw	r12, r20
     6be:	7b 01       	movw	r14, r22
	player[0].prevYCoord = player[0].curYCoord;
     6c0:	88 85       	ldd	r24, Y+8	; 0x08
     6c2:	8f 83       	std	Y+7, r24	; 0x07
	player[1].prevYCoord = player[1].curYCoord;
     6c4:	8a 89       	ldd	r24, Y+18	; 0x12
     6c6:	89 8b       	std	Y+17, r24	; 0x11
	if (player[0].upFlag)
     6c8:	88 81       	ld	r24, Y
     6ca:	88 23       	and	r24, r24
     6cc:	a1 f0       	breq	.+40     	; 0x6f6 <ExecuteInputs+0x48>
	{	
		player[0].yPos -= PADDLE_VELOCITY * deltaTime;
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 ea       	ldi	r20, 0xA0	; 160
     6d4:	50 e4       	ldi	r21, 0x40	; 64
     6d6:	c7 01       	movw	r24, r14
     6d8:	b6 01       	movw	r22, r12
     6da:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3>
     6de:	9b 01       	movw	r18, r22
     6e0:	ac 01       	movw	r20, r24
     6e2:	6b 81       	ldd	r22, Y+3	; 0x03
     6e4:	7c 81       	ldd	r23, Y+4	; 0x04
     6e6:	8d 81       	ldd	r24, Y+5	; 0x05
     6e8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ea:	0e 94 72 06 	call	0xce4	; 0xce4 <__subsf3>
     6ee:	6b 83       	std	Y+3, r22	; 0x03
     6f0:	7c 83       	std	Y+4, r23	; 0x04
     6f2:	8d 83       	std	Y+5, r24	; 0x05
     6f4:	9e 83       	std	Y+6, r25	; 0x06
	}
	if (player[0].downFlag)
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	88 23       	and	r24, r24
     6fa:	a1 f0       	breq	.+40     	; 0x724 <ExecuteInputs+0x76>
	{
		player[0].yPos += PADDLE_VELOCITY * deltaTime;
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 ea       	ldi	r20, 0xA0	; 160
     702:	50 e4       	ldi	r21, 0x40	; 64
     704:	c7 01       	movw	r24, r14
     706:	b6 01       	movw	r22, r12
     708:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3>
     70c:	9b 01       	movw	r18, r22
     70e:	ac 01       	movw	r20, r24
     710:	6b 81       	ldd	r22, Y+3	; 0x03
     712:	7c 81       	ldd	r23, Y+4	; 0x04
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	9e 81       	ldd	r25, Y+6	; 0x06
     718:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     71c:	6b 83       	std	Y+3, r22	; 0x03
     71e:	7c 83       	std	Y+4, r23	; 0x04
     720:	8d 83       	std	Y+5, r24	; 0x05
     722:	9e 83       	std	Y+6, r25	; 0x06
	}
	if (player[1].upFlag)
     724:	8a 85       	ldd	r24, Y+10	; 0x0a
     726:	88 23       	and	r24, r24
     728:	a1 f0       	breq	.+40     	; 0x752 <ExecuteInputs+0xa4>
	{
		player[1].yPos -= PADDLE_VELOCITY * deltaTime;
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	40 ea       	ldi	r20, 0xA0	; 160
     730:	50 e4       	ldi	r21, 0x40	; 64
     732:	c7 01       	movw	r24, r14
     734:	b6 01       	movw	r22, r12
     736:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3>
     73a:	9b 01       	movw	r18, r22
     73c:	ac 01       	movw	r20, r24
     73e:	6d 85       	ldd	r22, Y+13	; 0x0d
     740:	7e 85       	ldd	r23, Y+14	; 0x0e
     742:	8f 85       	ldd	r24, Y+15	; 0x0f
     744:	98 89       	ldd	r25, Y+16	; 0x10
     746:	0e 94 72 06 	call	0xce4	; 0xce4 <__subsf3>
     74a:	6d 87       	std	Y+13, r22	; 0x0d
     74c:	7e 87       	std	Y+14, r23	; 0x0e
     74e:	8f 87       	std	Y+15, r24	; 0x0f
     750:	98 8b       	std	Y+16, r25	; 0x10
	}
	if (player[1].downFlag)
     752:	8b 85       	ldd	r24, Y+11	; 0x0b
     754:	88 23       	and	r24, r24
     756:	a1 f0       	breq	.+40     	; 0x780 <ExecuteInputs+0xd2>
	{
		player[1].yPos += PADDLE_VELOCITY * deltaTime;
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 ea       	ldi	r20, 0xA0	; 160
     75e:	50 e4       	ldi	r21, 0x40	; 64
     760:	c7 01       	movw	r24, r14
     762:	b6 01       	movw	r22, r12
     764:	0e 94 3c 08 	call	0x1078	; 0x1078 <__mulsf3>
     768:	9b 01       	movw	r18, r22
     76a:	ac 01       	movw	r20, r24
     76c:	6d 85       	ldd	r22, Y+13	; 0x0d
     76e:	7e 85       	ldd	r23, Y+14	; 0x0e
     770:	8f 85       	ldd	r24, Y+15	; 0x0f
     772:	98 89       	ldd	r25, Y+16	; 0x10
     774:	0e 94 73 06 	call	0xce6	; 0xce6 <__addsf3>
     778:	6d 87       	std	Y+13, r22	; 0x0d
     77a:	7e 87       	std	Y+14, r23	; 0x0e
     77c:	8f 87       	std	Y+15, r24	; 0x0f
     77e:	98 8b       	std	Y+16, r25	; 0x10
	}
	player[0].curYCoord = round(player[0].yPos);
     780:	6b 81       	ldd	r22, Y+3	; 0x03
     782:	7c 81       	ldd	r23, Y+4	; 0x04
     784:	8d 81       	ldd	r24, Y+5	; 0x05
     786:	9e 81       	ldd	r25, Y+6	; 0x06
     788:	0e 94 a9 08 	call	0x1152	; 0x1152 <round>
     78c:	0e 94 56 07 	call	0xeac	; 0xeac <__fixunssfsi>
     790:	68 87       	std	Y+8, r22	; 0x08
	player[1].curYCoord = round(player[1].yPos);
     792:	6d 85       	ldd	r22, Y+13	; 0x0d
     794:	7e 85       	ldd	r23, Y+14	; 0x0e
     796:	8f 85       	ldd	r24, Y+15	; 0x0f
     798:	98 89       	ldd	r25, Y+16	; 0x10
     79a:	0e 94 a9 08 	call	0x1152	; 0x1152 <round>
     79e:	0e 94 56 07 	call	0xeac	; 0xeac <__fixunssfsi>
     7a2:	6a 8b       	std	Y+18, r22	; 0x12
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	ff 90       	pop	r15
     7aa:	ef 90       	pop	r14
     7ac:	df 90       	pop	r13
     7ae:	cf 90       	pop	r12
     7b0:	08 95       	ret

000007b2 <BeginTransmisson>:
     7b2:	84 ea       	ldi	r24, 0xA4	; 164
     7b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7bc:	88 23       	and	r24, r24
     7be:	e4 f7       	brge	.-8      	; 0x7b8 <BeginTransmisson+0x6>
     7c0:	8e e4       	ldi	r24, 0x4E	; 78
     7c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7c6:	84 e8       	ldi	r24, 0x84	; 132
     7c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7d0:	88 23       	and	r24, r24
     7d2:	e4 f7       	brge	.-8      	; 0x7cc <BeginTransmisson+0x1a>
     7d4:	08 95       	ret

000007d6 <EndTransmisson>:
     7d6:	84 e9       	ldi	r24, 0x94	; 148
     7d8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     7dc:	8f e8       	ldi	r24, 0x8F	; 143
     7de:	91 e0       	ldi	r25, 0x01	; 1
     7e0:	01 97       	sbiw	r24, 0x01	; 1
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <EndTransmisson+0xa>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <EndTransmisson+0x10>
     7e6:	00 00       	nop
     7e8:	08 95       	ret

000007ea <ExpanderWrite>:
     7ea:	cf 93       	push	r28
     7ec:	c8 2f       	mov	r28, r24
     7ee:	87 e2       	ldi	r24, 0x27	; 39
     7f0:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <BeginTransmisson>
     7f4:	c8 60       	ori	r28, 0x08	; 8
     7f6:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     7fa:	84 e8       	ldi	r24, 0x84	; 132
     7fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     800:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     804:	88 23       	and	r24, r24
     806:	e4 f7       	brge	.-8      	; 0x800 <__DATA_REGION_LENGTH__>
     808:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <EndTransmisson>
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <PulseEnable>:
     810:	cf 93       	push	r28
     812:	c8 2f       	mov	r28, r24
     814:	84 60       	ori	r24, 0x04	; 4
     816:	0e 94 f5 03 	call	0x7ea	; 0x7ea <ExpanderWrite>
     81a:	85 e0       	ldi	r24, 0x05	; 5
     81c:	8a 95       	dec	r24
     81e:	f1 f7       	brne	.-4      	; 0x81c <PulseEnable+0xc>
     820:	00 00       	nop
     822:	8c 2f       	mov	r24, r28
     824:	8b 7f       	andi	r24, 0xFB	; 251
     826:	0e 94 f5 03 	call	0x7ea	; 0x7ea <ExpanderWrite>
     82a:	87 ec       	ldi	r24, 0xC7	; 199
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	01 97       	sbiw	r24, 0x01	; 1
     830:	f1 f7       	brne	.-4      	; 0x82e <PulseEnable+0x1e>
     832:	00 c0       	rjmp	.+0      	; 0x834 <PulseEnable+0x24>
     834:	00 00       	nop
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <Write4Bits>:
     83a:	cf 93       	push	r28
     83c:	c8 2f       	mov	r28, r24
     83e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <ExpanderWrite>
     842:	8c 2f       	mov	r24, r28
     844:	0e 94 08 04 	call	0x810	; 0x810 <PulseEnable>
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <SendCommand>:
     84c:	cf 93       	push	r28
     84e:	c8 2f       	mov	r28, r24
     850:	80 7f       	andi	r24, 0xF0	; 240
     852:	0e 94 1d 04 	call	0x83a	; 0x83a <Write4Bits>
     856:	8c 2f       	mov	r24, r28
     858:	82 95       	swap	r24
     85a:	80 7f       	andi	r24, 0xF0	; 240
     85c:	0e 94 1d 04 	call	0x83a	; 0x83a <Write4Bits>
     860:	8f e9       	ldi	r24, 0x9F	; 159
     862:	9f e0       	ldi	r25, 0x0F	; 15
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <SendCommand+0x18>
     868:	00 c0       	rjmp	.+0      	; 0x86a <SendCommand+0x1e>
     86a:	00 00       	nop
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <SendData>:
     870:	cf 93       	push	r28
     872:	c8 2f       	mov	r28, r24
     874:	80 7f       	andi	r24, 0xF0	; 240
     876:	81 60       	ori	r24, 0x01	; 1
     878:	0e 94 1d 04 	call	0x83a	; 0x83a <Write4Bits>
     87c:	20 e1       	ldi	r18, 0x10	; 16
     87e:	c2 9f       	mul	r28, r18
     880:	c0 01       	movw	r24, r0
     882:	11 24       	eor	r1, r1
     884:	81 60       	ori	r24, 0x01	; 1
     886:	0e 94 1d 04 	call	0x83a	; 0x83a <Write4Bits>
     88a:	8f e9       	ldi	r24, 0x9F	; 159
     88c:	9f e0       	ldi	r25, 0x0F	; 15
     88e:	01 97       	sbiw	r24, 0x01	; 1
     890:	f1 f7       	brne	.-4      	; 0x88e <SendData+0x1e>
     892:	00 c0       	rjmp	.+0      	; 0x894 <SendData+0x24>
     894:	00 00       	nop
     896:	cf 91       	pop	r28
     898:	08 95       	ret

0000089a <CreateCustomChar>:
     89a:	ff 92       	push	r15
     89c:	0f 93       	push	r16
     89e:	1f 93       	push	r17
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	f8 2e       	mov	r15, r24
     8a6:	8b 01       	movw	r16, r22
     8a8:	c0 e0       	ldi	r28, 0x00	; 0
     8aa:	d0 e0       	ldi	r29, 0x00	; 0
     8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <CreateCustomChar+0x36>
     8ae:	8f 2d       	mov	r24, r15
     8b0:	87 70       	andi	r24, 0x07	; 7
     8b2:	88 0f       	add	r24, r24
     8b4:	88 0f       	add	r24, r24
     8b6:	88 0f       	add	r24, r24
     8b8:	8c 0f       	add	r24, r28
     8ba:	80 64       	ori	r24, 0x40	; 64
     8bc:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
     8c0:	f8 01       	movw	r30, r16
     8c2:	ec 0f       	add	r30, r28
     8c4:	fd 1f       	adc	r31, r29
     8c6:	80 81       	ld	r24, Z
     8c8:	8f 71       	andi	r24, 0x1F	; 31
     8ca:	0e 94 38 04 	call	0x870	; 0x870 <SendData>
     8ce:	21 96       	adiw	r28, 0x01	; 1
     8d0:	c8 30       	cpi	r28, 0x08	; 8
     8d2:	d1 05       	cpc	r29, r1
     8d4:	64 f3       	brlt	.-40     	; 0x8ae <CreateCustomChar+0x14>
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	ff 90       	pop	r15
     8e0:	08 95       	ret

000008e2 <InitLCD>:
     8e2:	87 b1       	in	r24, 0x07	; 7
     8e4:	87 b9       	out	0x07, r24	; 7
     8e6:	87 b1       	in	r24, 0x07	; 7
     8e8:	87 b9       	out	0x07, r24	; 7
     8ea:	88 b1       	in	r24, 0x08	; 8
     8ec:	80 61       	ori	r24, 0x10	; 16
     8ee:	88 b9       	out	0x08, r24	; 8
     8f0:	88 b1       	in	r24, 0x08	; 8
     8f2:	80 62       	ori	r24, 0x20	; 32
     8f4:	88 b9       	out	0x08, r24	; 8
     8f6:	88 e4       	ldi	r24, 0x48	; 72
     8f8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     8fc:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     900:	84 e0       	ldi	r24, 0x04	; 4
     902:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     906:	88 e0       	ldi	r24, 0x08	; 8
     908:	0e 94 f5 03 	call	0x7ea	; 0x7ea <ExpanderWrite>
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0e 94 1d 04 	call	0x83a	; 0x83a <Write4Bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     912:	8f e4       	ldi	r24, 0x4F	; 79
     914:	96 e4       	ldi	r25, 0x46	; 70
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	f1 f7       	brne	.-4      	; 0x916 <__stack+0x17>
     91a:	00 c0       	rjmp	.+0      	; 0x91c <__stack+0x1d>
     91c:	00 00       	nop
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	0e 94 1d 04 	call	0x83a	; 0x83a <Write4Bits>
     924:	8f e4       	ldi	r24, 0x4F	; 79
     926:	96 e4       	ldi	r25, 0x46	; 70
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <__stack+0x29>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
     92e:	00 00       	nop
     930:	83 e0       	ldi	r24, 0x03	; 3
     932:	0e 94 1d 04 	call	0x83a	; 0x83a <Write4Bits>
     936:	87 e5       	ldi	r24, 0x57	; 87
     938:	92 e0       	ldi	r25, 0x02	; 2
     93a:	01 97       	sbiw	r24, 0x01	; 1
     93c:	f1 f7       	brne	.-4      	; 0x93a <__stack+0x3b>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <__stack+0x41>
     940:	00 00       	nop
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	0e 94 1d 04 	call	0x83a	; 0x83a <Write4Bits>
     948:	88 e2       	ldi	r24, 0x28	; 40
     94a:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
     94e:	8c e0       	ldi	r24, 0x0C	; 12
     950:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
     954:	60 e1       	ldi	r22, 0x10	; 16
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	84 e0       	ldi	r24, 0x04	; 4
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 4d 04 	call	0x89a	; 0x89a <CreateCustomChar>
     960:	68 e0       	ldi	r22, 0x08	; 8
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 4d 04 	call	0x89a	; 0x89a <CreateCustomChar>
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	71 e0       	ldi	r23, 0x01	; 1
     970:	83 e0       	ldi	r24, 0x03	; 3
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 4d 04 	call	0x89a	; 0x89a <CreateCustomChar>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
     97e:	82 e0       	ldi	r24, 0x02	; 2
     980:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
     984:	86 e0       	ldi	r24, 0x06	; 6
     986:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
     98a:	8c e0       	ldi	r24, 0x0C	; 12
     98c:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
     990:	08 95       	ret

00000992 <SetCursorPosition>:
     992:	9f ef       	ldi	r25, 0xFF	; 255
     994:	98 0f       	add	r25, r24
     996:	63 30       	cpi	r22, 0x03	; 3
     998:	39 f0       	breq	.+14     	; 0x9a8 <SetCursorPosition+0x16>
     99a:	64 30       	cpi	r22, 0x04	; 4
     99c:	41 f0       	breq	.+16     	; 0x9ae <SetCursorPosition+0x1c>
     99e:	62 30       	cpi	r22, 0x02	; 2
     9a0:	41 f4       	brne	.+16     	; 0x9b2 <SetCursorPosition+0x20>
     9a2:	9f e3       	ldi	r25, 0x3F	; 63
     9a4:	98 0f       	add	r25, r24
     9a6:	05 c0       	rjmp	.+10     	; 0x9b2 <SetCursorPosition+0x20>
     9a8:	93 e1       	ldi	r25, 0x13	; 19
     9aa:	98 0f       	add	r25, r24
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <SetCursorPosition+0x20>
     9ae:	93 e5       	ldi	r25, 0x53	; 83
     9b0:	98 0f       	add	r25, r24
     9b2:	89 2f       	mov	r24, r25
     9b4:	80 68       	ori	r24, 0x80	; 128
     9b6:	0e 94 26 04 	call	0x84c	; 0x84c <SendCommand>
     9ba:	08 95       	ret

000009bc <myMillis>:
volatile uint32_t previousTime = 0;

uint32_t myMillis() {
	uint32_t ms;
	// Disable interrupts to ensure atomic access to the variable
	cli();
     9bc:	f8 94       	cli
	ms = milliseconds;
     9be:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <milliseconds>
     9c2:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <milliseconds+0x1>
     9c6:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <milliseconds+0x2>
     9ca:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <milliseconds+0x3>
	// Enable interrupts back
	sei();
     9ce:	78 94       	sei
	return ms;
}
     9d0:	08 95       	ret

000009d2 <GetDeltaTime>:

float GetDeltaTime()
{
     9d2:	cf 92       	push	r12
     9d4:	df 92       	push	r13
     9d6:	ef 92       	push	r14
     9d8:	ff 92       	push	r15
     9da:	0f 93       	push	r16
     9dc:	1f 93       	push	r17
	uint32_t currentTime = myMillis();
     9de:	0e 94 de 04 	call	0x9bc	; 0x9bc <myMillis>
     9e2:	8b 01       	movw	r16, r22
     9e4:	9c 01       	movw	r18, r24
	uint32_t deltaTime = (currentTime - previousTime);
     9e6:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_end>
     9ea:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <__data_end+0x1>
     9ee:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end+0x2>
     9f2:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x3>
     9f6:	68 01       	movw	r12, r16
     9f8:	79 01       	movw	r14, r18
     9fa:	c4 1a       	sub	r12, r20
     9fc:	d5 0a       	sbc	r13, r21
     9fe:	e6 0a       	sbc	r14, r22
     a00:	f7 0a       	sbc	r15, r23
     a02:	c7 01       	movw	r24, r14
     a04:	b6 01       	movw	r22, r12
	previousTime = currentTime;
     a06:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <__data_end>
     a0a:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <__data_end+0x1>
     a0e:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <__data_end+0x2>
     a12:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <__data_end+0x3>
	return deltaTime;
     a16:	0e 94 85 07 	call	0xf0a	; 0xf0a <__floatunsisf>
}
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	08 95       	ret

00000a28 <init_timer0>:

void init_timer0() {
	// Set the timer mode to CTC (Clear Timer on Compare Match) mode
	TCCR0A |= (1 << WGM01);
     a28:	84 b5       	in	r24, 0x24	; 36
     a2a:	82 60       	ori	r24, 0x02	; 2
     a2c:	84 bd       	out	0x24, r24	; 36

	// Set the prescaler to 64 (adjust as needed for your application)
	TCCR0B |= (1 << CS01) | (1 << CS00);
     a2e:	85 b5       	in	r24, 0x25	; 37
     a30:	83 60       	ori	r24, 0x03	; 3
     a32:	85 bd       	out	0x25, r24	; 37

	// Calculate the compare match value (OCR0A) for 1 ms interrupt period
	OCR0A = (F_CPU / (64UL * 1000)) - 1;
     a34:	89 ef       	ldi	r24, 0xF9	; 249
     a36:	87 bd       	out	0x27, r24	; 39

	// Enable TIMER0 compare match interrupt
	TIMSK0 |= (1 << OCIE0A);
     a38:	ee e6       	ldi	r30, 0x6E	; 110
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	82 60       	ori	r24, 0x02	; 2
     a40:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
     a42:	78 94       	sei
     a44:	08 95       	ret

00000a46 <__vector_14>:
}

// TIMER0 compare match interrupt handler
ISR(TIMER0_COMPA_vect) {
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	0f 92       	push	r0
     a4e:	11 24       	eor	r1, r1
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
	milliseconds++;
     a58:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <milliseconds>
     a5c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <milliseconds+0x1>
     a60:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <milliseconds+0x2>
     a64:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <milliseconds+0x3>
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	a1 1d       	adc	r26, r1
     a6c:	b1 1d       	adc	r27, r1
     a6e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <milliseconds>
     a72:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <milliseconds+0x1>
     a76:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <milliseconds+0x2>
     a7a:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <milliseconds+0x3>
}
     a7e:	bf 91       	pop	r27
     a80:	af 91       	pop	r26
     a82:	9f 91       	pop	r25
     a84:	8f 91       	pop	r24
     a86:	0f 90       	pop	r0
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <main>:

int main(void)
{	
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	a4 97       	sbiw	r28, 0x24	; 36
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	de bf       	out	0x3e, r29	; 62
     aa0:	0f be       	out	0x3f, r0	; 63
     aa2:	cd bf       	out	0x3d, r28	; 61
	//_delay_ms(1000);
	cli();
     aa4:	f8 94       	cli
	init_timer0();
     aa6:	0e 94 14 05 	call	0xa28	; 0xa28 <init_timer0>
	float deltaTime = (GetDeltaTime() / 1000.0);
     aaa:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <GetDeltaTime>
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	4a e7       	ldi	r20, 0x7A	; 122
     ab4:	54 e4       	ldi	r21, 0x44	; 68
     ab6:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3>
     aba:	6b 01       	movw	r12, r22
     abc:	7c 01       	movw	r14, r24
	struct Player player[2];
	InitInputs(player);
     abe:	ce 01       	movw	r24, r28
     ac0:	01 96       	adiw	r24, 0x01	; 1
     ac2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <InitInputs>
	struct Ball ball[1];
	init_ball(ball,10,2,1,1);
     ac6:	01 e0       	ldi	r16, 0x01	; 1
     ac8:	21 e0       	ldi	r18, 0x01	; 1
     aca:	42 e0       	ldi	r20, 0x02	; 2
     acc:	6a e0       	ldi	r22, 0x0A	; 10
     ace:	ce 01       	movw	r24, r28
     ad0:	45 96       	adiw	r24, 0x15	; 21
     ad2:	0e 94 ed 01 	call	0x3da	; 0x3da <init_ball>
	InitLCD();
     ad6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <InitLCD>
	ResetBoard(player);
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	0e 94 b2 00 	call	0x164	; 0x164 <ResetBoard>
    while (1)
    {
	    PollInputs(player);
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	0e 94 0f 03 	call	0x61e	; 0x61e <PollInputs>
	    CheckInputs(player);
     aea:	ce 01       	movw	r24, r28
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	0e 94 29 03 	call	0x652	; 0x652 <CheckInputs>
		ExecuteInputs(player, deltaTime);
     af2:	b7 01       	movw	r22, r14
     af4:	a6 01       	movw	r20, r12
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	0e 94 57 03 	call	0x6ae	; 0x6ae <ExecuteInputs>
		reflect_paddles(player, ball);
     afe:	be 01       	movw	r22, r28
     b00:	6b 5e       	subi	r22, 0xEB	; 235
     b02:	7f 4f       	sbci	r23, 0xFF	; 255
     b04:	ce 01       	movw	r24, r28
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	0e 94 b0 02 	call	0x560	; 0x560 <reflect_paddles>
		UpdateBallPosVel(ball, deltaTime);
     b0c:	b7 01       	movw	r22, r14
     b0e:	a6 01       	movw	r20, r12
     b10:	ce 01       	movw	r24, r28
     b12:	45 96       	adiw	r24, 0x15	; 21
     b14:	0e 94 42 02 	call	0x484	; 0x484 <UpdateBallPosVel>
		char resetDeltaTime = 0;
     b18:	1c a2       	std	Y+36, r1	; 0x24
		DetectUpdateScore(player, ball, &resetDeltaTime);
     b1a:	ae 01       	movw	r20, r28
     b1c:	4c 5d       	subi	r20, 0xDC	; 220
     b1e:	5f 4f       	sbci	r21, 0xFF	; 255
     b20:	be 01       	movw	r22, r28
     b22:	6b 5e       	subi	r22, 0xEB	; 235
     b24:	7f 4f       	sbci	r23, 0xFF	; 255
     b26:	ce 01       	movw	r24, r28
     b28:	01 96       	adiw	r24, 0x01	; 1
     b2a:	0e 94 8c 01 	call	0x318	; 0x318 <DetectUpdateScore>
		if (resetDeltaTime == 1)
     b2e:	8c a1       	ldd	r24, Y+36	; 0x24
     b30:	81 30       	cpi	r24, 0x01	; 1
     b32:	21 f4       	brne	.+8      	; 0xb3c <main+0xac>
		{
			deltaTime = (GetDeltaTime() / 1000);
     b34:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <GetDeltaTime>
			deltaTime = (GetDeltaTime() / 1000);
     b38:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <GetDeltaTime>
		}
		UpdateBoard(player,ball);
     b3c:	be 01       	movw	r22, r28
     b3e:	6b 5e       	subi	r22, 0xEB	; 235
     b40:	7f 4f       	sbci	r23, 0xFF	; 255
     b42:	ce 01       	movw	r24, r28
     b44:	01 96       	adiw	r24, 0x01	; 1
     b46:	0e 94 12 01 	call	0x224	; 0x224 <UpdateBoard>
		deltaTime = (GetDeltaTime() / 1000);
     b4a:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <GetDeltaTime>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	4a e7       	ldi	r20, 0x7A	; 122
     b54:	54 e4       	ldi	r21, 0x44	; 68
     b56:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__divsf3>
     b5a:	6b 01       	movw	r12, r22
     b5c:	7c 01       	movw	r14, r24
	}
     b5e:	c1 cf       	rjmp	.-126    	; 0xae2 <main+0x52>

00000b60 <__vector_11>:
     b60:	1f 92       	push	r1
     b62:	0f 92       	push	r0
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	0f 92       	push	r0
     b68:	11 24       	eor	r1, r1
     b6a:	2f 93       	push	r18
     b6c:	3f 93       	push	r19
     b6e:	4f 93       	push	r20
     b70:	5f 93       	push	r21
     b72:	6f 93       	push	r22
     b74:	7f 93       	push	r23
     b76:	8f 93       	push	r24
     b78:	9f 93       	push	r25
     b7a:	af 93       	push	r26
     b7c:	bf 93       	push	r27
     b7e:	ef 93       	push	r30
     b80:	ff 93       	push	r31
     b82:	0e 94 79 00 	call	0xf2	; 0xf2 <TIM1_COMPA>
     b86:	ff 91       	pop	r31
     b88:	ef 91       	pop	r30
     b8a:	bf 91       	pop	r27
     b8c:	af 91       	pop	r26
     b8e:	9f 91       	pop	r25
     b90:	8f 91       	pop	r24
     b92:	7f 91       	pop	r23
     b94:	6f 91       	pop	r22
     b96:	5f 91       	pop	r21
     b98:	4f 91       	pop	r20
     b9a:	3f 91       	pop	r19
     b9c:	2f 91       	pop	r18
     b9e:	0f 90       	pop	r0
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	0f 90       	pop	r0
     ba4:	1f 90       	pop	r1
     ba6:	18 95       	reti

00000ba8 <SET_SPEAKER_PARAMS>:
     ba8:	f8 94       	cli
     baa:	84 b1       	in	r24, 0x04	; 4
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	84 b9       	out	0x04, r24	; 4
     bb0:	e0 e8       	ldi	r30, 0x80	; 128
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 ec       	ldi	r24, 0xC0	; 192
     bb6:	80 83       	st	Z, r24
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     bbe:	80 e8       	ldi	r24, 0x80	; 128
     bc0:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
     bc4:	80 e4       	ldi	r24, 0x40	; 64
     bc6:	80 83       	st	Z, r24
     bc8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     bcc:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	98 2f       	mov	r25, r24
     bd4:	88 27       	eor	r24, r24
     bd6:	82 0f       	add	r24, r18
     bd8:	91 1d       	adc	r25, r1
     bda:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_freq>
     bde:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_freq+0x1>
     be2:	82 0f       	add	r24, r18
     be4:	93 1f       	adc	r25, r19
     be6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     bea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     bee:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <cycle_level>
     bf2:	82 e0       	ldi	r24, 0x02	; 2
     bf4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     bf8:	86 bb       	out	0x16, r24	; 22
     bfa:	78 94       	sei
     bfc:	08 95       	ret

00000bfe <Play_speaker>:
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	eb 01       	movw	r28, r22
     c0c:	6c 01       	movw	r12, r24
     c0e:	99 0f       	add	r25, r25
     c10:	ee 08       	sbc	r14, r14
     c12:	ff 08       	sbc	r15, r15
     c14:	60 e2       	ldi	r22, 0x20	; 32
     c16:	71 ea       	ldi	r23, 0xA1	; 161
     c18:	87 e0       	ldi	r24, 0x07	; 7
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a7 01       	movw	r20, r14
     c1e:	96 01       	movw	r18, r12
     c20:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__divmodsi4>
     c24:	22 5e       	subi	r18, 0xE2	; 226
     c26:	3f 4f       	sbci	r19, 0xFF	; 255
     c28:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <freq_high>
     c2c:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <freq_low>
     c30:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <cycle_count_L>
     c34:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <cycle_count_H>
     c38:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <cycle_level>
     c3c:	de 01       	movw	r26, r28
     c3e:	a7 01       	movw	r20, r14
     c40:	96 01       	movw	r18, r12
     c42:	0e 94 15 09 	call	0x122a	; 0x122a <__mulshisi3>
     c46:	28 ee       	ldi	r18, 0xE8	; 232
     c48:	33 e0       	ldi	r19, 0x03	; 3
     c4a:	40 e0       	ldi	r20, 0x00	; 0
     c4c:	50 e0       	ldi	r21, 0x00	; 0
     c4e:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__divmodsi4>
     c52:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <max_cycle_H>
     c56:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <max_cycle_L>
     c5a:	0e 94 d4 05 	call	0xba8	; 0xba8 <SET_SPEAKER_PARAMS>
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	ff 90       	pop	r15
     c64:	ef 90       	pop	r14
     c66:	df 90       	pop	r13
     c68:	cf 90       	pop	r12
     c6a:	08 95       	ret

00000c6c <score_sound>:
     c6c:	68 ee       	ldi	r22, 0xE8	; 232
     c6e:	73 e0       	ldi	r23, 0x03	; 3
     c70:	80 e9       	ldi	r24, 0x90	; 144
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Play_speaker>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c78:	2f ef       	ldi	r18, 0xFF	; 255
     c7a:	89 e6       	ldi	r24, 0x69	; 105
     c7c:	98 e1       	ldi	r25, 0x18	; 24
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	80 40       	sbci	r24, 0x00	; 0
     c82:	90 40       	sbci	r25, 0x00	; 0
     c84:	e1 f7       	brne	.-8      	; 0xc7e <score_sound+0x12>
     c86:	00 c0       	rjmp	.+0      	; 0xc88 <score_sound+0x1c>
     c88:	00 00       	nop
     c8a:	68 ee       	ldi	r22, 0xE8	; 232
     c8c:	73 e0       	ldi	r23, 0x03	; 3
     c8e:	88 eb       	ldi	r24, 0xB8	; 184
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Play_speaker>
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	89 e6       	ldi	r24, 0x69	; 105
     c9a:	98 e1       	ldi	r25, 0x18	; 24
     c9c:	21 50       	subi	r18, 0x01	; 1
     c9e:	80 40       	sbci	r24, 0x00	; 0
     ca0:	90 40       	sbci	r25, 0x00	; 0
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <score_sound+0x30>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <score_sound+0x3a>
     ca6:	00 00       	nop
     ca8:	68 ee       	ldi	r22, 0xE8	; 232
     caa:	73 e0       	ldi	r23, 0x03	; 3
     cac:	8c e7       	ldi	r24, 0x7C	; 124
     cae:	91 e0       	ldi	r25, 0x01	; 1
     cb0:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Play_speaker>
     cb4:	2f ef       	ldi	r18, 0xFF	; 255
     cb6:	89 e6       	ldi	r24, 0x69	; 105
     cb8:	98 e1       	ldi	r25, 0x18	; 24
     cba:	21 50       	subi	r18, 0x01	; 1
     cbc:	80 40       	sbci	r24, 0x00	; 0
     cbe:	90 40       	sbci	r25, 0x00	; 0
     cc0:	e1 f7       	brne	.-8      	; 0xcba <score_sound+0x4e>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <score_sound+0x58>
     cc4:	00 00       	nop
     cc6:	08 95       	ret

00000cc8 <bounce_sound>:
     cc8:	64 ef       	ldi	r22, 0xF4	; 244
     cca:	71 e0       	ldi	r23, 0x01	; 1
     ccc:	88 e7       	ldi	r24, 0x78	; 120
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Play_speaker>
     cd4:	08 95       	ret

00000cd6 <paddle_sound>:
     cd6:	64 ef       	ldi	r22, 0xF4	; 244
     cd8:	71 e0       	ldi	r23, 0x01	; 1
     cda:	80 ef       	ldi	r24, 0xF0	; 240
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	0e 94 ff 05 	call	0xbfe	; 0xbfe <Play_speaker>
     ce2:	08 95       	ret

00000ce4 <__subsf3>:
     ce4:	50 58       	subi	r21, 0x80	; 128

00000ce6 <__addsf3>:
     ce6:	bb 27       	eor	r27, r27
     ce8:	aa 27       	eor	r26, r26
     cea:	0e 94 8a 06 	call	0xd14	; 0xd14 <__addsf3x>
     cee:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_round>
     cf2:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
     cf6:	38 f0       	brcs	.+14     	; 0xd06 <__addsf3+0x20>
     cf8:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
     cfc:	20 f0       	brcs	.+8      	; 0xd06 <__addsf3+0x20>
     cfe:	39 f4       	brne	.+14     	; 0xd0e <__addsf3+0x28>
     d00:	9f 3f       	cpi	r25, 0xFF	; 255
     d02:	19 f4       	brne	.+6      	; 0xd0a <__addsf3+0x24>
     d04:	26 f4       	brtc	.+8      	; 0xd0e <__addsf3+0x28>
     d06:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_nan>
     d0a:	0e f4       	brtc	.+2      	; 0xd0e <__addsf3+0x28>
     d0c:	e0 95       	com	r30
     d0e:	e7 fb       	bst	r30, 7
     d10:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>

00000d14 <__addsf3x>:
     d14:	e9 2f       	mov	r30, r25
     d16:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_split3>
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__addsf3+0xc>
     d1c:	ba 17       	cp	r27, r26
     d1e:	62 07       	cpc	r22, r18
     d20:	73 07       	cpc	r23, r19
     d22:	84 07       	cpc	r24, r20
     d24:	95 07       	cpc	r25, r21
     d26:	20 f0       	brcs	.+8      	; 0xd30 <__addsf3x+0x1c>
     d28:	79 f4       	brne	.+30     	; 0xd48 <__addsf3x+0x34>
     d2a:	a6 f5       	brtc	.+104    	; 0xd94 <__addsf3x+0x80>
     d2c:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_zero>
     d30:	0e f4       	brtc	.+2      	; 0xd34 <__addsf3x+0x20>
     d32:	e0 95       	com	r30
     d34:	0b 2e       	mov	r0, r27
     d36:	ba 2f       	mov	r27, r26
     d38:	a0 2d       	mov	r26, r0
     d3a:	0b 01       	movw	r0, r22
     d3c:	b9 01       	movw	r22, r18
     d3e:	90 01       	movw	r18, r0
     d40:	0c 01       	movw	r0, r24
     d42:	ca 01       	movw	r24, r20
     d44:	a0 01       	movw	r20, r0
     d46:	11 24       	eor	r1, r1
     d48:	ff 27       	eor	r31, r31
     d4a:	59 1b       	sub	r21, r25
     d4c:	99 f0       	breq	.+38     	; 0xd74 <__addsf3x+0x60>
     d4e:	59 3f       	cpi	r21, 0xF9	; 249
     d50:	50 f4       	brcc	.+20     	; 0xd66 <__addsf3x+0x52>
     d52:	50 3e       	cpi	r21, 0xE0	; 224
     d54:	68 f1       	brcs	.+90     	; 0xdb0 <__addsf3x+0x9c>
     d56:	1a 16       	cp	r1, r26
     d58:	f0 40       	sbci	r31, 0x00	; 0
     d5a:	a2 2f       	mov	r26, r18
     d5c:	23 2f       	mov	r18, r19
     d5e:	34 2f       	mov	r19, r20
     d60:	44 27       	eor	r20, r20
     d62:	58 5f       	subi	r21, 0xF8	; 248
     d64:	f3 cf       	rjmp	.-26     	; 0xd4c <__addsf3x+0x38>
     d66:	46 95       	lsr	r20
     d68:	37 95       	ror	r19
     d6a:	27 95       	ror	r18
     d6c:	a7 95       	ror	r26
     d6e:	f0 40       	sbci	r31, 0x00	; 0
     d70:	53 95       	inc	r21
     d72:	c9 f7       	brne	.-14     	; 0xd66 <__addsf3x+0x52>
     d74:	7e f4       	brtc	.+30     	; 0xd94 <__addsf3x+0x80>
     d76:	1f 16       	cp	r1, r31
     d78:	ba 0b       	sbc	r27, r26
     d7a:	62 0b       	sbc	r22, r18
     d7c:	73 0b       	sbc	r23, r19
     d7e:	84 0b       	sbc	r24, r20
     d80:	ba f0       	brmi	.+46     	; 0xdb0 <__addsf3x+0x9c>
     d82:	91 50       	subi	r25, 0x01	; 1
     d84:	a1 f0       	breq	.+40     	; 0xdae <__addsf3x+0x9a>
     d86:	ff 0f       	add	r31, r31
     d88:	bb 1f       	adc	r27, r27
     d8a:	66 1f       	adc	r22, r22
     d8c:	77 1f       	adc	r23, r23
     d8e:	88 1f       	adc	r24, r24
     d90:	c2 f7       	brpl	.-16     	; 0xd82 <__addsf3x+0x6e>
     d92:	0e c0       	rjmp	.+28     	; 0xdb0 <__addsf3x+0x9c>
     d94:	ba 0f       	add	r27, r26
     d96:	62 1f       	adc	r22, r18
     d98:	73 1f       	adc	r23, r19
     d9a:	84 1f       	adc	r24, r20
     d9c:	48 f4       	brcc	.+18     	; 0xdb0 <__addsf3x+0x9c>
     d9e:	87 95       	ror	r24
     da0:	77 95       	ror	r23
     da2:	67 95       	ror	r22
     da4:	b7 95       	ror	r27
     da6:	f7 95       	ror	r31
     da8:	9e 3f       	cpi	r25, 0xFE	; 254
     daa:	08 f0       	brcs	.+2      	; 0xdae <__addsf3x+0x9a>
     dac:	b0 cf       	rjmp	.-160    	; 0xd0e <__addsf3+0x28>
     dae:	93 95       	inc	r25
     db0:	88 0f       	add	r24, r24
     db2:	08 f0       	brcs	.+2      	; 0xdb6 <__addsf3x+0xa2>
     db4:	99 27       	eor	r25, r25
     db6:	ee 0f       	add	r30, r30
     db8:	97 95       	ror	r25
     dba:	87 95       	ror	r24
     dbc:	08 95       	ret

00000dbe <__cmpsf2>:
     dbe:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_cmp>
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <__cmpsf2+0x8>
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	08 95       	ret

00000dc8 <__divsf3>:
     dc8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__divsf3x>
     dcc:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_round>
     dd0:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
     dd4:	58 f0       	brcs	.+22     	; 0xdec <__divsf3+0x24>
     dd6:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
     dda:	40 f0       	brcs	.+16     	; 0xdec <__divsf3+0x24>
     ddc:	29 f4       	brne	.+10     	; 0xde8 <__divsf3+0x20>
     dde:	5f 3f       	cpi	r21, 0xFF	; 255
     de0:	29 f0       	breq	.+10     	; 0xdec <__divsf3+0x24>
     de2:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
     de6:	51 11       	cpse	r21, r1
     de8:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>
     dec:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_nan>

00000df0 <__divsf3x>:
     df0:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_split3>
     df4:	68 f3       	brcs	.-38     	; 0xdd0 <__divsf3+0x8>

00000df6 <__divsf3_pse>:
     df6:	99 23       	and	r25, r25
     df8:	b1 f3       	breq	.-20     	; 0xde6 <__divsf3+0x1e>
     dfa:	55 23       	and	r21, r21
     dfc:	91 f3       	breq	.-28     	; 0xde2 <__divsf3+0x1a>
     dfe:	95 1b       	sub	r25, r21
     e00:	55 0b       	sbc	r21, r21
     e02:	bb 27       	eor	r27, r27
     e04:	aa 27       	eor	r26, r26
     e06:	62 17       	cp	r22, r18
     e08:	73 07       	cpc	r23, r19
     e0a:	84 07       	cpc	r24, r20
     e0c:	38 f0       	brcs	.+14     	; 0xe1c <__divsf3_pse+0x26>
     e0e:	9f 5f       	subi	r25, 0xFF	; 255
     e10:	5f 4f       	sbci	r21, 0xFF	; 255
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	44 1f       	adc	r20, r20
     e18:	aa 1f       	adc	r26, r26
     e1a:	a9 f3       	breq	.-22     	; 0xe06 <__divsf3_pse+0x10>
     e1c:	35 d0       	rcall	.+106    	; 0xe88 <__divsf3_pse+0x92>
     e1e:	0e 2e       	mov	r0, r30
     e20:	3a f0       	brmi	.+14     	; 0xe30 <__divsf3_pse+0x3a>
     e22:	e0 e8       	ldi	r30, 0x80	; 128
     e24:	32 d0       	rcall	.+100    	; 0xe8a <__divsf3_pse+0x94>
     e26:	91 50       	subi	r25, 0x01	; 1
     e28:	50 40       	sbci	r21, 0x00	; 0
     e2a:	e6 95       	lsr	r30
     e2c:	00 1c       	adc	r0, r0
     e2e:	ca f7       	brpl	.-14     	; 0xe22 <__divsf3_pse+0x2c>
     e30:	2b d0       	rcall	.+86     	; 0xe88 <__divsf3_pse+0x92>
     e32:	fe 2f       	mov	r31, r30
     e34:	29 d0       	rcall	.+82     	; 0xe88 <__divsf3_pse+0x92>
     e36:	66 0f       	add	r22, r22
     e38:	77 1f       	adc	r23, r23
     e3a:	88 1f       	adc	r24, r24
     e3c:	bb 1f       	adc	r27, r27
     e3e:	26 17       	cp	r18, r22
     e40:	37 07       	cpc	r19, r23
     e42:	48 07       	cpc	r20, r24
     e44:	ab 07       	cpc	r26, r27
     e46:	b0 e8       	ldi	r27, 0x80	; 128
     e48:	09 f0       	breq	.+2      	; 0xe4c <__divsf3_pse+0x56>
     e4a:	bb 0b       	sbc	r27, r27
     e4c:	80 2d       	mov	r24, r0
     e4e:	bf 01       	movw	r22, r30
     e50:	ff 27       	eor	r31, r31
     e52:	93 58       	subi	r25, 0x83	; 131
     e54:	5f 4f       	sbci	r21, 0xFF	; 255
     e56:	3a f0       	brmi	.+14     	; 0xe66 <__divsf3_pse+0x70>
     e58:	9e 3f       	cpi	r25, 0xFE	; 254
     e5a:	51 05       	cpc	r21, r1
     e5c:	78 f0       	brcs	.+30     	; 0xe7c <__divsf3_pse+0x86>
     e5e:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
     e62:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>
     e66:	5f 3f       	cpi	r21, 0xFF	; 255
     e68:	e4 f3       	brlt	.-8      	; 0xe62 <__divsf3_pse+0x6c>
     e6a:	98 3e       	cpi	r25, 0xE8	; 232
     e6c:	d4 f3       	brlt	.-12     	; 0xe62 <__divsf3_pse+0x6c>
     e6e:	86 95       	lsr	r24
     e70:	77 95       	ror	r23
     e72:	67 95       	ror	r22
     e74:	b7 95       	ror	r27
     e76:	f7 95       	ror	r31
     e78:	9f 5f       	subi	r25, 0xFF	; 255
     e7a:	c9 f7       	brne	.-14     	; 0xe6e <__divsf3_pse+0x78>
     e7c:	88 0f       	add	r24, r24
     e7e:	91 1d       	adc	r25, r1
     e80:	96 95       	lsr	r25
     e82:	87 95       	ror	r24
     e84:	97 f9       	bld	r25, 7
     e86:	08 95       	ret
     e88:	e1 e0       	ldi	r30, 0x01	; 1
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	bb 1f       	adc	r27, r27
     e92:	62 17       	cp	r22, r18
     e94:	73 07       	cpc	r23, r19
     e96:	84 07       	cpc	r24, r20
     e98:	ba 07       	cpc	r27, r26
     e9a:	20 f0       	brcs	.+8      	; 0xea4 <__divsf3_pse+0xae>
     e9c:	62 1b       	sub	r22, r18
     e9e:	73 0b       	sbc	r23, r19
     ea0:	84 0b       	sbc	r24, r20
     ea2:	ba 0b       	sbc	r27, r26
     ea4:	ee 1f       	adc	r30, r30
     ea6:	88 f7       	brcc	.-30     	; 0xe8a <__divsf3_pse+0x94>
     ea8:	e0 95       	com	r30
     eaa:	08 95       	ret

00000eac <__fixunssfsi>:
     eac:	0e 94 16 08 	call	0x102c	; 0x102c <__fp_splitA>
     eb0:	88 f0       	brcs	.+34     	; 0xed4 <__fixunssfsi+0x28>
     eb2:	9f 57       	subi	r25, 0x7F	; 127
     eb4:	98 f0       	brcs	.+38     	; 0xedc <__fixunssfsi+0x30>
     eb6:	b9 2f       	mov	r27, r25
     eb8:	99 27       	eor	r25, r25
     eba:	b7 51       	subi	r27, 0x17	; 23
     ebc:	b0 f0       	brcs	.+44     	; 0xeea <__fixunssfsi+0x3e>
     ebe:	e1 f0       	breq	.+56     	; 0xef8 <__fixunssfsi+0x4c>
     ec0:	66 0f       	add	r22, r22
     ec2:	77 1f       	adc	r23, r23
     ec4:	88 1f       	adc	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	1a f0       	brmi	.+6      	; 0xed0 <__fixunssfsi+0x24>
     eca:	ba 95       	dec	r27
     ecc:	c9 f7       	brne	.-14     	; 0xec0 <__fixunssfsi+0x14>
     ece:	14 c0       	rjmp	.+40     	; 0xef8 <__fixunssfsi+0x4c>
     ed0:	b1 30       	cpi	r27, 0x01	; 1
     ed2:	91 f0       	breq	.+36     	; 0xef8 <__fixunssfsi+0x4c>
     ed4:	0e 94 30 08 	call	0x1060	; 0x1060 <__fp_zero>
     ed8:	b1 e0       	ldi	r27, 0x01	; 1
     eda:	08 95       	ret
     edc:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__fp_zero>
     ee0:	67 2f       	mov	r22, r23
     ee2:	78 2f       	mov	r23, r24
     ee4:	88 27       	eor	r24, r24
     ee6:	b8 5f       	subi	r27, 0xF8	; 248
     ee8:	39 f0       	breq	.+14     	; 0xef8 <__fixunssfsi+0x4c>
     eea:	b9 3f       	cpi	r27, 0xF9	; 249
     eec:	cc f3       	brlt	.-14     	; 0xee0 <__fixunssfsi+0x34>
     eee:	86 95       	lsr	r24
     ef0:	77 95       	ror	r23
     ef2:	67 95       	ror	r22
     ef4:	b3 95       	inc	r27
     ef6:	d9 f7       	brne	.-10     	; 0xeee <__fixunssfsi+0x42>
     ef8:	3e f4       	brtc	.+14     	; 0xf08 <__fixunssfsi+0x5c>
     efa:	90 95       	com	r25
     efc:	80 95       	com	r24
     efe:	70 95       	com	r23
     f00:	61 95       	neg	r22
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	8f 4f       	sbci	r24, 0xFF	; 255
     f06:	9f 4f       	sbci	r25, 0xFF	; 255
     f08:	08 95       	ret

00000f0a <__floatunsisf>:
     f0a:	e8 94       	clt
     f0c:	09 c0       	rjmp	.+18     	; 0xf20 <__floatsisf+0x12>

00000f0e <__floatsisf>:
     f0e:	97 fb       	bst	r25, 7
     f10:	3e f4       	brtc	.+14     	; 0xf20 <__floatsisf+0x12>
     f12:	90 95       	com	r25
     f14:	80 95       	com	r24
     f16:	70 95       	com	r23
     f18:	61 95       	neg	r22
     f1a:	7f 4f       	sbci	r23, 0xFF	; 255
     f1c:	8f 4f       	sbci	r24, 0xFF	; 255
     f1e:	9f 4f       	sbci	r25, 0xFF	; 255
     f20:	99 23       	and	r25, r25
     f22:	a9 f0       	breq	.+42     	; 0xf4e <__floatsisf+0x40>
     f24:	f9 2f       	mov	r31, r25
     f26:	96 e9       	ldi	r25, 0x96	; 150
     f28:	bb 27       	eor	r27, r27
     f2a:	93 95       	inc	r25
     f2c:	f6 95       	lsr	r31
     f2e:	87 95       	ror	r24
     f30:	77 95       	ror	r23
     f32:	67 95       	ror	r22
     f34:	b7 95       	ror	r27
     f36:	f1 11       	cpse	r31, r1
     f38:	f8 cf       	rjmp	.-16     	; 0xf2a <__floatsisf+0x1c>
     f3a:	fa f4       	brpl	.+62     	; 0xf7a <__floatsisf+0x6c>
     f3c:	bb 0f       	add	r27, r27
     f3e:	11 f4       	brne	.+4      	; 0xf44 <__floatsisf+0x36>
     f40:	60 ff       	sbrs	r22, 0
     f42:	1b c0       	rjmp	.+54     	; 0xf7a <__floatsisf+0x6c>
     f44:	6f 5f       	subi	r22, 0xFF	; 255
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	8f 4f       	sbci	r24, 0xFF	; 255
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	16 c0       	rjmp	.+44     	; 0xf7a <__floatsisf+0x6c>
     f4e:	88 23       	and	r24, r24
     f50:	11 f0       	breq	.+4      	; 0xf56 <__floatsisf+0x48>
     f52:	96 e9       	ldi	r25, 0x96	; 150
     f54:	11 c0       	rjmp	.+34     	; 0xf78 <__floatsisf+0x6a>
     f56:	77 23       	and	r23, r23
     f58:	21 f0       	breq	.+8      	; 0xf62 <__floatsisf+0x54>
     f5a:	9e e8       	ldi	r25, 0x8E	; 142
     f5c:	87 2f       	mov	r24, r23
     f5e:	76 2f       	mov	r23, r22
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <__floatsisf+0x5e>
     f62:	66 23       	and	r22, r22
     f64:	71 f0       	breq	.+28     	; 0xf82 <__floatsisf+0x74>
     f66:	96 e8       	ldi	r25, 0x86	; 134
     f68:	86 2f       	mov	r24, r22
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	2a f0       	brmi	.+10     	; 0xf7a <__floatsisf+0x6c>
     f70:	9a 95       	dec	r25
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
     f76:	88 1f       	adc	r24, r24
     f78:	da f7       	brpl	.-10     	; 0xf70 <__floatsisf+0x62>
     f7a:	88 0f       	add	r24, r24
     f7c:	96 95       	lsr	r25
     f7e:	87 95       	ror	r24
     f80:	97 f9       	bld	r25, 7
     f82:	08 95       	ret

00000f84 <__fp_cmp>:
     f84:	99 0f       	add	r25, r25
     f86:	00 08       	sbc	r0, r0
     f88:	55 0f       	add	r21, r21
     f8a:	aa 0b       	sbc	r26, r26
     f8c:	e0 e8       	ldi	r30, 0x80	; 128
     f8e:	fe ef       	ldi	r31, 0xFE	; 254
     f90:	16 16       	cp	r1, r22
     f92:	17 06       	cpc	r1, r23
     f94:	e8 07       	cpc	r30, r24
     f96:	f9 07       	cpc	r31, r25
     f98:	c0 f0       	brcs	.+48     	; 0xfca <__fp_cmp+0x46>
     f9a:	12 16       	cp	r1, r18
     f9c:	13 06       	cpc	r1, r19
     f9e:	e4 07       	cpc	r30, r20
     fa0:	f5 07       	cpc	r31, r21
     fa2:	98 f0       	brcs	.+38     	; 0xfca <__fp_cmp+0x46>
     fa4:	62 1b       	sub	r22, r18
     fa6:	73 0b       	sbc	r23, r19
     fa8:	84 0b       	sbc	r24, r20
     faa:	95 0b       	sbc	r25, r21
     fac:	39 f4       	brne	.+14     	; 0xfbc <__fp_cmp+0x38>
     fae:	0a 26       	eor	r0, r26
     fb0:	61 f0       	breq	.+24     	; 0xfca <__fp_cmp+0x46>
     fb2:	23 2b       	or	r18, r19
     fb4:	24 2b       	or	r18, r20
     fb6:	25 2b       	or	r18, r21
     fb8:	21 f4       	brne	.+8      	; 0xfc2 <__fp_cmp+0x3e>
     fba:	08 95       	ret
     fbc:	0a 26       	eor	r0, r26
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <__fp_cmp+0x3e>
     fc0:	a1 40       	sbci	r26, 0x01	; 1
     fc2:	a6 95       	lsr	r26
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	81 1d       	adc	r24, r1
     fc8:	81 1d       	adc	r24, r1
     fca:	08 95       	ret

00000fcc <__fp_inf>:
     fcc:	97 f9       	bld	r25, 7
     fce:	9f 67       	ori	r25, 0x7F	; 127
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	08 95       	ret

00000fd8 <__fp_nan>:
     fd8:	9f ef       	ldi	r25, 0xFF	; 255
     fda:	80 ec       	ldi	r24, 0xC0	; 192
     fdc:	08 95       	ret

00000fde <__fp_pscA>:
     fde:	00 24       	eor	r0, r0
     fe0:	0a 94       	dec	r0
     fe2:	16 16       	cp	r1, r22
     fe4:	17 06       	cpc	r1, r23
     fe6:	18 06       	cpc	r1, r24
     fe8:	09 06       	cpc	r0, r25
     fea:	08 95       	ret

00000fec <__fp_pscB>:
     fec:	00 24       	eor	r0, r0
     fee:	0a 94       	dec	r0
     ff0:	12 16       	cp	r1, r18
     ff2:	13 06       	cpc	r1, r19
     ff4:	14 06       	cpc	r1, r20
     ff6:	05 06       	cpc	r0, r21
     ff8:	08 95       	ret

00000ffa <__fp_round>:
     ffa:	09 2e       	mov	r0, r25
     ffc:	03 94       	inc	r0
     ffe:	00 0c       	add	r0, r0
    1000:	11 f4       	brne	.+4      	; 0x1006 <__fp_round+0xc>
    1002:	88 23       	and	r24, r24
    1004:	52 f0       	brmi	.+20     	; 0x101a <__fp_round+0x20>
    1006:	bb 0f       	add	r27, r27
    1008:	40 f4       	brcc	.+16     	; 0x101a <__fp_round+0x20>
    100a:	bf 2b       	or	r27, r31
    100c:	11 f4       	brne	.+4      	; 0x1012 <__fp_round+0x18>
    100e:	60 ff       	sbrs	r22, 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <__fp_round+0x20>
    1012:	6f 5f       	subi	r22, 0xFF	; 255
    1014:	7f 4f       	sbci	r23, 0xFF	; 255
    1016:	8f 4f       	sbci	r24, 0xFF	; 255
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	08 95       	ret

0000101c <__fp_split3>:
    101c:	57 fd       	sbrc	r21, 7
    101e:	90 58       	subi	r25, 0x80	; 128
    1020:	44 0f       	add	r20, r20
    1022:	55 1f       	adc	r21, r21
    1024:	59 f0       	breq	.+22     	; 0x103c <__fp_splitA+0x10>
    1026:	5f 3f       	cpi	r21, 0xFF	; 255
    1028:	71 f0       	breq	.+28     	; 0x1046 <__fp_splitA+0x1a>
    102a:	47 95       	ror	r20

0000102c <__fp_splitA>:
    102c:	88 0f       	add	r24, r24
    102e:	97 fb       	bst	r25, 7
    1030:	99 1f       	adc	r25, r25
    1032:	61 f0       	breq	.+24     	; 0x104c <__fp_splitA+0x20>
    1034:	9f 3f       	cpi	r25, 0xFF	; 255
    1036:	79 f0       	breq	.+30     	; 0x1056 <__fp_splitA+0x2a>
    1038:	87 95       	ror	r24
    103a:	08 95       	ret
    103c:	12 16       	cp	r1, r18
    103e:	13 06       	cpc	r1, r19
    1040:	14 06       	cpc	r1, r20
    1042:	55 1f       	adc	r21, r21
    1044:	f2 cf       	rjmp	.-28     	; 0x102a <__fp_split3+0xe>
    1046:	46 95       	lsr	r20
    1048:	f1 df       	rcall	.-30     	; 0x102c <__fp_splitA>
    104a:	08 c0       	rjmp	.+16     	; 0x105c <__fp_splitA+0x30>
    104c:	16 16       	cp	r1, r22
    104e:	17 06       	cpc	r1, r23
    1050:	18 06       	cpc	r1, r24
    1052:	99 1f       	adc	r25, r25
    1054:	f1 cf       	rjmp	.-30     	; 0x1038 <__fp_splitA+0xc>
    1056:	86 95       	lsr	r24
    1058:	71 05       	cpc	r23, r1
    105a:	61 05       	cpc	r22, r1
    105c:	08 94       	sec
    105e:	08 95       	ret

00001060 <__fp_zero>:
    1060:	e8 94       	clt

00001062 <__fp_szero>:
    1062:	bb 27       	eor	r27, r27
    1064:	66 27       	eor	r22, r22
    1066:	77 27       	eor	r23, r23
    1068:	cb 01       	movw	r24, r22
    106a:	97 f9       	bld	r25, 7
    106c:	08 95       	ret

0000106e <__gesf2>:
    106e:	0e 94 c2 07 	call	0xf84	; 0xf84 <__fp_cmp>
    1072:	08 f4       	brcc	.+2      	; 0x1076 <__gesf2+0x8>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	08 95       	ret

00001078 <__mulsf3>:
    1078:	0e 94 4f 08 	call	0x109e	; 0x109e <__mulsf3x>
    107c:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__fp_round>
    1080:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
    1084:	38 f0       	brcs	.+14     	; 0x1094 <__mulsf3+0x1c>
    1086:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
    108a:	20 f0       	brcs	.+8      	; 0x1094 <__mulsf3+0x1c>
    108c:	95 23       	and	r25, r21
    108e:	11 f0       	breq	.+4      	; 0x1094 <__mulsf3+0x1c>
    1090:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
    1094:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_nan>
    1098:	11 24       	eor	r1, r1
    109a:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>

0000109e <__mulsf3x>:
    109e:	0e 94 0e 08 	call	0x101c	; 0x101c <__fp_split3>
    10a2:	70 f3       	brcs	.-36     	; 0x1080 <__mulsf3+0x8>

000010a4 <__mulsf3_pse>:
    10a4:	95 9f       	mul	r25, r21
    10a6:	c1 f3       	breq	.-16     	; 0x1098 <__mulsf3+0x20>
    10a8:	95 0f       	add	r25, r21
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	55 1f       	adc	r21, r21
    10ae:	62 9f       	mul	r22, r18
    10b0:	f0 01       	movw	r30, r0
    10b2:	72 9f       	mul	r23, r18
    10b4:	bb 27       	eor	r27, r27
    10b6:	f0 0d       	add	r31, r0
    10b8:	b1 1d       	adc	r27, r1
    10ba:	63 9f       	mul	r22, r19
    10bc:	aa 27       	eor	r26, r26
    10be:	f0 0d       	add	r31, r0
    10c0:	b1 1d       	adc	r27, r1
    10c2:	aa 1f       	adc	r26, r26
    10c4:	64 9f       	mul	r22, r20
    10c6:	66 27       	eor	r22, r22
    10c8:	b0 0d       	add	r27, r0
    10ca:	a1 1d       	adc	r26, r1
    10cc:	66 1f       	adc	r22, r22
    10ce:	82 9f       	mul	r24, r18
    10d0:	22 27       	eor	r18, r18
    10d2:	b0 0d       	add	r27, r0
    10d4:	a1 1d       	adc	r26, r1
    10d6:	62 1f       	adc	r22, r18
    10d8:	73 9f       	mul	r23, r19
    10da:	b0 0d       	add	r27, r0
    10dc:	a1 1d       	adc	r26, r1
    10de:	62 1f       	adc	r22, r18
    10e0:	83 9f       	mul	r24, r19
    10e2:	a0 0d       	add	r26, r0
    10e4:	61 1d       	adc	r22, r1
    10e6:	22 1f       	adc	r18, r18
    10e8:	74 9f       	mul	r23, r20
    10ea:	33 27       	eor	r19, r19
    10ec:	a0 0d       	add	r26, r0
    10ee:	61 1d       	adc	r22, r1
    10f0:	23 1f       	adc	r18, r19
    10f2:	84 9f       	mul	r24, r20
    10f4:	60 0d       	add	r22, r0
    10f6:	21 1d       	adc	r18, r1
    10f8:	82 2f       	mov	r24, r18
    10fa:	76 2f       	mov	r23, r22
    10fc:	6a 2f       	mov	r22, r26
    10fe:	11 24       	eor	r1, r1
    1100:	9f 57       	subi	r25, 0x7F	; 127
    1102:	50 40       	sbci	r21, 0x00	; 0
    1104:	9a f0       	brmi	.+38     	; 0x112c <__mulsf3_pse+0x88>
    1106:	f1 f0       	breq	.+60     	; 0x1144 <__mulsf3_pse+0xa0>
    1108:	88 23       	and	r24, r24
    110a:	4a f0       	brmi	.+18     	; 0x111e <__mulsf3_pse+0x7a>
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	bb 1f       	adc	r27, r27
    1112:	66 1f       	adc	r22, r22
    1114:	77 1f       	adc	r23, r23
    1116:	88 1f       	adc	r24, r24
    1118:	91 50       	subi	r25, 0x01	; 1
    111a:	50 40       	sbci	r21, 0x00	; 0
    111c:	a9 f7       	brne	.-22     	; 0x1108 <__mulsf3_pse+0x64>
    111e:	9e 3f       	cpi	r25, 0xFE	; 254
    1120:	51 05       	cpc	r21, r1
    1122:	80 f0       	brcs	.+32     	; 0x1144 <__mulsf3_pse+0xa0>
    1124:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
    1128:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>
    112c:	5f 3f       	cpi	r21, 0xFF	; 255
    112e:	e4 f3       	brlt	.-8      	; 0x1128 <__mulsf3_pse+0x84>
    1130:	98 3e       	cpi	r25, 0xE8	; 232
    1132:	d4 f3       	brlt	.-12     	; 0x1128 <__mulsf3_pse+0x84>
    1134:	86 95       	lsr	r24
    1136:	77 95       	ror	r23
    1138:	67 95       	ror	r22
    113a:	b7 95       	ror	r27
    113c:	f7 95       	ror	r31
    113e:	e7 95       	ror	r30
    1140:	9f 5f       	subi	r25, 0xFF	; 255
    1142:	c1 f7       	brne	.-16     	; 0x1134 <__mulsf3_pse+0x90>
    1144:	fe 2b       	or	r31, r30
    1146:	88 0f       	add	r24, r24
    1148:	91 1d       	adc	r25, r1
    114a:	96 95       	lsr	r25
    114c:	87 95       	ror	r24
    114e:	97 f9       	bld	r25, 7
    1150:	08 95       	ret

00001152 <round>:
    1152:	0e 94 16 08 	call	0x102c	; 0x102c <__fp_splitA>
    1156:	e8 f0       	brcs	.+58     	; 0x1192 <round+0x40>
    1158:	9e 37       	cpi	r25, 0x7E	; 126
    115a:	e8 f0       	brcs	.+58     	; 0x1196 <round+0x44>
    115c:	96 39       	cpi	r25, 0x96	; 150
    115e:	b8 f4       	brcc	.+46     	; 0x118e <round+0x3c>
    1160:	9e 38       	cpi	r25, 0x8E	; 142
    1162:	48 f4       	brcc	.+18     	; 0x1176 <round+0x24>
    1164:	67 2f       	mov	r22, r23
    1166:	78 2f       	mov	r23, r24
    1168:	88 27       	eor	r24, r24
    116a:	98 5f       	subi	r25, 0xF8	; 248
    116c:	f9 cf       	rjmp	.-14     	; 0x1160 <round+0xe>
    116e:	86 95       	lsr	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	93 95       	inc	r25
    1176:	95 39       	cpi	r25, 0x95	; 149
    1178:	d0 f3       	brcs	.-12     	; 0x116e <round+0x1c>
    117a:	b6 2f       	mov	r27, r22
    117c:	b1 70       	andi	r27, 0x01	; 1
    117e:	6b 0f       	add	r22, r27
    1180:	71 1d       	adc	r23, r1
    1182:	81 1d       	adc	r24, r1
    1184:	20 f4       	brcc	.+8      	; 0x118e <round+0x3c>
    1186:	87 95       	ror	r24
    1188:	77 95       	ror	r23
    118a:	67 95       	ror	r22
    118c:	93 95       	inc	r25
    118e:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_mintl>
    1192:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__fp_mpack>
    1196:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_szero>

0000119a <__fp_mintl>:
    119a:	88 23       	and	r24, r24
    119c:	71 f4       	brne	.+28     	; 0x11ba <__fp_mintl+0x20>
    119e:	77 23       	and	r23, r23
    11a0:	21 f0       	breq	.+8      	; 0x11aa <__fp_mintl+0x10>
    11a2:	98 50       	subi	r25, 0x08	; 8
    11a4:	87 2b       	or	r24, r23
    11a6:	76 2f       	mov	r23, r22
    11a8:	07 c0       	rjmp	.+14     	; 0x11b8 <__fp_mintl+0x1e>
    11aa:	66 23       	and	r22, r22
    11ac:	11 f4       	brne	.+4      	; 0x11b2 <__fp_mintl+0x18>
    11ae:	99 27       	eor	r25, r25
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <__fp_mintl+0x32>
    11b2:	90 51       	subi	r25, 0x10	; 16
    11b4:	86 2b       	or	r24, r22
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	2a f0       	brmi	.+10     	; 0x11c6 <__fp_mintl+0x2c>
    11bc:	9a 95       	dec	r25
    11be:	66 0f       	add	r22, r22
    11c0:	77 1f       	adc	r23, r23
    11c2:	88 1f       	adc	r24, r24
    11c4:	da f7       	brpl	.-10     	; 0x11bc <__fp_mintl+0x22>
    11c6:	88 0f       	add	r24, r24
    11c8:	96 95       	lsr	r25
    11ca:	87 95       	ror	r24
    11cc:	97 f9       	bld	r25, 7
    11ce:	08 95       	ret

000011d0 <__fp_mpack>:
    11d0:	9f 3f       	cpi	r25, 0xFF	; 255
    11d2:	31 f0       	breq	.+12     	; 0x11e0 <__fp_mpack_finite+0xc>

000011d4 <__fp_mpack_finite>:
    11d4:	91 50       	subi	r25, 0x01	; 1
    11d6:	20 f4       	brcc	.+8      	; 0x11e0 <__fp_mpack_finite+0xc>
    11d8:	87 95       	ror	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b7 95       	ror	r27
    11e0:	88 0f       	add	r24, r24
    11e2:	91 1d       	adc	r25, r1
    11e4:	96 95       	lsr	r25
    11e6:	87 95       	ror	r24
    11e8:	97 f9       	bld	r25, 7
    11ea:	08 95       	ret

000011ec <__divmodsi4>:
    11ec:	05 2e       	mov	r0, r21
    11ee:	97 fb       	bst	r25, 7
    11f0:	1e f4       	brtc	.+6      	; 0x11f8 <__divmodsi4+0xc>
    11f2:	00 94       	com	r0
    11f4:	0e 94 0d 09 	call	0x121a	; 0x121a <__negsi2>
    11f8:	57 fd       	sbrc	r21, 7
    11fa:	07 d0       	rcall	.+14     	; 0x120a <__divmodsi4_neg2>
    11fc:	0e 94 1d 09 	call	0x123a	; 0x123a <__udivmodsi4>
    1200:	07 fc       	sbrc	r0, 7
    1202:	03 d0       	rcall	.+6      	; 0x120a <__divmodsi4_neg2>
    1204:	4e f4       	brtc	.+18     	; 0x1218 <__divmodsi4_exit>
    1206:	0c 94 0d 09 	jmp	0x121a	; 0x121a <__negsi2>

0000120a <__divmodsi4_neg2>:
    120a:	50 95       	com	r21
    120c:	40 95       	com	r20
    120e:	30 95       	com	r19
    1210:	21 95       	neg	r18
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	4f 4f       	sbci	r20, 0xFF	; 255
    1216:	5f 4f       	sbci	r21, 0xFF	; 255

00001218 <__divmodsi4_exit>:
    1218:	08 95       	ret

0000121a <__negsi2>:
    121a:	90 95       	com	r25
    121c:	80 95       	com	r24
    121e:	70 95       	com	r23
    1220:	61 95       	neg	r22
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	8f 4f       	sbci	r24, 0xFF	; 255
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	08 95       	ret

0000122a <__mulshisi3>:
    122a:	b7 ff       	sbrs	r27, 7
    122c:	0c 94 3f 09 	jmp	0x127e	; 0x127e <__muluhisi3>

00001230 <__mulohisi3>:
    1230:	0e 94 3f 09 	call	0x127e	; 0x127e <__muluhisi3>
    1234:	82 1b       	sub	r24, r18
    1236:	93 0b       	sbc	r25, r19
    1238:	08 95       	ret

0000123a <__udivmodsi4>:
    123a:	a1 e2       	ldi	r26, 0x21	; 33
    123c:	1a 2e       	mov	r1, r26
    123e:	aa 1b       	sub	r26, r26
    1240:	bb 1b       	sub	r27, r27
    1242:	fd 01       	movw	r30, r26
    1244:	0d c0       	rjmp	.+26     	; 0x1260 <__udivmodsi4_ep>

00001246 <__udivmodsi4_loop>:
    1246:	aa 1f       	adc	r26, r26
    1248:	bb 1f       	adc	r27, r27
    124a:	ee 1f       	adc	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	a2 17       	cp	r26, r18
    1250:	b3 07       	cpc	r27, r19
    1252:	e4 07       	cpc	r30, r20
    1254:	f5 07       	cpc	r31, r21
    1256:	20 f0       	brcs	.+8      	; 0x1260 <__udivmodsi4_ep>
    1258:	a2 1b       	sub	r26, r18
    125a:	b3 0b       	sbc	r27, r19
    125c:	e4 0b       	sbc	r30, r20
    125e:	f5 0b       	sbc	r31, r21

00001260 <__udivmodsi4_ep>:
    1260:	66 1f       	adc	r22, r22
    1262:	77 1f       	adc	r23, r23
    1264:	88 1f       	adc	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	1a 94       	dec	r1
    126a:	69 f7       	brne	.-38     	; 0x1246 <__udivmodsi4_loop>
    126c:	60 95       	com	r22
    126e:	70 95       	com	r23
    1270:	80 95       	com	r24
    1272:	90 95       	com	r25
    1274:	9b 01       	movw	r18, r22
    1276:	ac 01       	movw	r20, r24
    1278:	bd 01       	movw	r22, r26
    127a:	cf 01       	movw	r24, r30
    127c:	08 95       	ret

0000127e <__muluhisi3>:
    127e:	0e 94 4a 09 	call	0x1294	; 0x1294 <__umulhisi3>
    1282:	a5 9f       	mul	r26, r21
    1284:	90 0d       	add	r25, r0
    1286:	b4 9f       	mul	r27, r20
    1288:	90 0d       	add	r25, r0
    128a:	a4 9f       	mul	r26, r20
    128c:	80 0d       	add	r24, r0
    128e:	91 1d       	adc	r25, r1
    1290:	11 24       	eor	r1, r1
    1292:	08 95       	ret

00001294 <__umulhisi3>:
    1294:	a2 9f       	mul	r26, r18
    1296:	b0 01       	movw	r22, r0
    1298:	b3 9f       	mul	r27, r19
    129a:	c0 01       	movw	r24, r0
    129c:	a3 9f       	mul	r26, r19
    129e:	70 0d       	add	r23, r0
    12a0:	81 1d       	adc	r24, r1
    12a2:	11 24       	eor	r1, r1
    12a4:	91 1d       	adc	r25, r1
    12a6:	b2 9f       	mul	r27, r18
    12a8:	70 0d       	add	r23, r0
    12aa:	81 1d       	adc	r24, r1
    12ac:	11 24       	eor	r1, r1
    12ae:	91 1d       	adc	r25, r1
    12b0:	08 95       	ret

000012b2 <_exit>:
    12b2:	f8 94       	cli

000012b4 <__stop_program>:
    12b4:	ff cf       	rjmp	.-2      	; 0x12b4 <__stop_program>
