
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000a66  00000afa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080011e  0080011e  00000b18  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000b88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020d9  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe7  00000000  00000000  00002e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001021  00000000  00000000  00003de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00004e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007cc  00000000  00000000  00005194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ff8  00000000  00000000  00005960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e6       	ldi	r30, 0x66	; 102
  c8:	fa e0       	ldi	r31, 0x0A	; 10
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 31       	cpi	r26, 0x1E	; 30
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e1       	ldi	r26, 0x1E	; 30
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a1 32       	cpi	r26, 0x21	; 33
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c3 03 	call	0x786	; 0x786 <main>
  ea:	0c 94 31 05 	jmp	0xa62	; 0xa62 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TIM1_COMPA>:
  f2:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <__data_end>
  f6:	30 fd       	sbrc	r19, 0
  f8:	06 c0       	rjmp	.+12     	; 0x106 <ONE>
  fa:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <freq_low>
  fe:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <freq_high>
 102:	31 e0       	ldi	r19, 0x01	; 1
 104:	20 c0       	rjmp	.+64     	; 0x146 <BEGIN>

00000106 <ONE>:
 106:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <freq_low>
 10a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <freq_high>
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <max_cycle_L>
 114:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <max_cycle_H>
 118:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <cycle_count_L>
 11c:	70 91 1f 01 	lds	r23, 0x011F	; 0x80011f <cycle_count_H>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	68 0f       	add	r22, r24
 124:	73 1f       	adc	r23, r19
 126:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <cycle_count_L>
 12a:	70 93 1f 01 	sts	0x011F, r23	; 0x80011f <cycle_count_H>
 12e:	46 17       	cp	r20, r22
 130:	57 07       	cpc	r21, r23
 132:	4c f4       	brge	.+18     	; 0x146 <BEGIN>
 134:	f8 94       	cli
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 13c:	a6 bf       	out	0x36, r26	; 54
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 144:	78 94       	sei

00000146 <BEGIN>:
 146:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 14a:	9a 0f       	add	r25, r26
 14c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 150:	2a 1f       	adc	r18, r26
 152:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 156:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 15a:	30 fd       	sbrc	r19, 0
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Return>

0000015e <Return>:
 15e:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <__data_end>
 162:	08 95       	ret

00000164 <ResetBoard>:
#include <util/delay.h>
#include "Physics.h"
#include "Sound.h"

void ResetBoard(struct Player *player)
{
 164:	fc 01       	movw	r30, r24
	player[0].downFlag = false;
 166:	11 82       	std	Z+1, r1	; 0x01
	player[0].upFlag = false;
 168:	10 82       	st	Z, r1
	player[1].downFlag = false;
 16a:	16 82       	std	Z+6, r1	; 0x06
	player[1].upFlag = false;
 16c:	15 82       	std	Z+5, r1	; 0x05
	
		
	player[0].xPos = 0;
 16e:	12 82       	std	Z+2, r1	; 0x02
	player[0].yPos = 2;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	83 83       	std	Z+3, r24	; 0x03
	player[1].xPos = 17;
 174:	91 e1       	ldi	r25, 0x11	; 17
 176:	97 83       	std	Z+7, r25	; 0x07
	player[1].yPos = 2;
 178:	80 87       	std	Z+8, r24	; 0x08
	
	player[0].score = 0;
 17a:	14 82       	std	Z+4, r1	; 0x04
	player[1].score = 0;
 17c:	11 86       	std	Z+9, r1	; 0x09
 17e:	08 95       	ret

00000180 <printscore>:
	SendData(0x7C);

	//SetCursorPosition(ball[0].xPos,ball[0].yPos);
	//SendData(0x01);
}
void printscore(unsigned char score, unsigned char xpos){
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	c8 2f       	mov	r28, r24
 186:	d6 2f       	mov	r29, r22
	SetCursorPosition(xpos+2,1);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	8d 0f       	add	r24, r29
 18e:	0e 94 ae 03 	call	0x75c	; 0x75c <SetCursorPosition>
	unsigned char out = (score%10)+48;
 192:	9d ec       	ldi	r25, 0xCD	; 205
 194:	c9 9f       	mul	r28, r25
 196:	91 2d       	mov	r25, r1
 198:	11 24       	eor	r1, r1
 19a:	96 95       	lsr	r25
 19c:	96 95       	lsr	r25
 19e:	96 95       	lsr	r25
 1a0:	99 0f       	add	r25, r25
 1a2:	89 2f       	mov	r24, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	88 0f       	add	r24, r24
 1a8:	98 0f       	add	r25, r24
 1aa:	8c 2f       	mov	r24, r28
 1ac:	89 1b       	sub	r24, r25
	SendData(out);
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>
	if(score<10){
 1b4:	ca 30       	cpi	r28, 0x0A	; 10
 1b6:	50 f1       	brcs	.+84     	; 0x20c <printscore+0x8c>
		return;
	}
	SetCursorPosition(xpos+1,1);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	8d 0f       	add	r24, r29
 1be:	0e 94 ae 03 	call	0x75c	; 0x75c <SetCursorPosition>
	out = (score%100)/10+48;
 1c2:	89 e2       	ldi	r24, 0x29	; 41
 1c4:	c8 9f       	mul	r28, r24
 1c6:	81 2d       	mov	r24, r1
 1c8:	11 24       	eor	r1, r1
 1ca:	82 95       	swap	r24
 1cc:	8f 70       	andi	r24, 0x0F	; 15
 1ce:	9c 2f       	mov	r25, r28
 1d0:	24 e6       	ldi	r18, 0x64	; 100
 1d2:	82 9f       	mul	r24, r18
 1d4:	90 19       	sub	r25, r0
 1d6:	11 24       	eor	r1, r1
 1d8:	89 2f       	mov	r24, r25
 1da:	9d ec       	ldi	r25, 0xCD	; 205
 1dc:	89 9f       	mul	r24, r25
 1de:	81 2d       	mov	r24, r1
 1e0:	11 24       	eor	r1, r1
 1e2:	86 95       	lsr	r24
 1e4:	86 95       	lsr	r24
 1e6:	86 95       	lsr	r24
	SendData(out);
 1e8:	80 5d       	subi	r24, 0xD0	; 208
 1ea:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>
	if(score<100){
 1ee:	c4 36       	cpi	r28, 0x64	; 100
 1f0:	68 f0       	brcs	.+26     	; 0x20c <printscore+0x8c>
		return;
	}
	SetCursorPosition(xpos,1);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	8d 2f       	mov	r24, r29
 1f6:	0e 94 ae 03 	call	0x75c	; 0x75c <SetCursorPosition>
	out = score/100+48;
 1fa:	89 e2       	ldi	r24, 0x29	; 41
 1fc:	c8 9f       	mul	r28, r24
 1fe:	81 2d       	mov	r24, r1
 200:	11 24       	eor	r1, r1
 202:	82 95       	swap	r24
 204:	8f 70       	andi	r24, 0x0F	; 15
	SendData(out);
 206:	80 5d       	subi	r24, 0xD0	; 208
 208:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <UpdateBoard>:
	player[0].score = 0;
	player[1].score = 0;
}

void UpdateBoard(struct Player *player,struct Ball *ball)
{
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	ec 01       	movw	r28, r24
 21c:	8b 01       	movw	r16, r22
	SendCommand(0x01);
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f ed       	ldi	r24, 0xDF	; 223
 226:	9e e2       	ldi	r25, 0x2E	; 46
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <UpdateBoard+0x16>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <UpdateBoard+0x1c>
 22e:	00 00       	nop
	_delay_ms(3);
	SendCommand(0x02);
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
	printscore(player[0].score,3);
 236:	8c 81       	ldd	r24, Y+4	; 0x04
 238:	63 e0       	ldi	r22, 0x03	; 3
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 c0 00 	call	0x180	; 0x180 <printscore>
	printscore(player[1].score,16);
 242:	89 85       	ldd	r24, Y+9	; 0x09
 244:	60 e1       	ldi	r22, 0x10	; 16
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 c0 00 	call	0x180	; 0x180 <printscore>
	SetCursorPosition(ball[0].xPos,ball[0].yPos);
 24e:	f8 01       	movw	r30, r16
 250:	61 81       	ldd	r22, Z+1	; 0x01
 252:	80 81       	ld	r24, Z
 254:	0e 94 ae 03 	call	0x75c	; 0x75c <SetCursorPosition>
	SendData('o');
 258:	8f e6       	ldi	r24, 0x6F	; 111
 25a:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>
	SetCursorPosition(player[0].xPos+2, player[0].yPos);
 25e:	8a 81       	ldd	r24, Y+2	; 0x02
 260:	6b 81       	ldd	r22, Y+3	; 0x03
 262:	8e 5f       	subi	r24, 0xFE	; 254
 264:	0e 94 ae 03 	call	0x75c	; 0x75c <SetCursorPosition>
	SendData(0x7C);
 268:	8c e7       	ldi	r24, 0x7C	; 124
 26a:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>
	SetCursorPosition((player[0].xPos)+2, (player[0].yPos + 1));
 26e:	6b 81       	ldd	r22, Y+3	; 0x03
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	6f 5f       	subi	r22, 0xFF	; 255
 274:	8e 5f       	subi	r24, 0xFE	; 254
 276:	0e 94 ae 03 	call	0x75c	; 0x75c <SetCursorPosition>
	SendData(0x7C);
 27a:	8c e7       	ldi	r24, 0x7C	; 124
 27c:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>
	SetCursorPosition(player[1].xPos+2, player[1].yPos);
 280:	8f 81       	ldd	r24, Y+7	; 0x07
 282:	68 85       	ldd	r22, Y+8	; 0x08
 284:	8e 5f       	subi	r24, 0xFE	; 254
 286:	0e 94 ae 03 	call	0x75c	; 0x75c <SetCursorPosition>
	SendData(0x7C);
 28a:	8c e7       	ldi	r24, 0x7C	; 124
 28c:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>
	SetCursorPosition(player[1].xPos+2, (player[1].yPos + 1));
 290:	68 85       	ldd	r22, Y+8	; 0x08
 292:	8f 81       	ldd	r24, Y+7	; 0x07
 294:	6f 5f       	subi	r22, 0xFF	; 255
 296:	8e 5f       	subi	r24, 0xFE	; 254
 298:	0e 94 ae 03 	call	0x75c	; 0x75c <SetCursorPosition>
	SendData(0x7C);
 29c:	8c e7       	ldi	r24, 0x7C	; 124
 29e:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>

	//SetCursorPosition(ball[0].xPos,ball[0].yPos);
	//SendData(0x01);
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	08 95       	ret

000002ac <DetectUpdateScore>:
	}
	SetCursorPosition(xpos,1);
	out = score/100+48;
	SendData(out);
}
DetectUpdateScore(struct Player *player,struct Ball *ball){
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	8c 01       	movw	r16, r24
 2b6:	eb 01       	movw	r28, r22
	if(ball[0].xPos == 1){
 2b8:	88 81       	ld	r24, Y
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	91 f4       	brne	.+36     	; 0x2e2 <DetectUpdateScore+0x36>
		player[1].score+=1;
 2be:	f8 01       	movw	r30, r16
 2c0:	81 85       	ldd	r24, Z+9	; 0x09
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	81 87       	std	Z+9, r24	; 0x09
		ball[0].xPos +=10; 
 2c6:	88 81       	ld	r24, Y
 2c8:	86 5f       	subi	r24, 0xF6	; 246
 2ca:	88 83       	st	Y, r24
		score_sound();
 2cc:	0e 94 92 04 	call	0x924	; 0x924 <score_sound>
 2d0:	ff ef       	ldi	r31, 0xFF	; 255
 2d2:	2b e7       	ldi	r18, 0x7B	; 123
 2d4:	82 e9       	ldi	r24, 0x92	; 146
 2d6:	f1 50       	subi	r31, 0x01	; 1
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <DetectUpdateScore+0x2a>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <DetectUpdateScore+0x34>
 2e0:	00 00       	nop
		_delay_ms(3000);
		
		
	}
	if(ball[0].xPos == 20){
 2e2:	88 81       	ld	r24, Y
 2e4:	84 31       	cpi	r24, 0x14	; 20
 2e6:	91 f4       	brne	.+36     	; 0x30c <DetectUpdateScore+0x60>
		player[0].score+=1;
 2e8:	f8 01       	movw	r30, r16
 2ea:	84 81       	ldd	r24, Z+4	; 0x04
 2ec:	8f 5f       	subi	r24, 0xFF	; 255
 2ee:	84 83       	std	Z+4, r24	; 0x04
		ball[0].xPos -=10;
 2f0:	88 81       	ld	r24, Y
 2f2:	8a 50       	subi	r24, 0x0A	; 10
 2f4:	88 83       	st	Y, r24
		score_sound();
 2f6:	0e 94 92 04 	call	0x924	; 0x924 <score_sound>
 2fa:	ff ef       	ldi	r31, 0xFF	; 255
 2fc:	21 e1       	ldi	r18, 0x11	; 17
 2fe:	8a e7       	ldi	r24, 0x7A	; 122
 300:	f1 50       	subi	r31, 0x01	; 1
 302:	20 40       	sbci	r18, 0x00	; 0
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <DetectUpdateScore+0x54>
 308:	00 c0       	rjmp	.+0      	; 0x30a <DetectUpdateScore+0x5e>
 30a:	00 00       	nop
		_delay_ms(2500);
		
	}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	1f 91       	pop	r17
 312:	0f 91       	pop	r16
 314:	08 95       	ret

00000316 <init_ball>:
#include "Sound.h"
#define xmax 20
#define ymax 4
#define xmin 1
#define ymin 1
void init_ball(struct Ball *ball, unsigned char xpos, unsigned char ypos, signed char xvel,signed char yvel){
 316:	0f 93       	push	r16
 318:	fc 01       	movw	r30, r24
	ball[0].xPos = xpos;
 31a:	60 83       	st	Z, r22
	ball[0].yPos = ypos;
 31c:	41 83       	std	Z+1, r20	; 0x01
	ball[0].xVel = xvel;
 31e:	22 83       	std	Z+2, r18	; 0x02
	ball[0].yVel = yvel;
 320:	03 83       	std	Z+3, r16	; 0x03
}
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <UpdateBallVel>:
void UpdateBallPosVel(struct Ball *ball){
	UpdateBallVel(ball);
	ball[0].xPos +=ball[0].xVel;
	ball[0].yPos +=ball[0].yVel;
}
void UpdateBallVel(struct Ball *ball){
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	ec 01       	movw	r28, r24
	if (ball[0].xPos == xmin & ball[0].xVel<0){
 32c:	28 81       	ld	r18, Y
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	31 e0       	ldi	r19, 0x01	; 1
 332:	21 30       	cpi	r18, 0x01	; 1
 334:	09 f0       	breq	.+2      	; 0x338 <UpdateBallVel+0x12>
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	89 2f       	mov	r24, r25
 33a:	88 1f       	adc	r24, r24
 33c:	88 27       	eor	r24, r24
 33e:	88 1f       	adc	r24, r24
 340:	83 23       	and	r24, r19
 342:	11 f0       	breq	.+4      	; 0x348 <UpdateBallVel+0x22>
		ball[0].xVel = -1*ball[0].xVel;
 344:	91 95       	neg	r25
 346:	9a 83       	std	Y+2, r25	; 0x02
		//Play_speaker(440,500);
	}
	if (ball[0].xPos == xmax & ball[0].xVel>0){
 348:	9a 81       	ldd	r25, Y+2	; 0x02
 34a:	31 e0       	ldi	r19, 0x01	; 1
 34c:	24 31       	cpi	r18, 0x14	; 20
 34e:	09 f0       	breq	.+2      	; 0x352 <UpdateBallVel+0x2c>
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	19 16       	cp	r1, r25
 356:	0c f0       	brlt	.+2      	; 0x35a <UpdateBallVel+0x34>
 358:	80 e0       	ldi	r24, 0x00	; 0
 35a:	83 23       	and	r24, r19
 35c:	11 f0       	breq	.+4      	; 0x362 <UpdateBallVel+0x3c>
		ball[0].xVel = -1*ball[0].xVel;
 35e:	91 95       	neg	r25
 360:	9a 83       	std	Y+2, r25	; 0x02
		//Play_speaker(440,500);
	}
	if (ball[0].yPos == ymin & ball[0].yVel<0){
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	9b 81       	ldd	r25, Y+3	; 0x03
 366:	21 e0       	ldi	r18, 0x01	; 1
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	09 f0       	breq	.+2      	; 0x36e <UpdateBallVel+0x48>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	89 2f       	mov	r24, r25
 370:	88 1f       	adc	r24, r24
 372:	88 27       	eor	r24, r24
 374:	88 1f       	adc	r24, r24
 376:	82 23       	and	r24, r18
 378:	21 f0       	breq	.+8      	; 0x382 <UpdateBallVel+0x5c>
		ball[0].yVel = -1*ball[0].yVel;
 37a:	91 95       	neg	r25
 37c:	9b 83       	std	Y+3, r25	; 0x03
		bounce_sound();
 37e:	0e 94 c0 04 	call	0x980	; 0x980 <bounce_sound>
	}
	if (ball[0].yPos == ymax & ball[0].yVel>0){
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9b 81       	ldd	r25, Y+3	; 0x03
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	84 30       	cpi	r24, 0x04	; 4
 38a:	09 f0       	breq	.+2      	; 0x38e <UpdateBallVel+0x68>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	19 16       	cp	r1, r25
 392:	0c f0       	brlt	.+2      	; 0x396 <UpdateBallVel+0x70>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	82 23       	and	r24, r18
 398:	21 f0       	breq	.+8      	; 0x3a2 <UpdateBallVel+0x7c>
		ball[0].yVel = -1*ball[0].yVel;
 39a:	91 95       	neg	r25
 39c:	9b 83       	std	Y+3, r25	; 0x03
		bounce_sound();
 39e:	0e 94 c0 04 	call	0x980	; 0x980 <bounce_sound>
	}
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <UpdateBallPosVel>:
	ball[0].xPos = xpos;
	ball[0].yPos = ypos;
	ball[0].xVel = xvel;
	ball[0].yVel = yvel;
}
void UpdateBallPosVel(struct Ball *ball){
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	ec 01       	movw	r28, r24
	UpdateBallVel(ball);
 3ae:	0e 94 93 01 	call	0x326	; 0x326 <UpdateBallVel>
	ball[0].xPos +=ball[0].xVel;
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	98 81       	ld	r25, Y
 3b6:	89 0f       	add	r24, r25
 3b8:	88 83       	st	Y, r24
	ball[0].yPos +=ball[0].yVel;
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	99 81       	ldd	r25, Y+1	; 0x01
 3be:	89 0f       	add	r24, r25
 3c0:	89 83       	std	Y+1, r24	; 0x01
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <reflect_paddles>:
	if (ball[0].yPos == ymax & ball[0].yVel>0){
		ball[0].yVel = -1*ball[0].yVel;
		bounce_sound();
	}
}
void reflect_paddles(unsigned char p1_x,unsigned char p1_y,unsigned char p2_x, unsigned char p2_y,struct Ball *ball){
 3c8:	ef 92       	push	r14
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	f4 2e       	mov	r15, r20
 3d6:	e2 2e       	mov	r14, r18
 3d8:	e8 01       	movw	r28, r16
	if((ball[0].xPos==p1_x+3)&(ball[0].xVel<0) &((ball[0].yPos == p1_y )|(ball[0].yPos == p1_y+1 )))
 3da:	28 81       	ld	r18, Y
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	03 96       	adiw	r24, 0x03	; 3
 3e0:	7a 81       	ldd	r23, Y+2	; 0x02
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	28 17       	cp	r18, r24
 3e8:	39 07       	cpc	r19, r25
 3ea:	09 f0       	breq	.+2      	; 0x3ee <reflect_paddles+0x26>
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	87 2f       	mov	r24, r23
 3f0:	88 1f       	adc	r24, r24
 3f2:	88 27       	eor	r24, r24
 3f4:	88 1f       	adc	r24, r24
 3f6:	34 2f       	mov	r19, r20
 3f8:	38 23       	and	r19, r24
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	46 2f       	mov	r20, r22
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	4f 5f       	subi	r20, 0xFF	; 255
 402:	5f 4f       	sbci	r21, 0xFF	; 255
 404:	e1 e0       	ldi	r30, 0x01	; 1
 406:	86 13       	cpse	r24, r22
 408:	e0 e0       	ldi	r30, 0x00	; 0
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	21 e0       	ldi	r18, 0x01	; 1
 40e:	84 17       	cp	r24, r20
 410:	95 07       	cpc	r25, r21
 412:	09 f0       	breq	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	2e 2b       	or	r18, r30
 418:	33 23       	and	r19, r19
 41a:	31 f0       	breq	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 41c:	22 23       	and	r18, r18
 41e:	21 f0       	breq	.+8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{
		ball[0].xVel = -1*ball[0].xVel;
 420:	71 95       	neg	r23
 422:	7a 83       	std	Y+2, r23	; 0x02
		paddle_sound();
 424:	0e 94 c7 04 	call	0x98e	; 0x98e <paddle_sound>
	}
	if((ball[0].xPos==p2_x+1)&(ball[0].xVel>0) &((ball[0].yPos == p2_y )|(ball[0].yPos == p2_y+1 )))
 428:	28 81       	ld	r18, Y
 42a:	4f 2d       	mov	r20, r15
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	4f 5f       	subi	r20, 0xFF	; 255
 430:	5f 4f       	sbci	r21, 0xFF	; 255
 432:	6a 81       	ldd	r22, Y+2	; 0x02
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	24 17       	cp	r18, r20
 43a:	35 07       	cpc	r19, r21
 43c:	09 f0       	breq	.+2      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	16 16       	cp	r1, r22
 444:	0c f0       	brlt	.+2      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	39 2f       	mov	r19, r25
 44a:	38 23       	and	r19, r24
 44c:	89 81       	ldd	r24, Y+1	; 0x01
 44e:	4e 2d       	mov	r20, r14
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	4f 5f       	subi	r20, 0xFF	; 255
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	71 e0       	ldi	r23, 0x01	; 1
 458:	8e 11       	cpse	r24, r14
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	21 e0       	ldi	r18, 0x01	; 1
 460:	84 17       	cp	r24, r20
 462:	95 07       	cpc	r25, r21
 464:	09 f0       	breq	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	27 2b       	or	r18, r23
 46a:	33 23       	and	r19, r19
 46c:	31 f0       	breq	.+12     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 46e:	22 23       	and	r18, r18
 470:	21 f0       	breq	.+8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
	{
		ball[0].xVel = -1*ball[0].xVel;
 472:	61 95       	neg	r22
 474:	6a 83       	std	Y+2, r22	; 0x02
		paddle_sound();
 476:	0e 94 c7 04 	call	0x98e	; 0x98e <paddle_sound>
	}
	
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	ff 90       	pop	r15
 484:	ef 90       	pop	r14
 486:	08 95       	ret

00000488 <InitInputs>:
#include <avr/io.h>

void InitInputs(struct Player *player)
{	
	//Initializing data direction register for button ports to be Inputs
	DDRC |= (0 << DDRC3);
 488:	87 b1       	in	r24, 0x07	; 7
 48a:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC2);
 48c:	87 b1       	in	r24, 0x07	; 7
 48e:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC1);
 490:	87 b1       	in	r24, 0x07	; 7
 492:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC0);
 494:	87 b1       	in	r24, 0x07	; 7
 496:	87 b9       	out	0x07, r24	; 7
	
	//Initializing ports of buttons to produce a signal enabling ()
	PORTC |= (1 << PORTC3);
 498:	88 b1       	in	r24, 0x08	; 8
 49a:	88 60       	ori	r24, 0x08	; 8
 49c:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC2);
 49e:	88 b1       	in	r24, 0x08	; 8
 4a0:	84 60       	ori	r24, 0x04	; 4
 4a2:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC1);
 4a4:	88 b1       	in	r24, 0x08	; 8
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC0);
 4aa:	88 b1       	in	r24, 0x08	; 8
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	88 b9       	out	0x08, r24	; 8
	
	//Initializing LED output (CAN BE DELETED AFTER DEBUG PHASE)
	DDRB |= (1 << DDRB5);
 4b0:	84 b1       	in	r24, 0x04	; 4
 4b2:	80 62       	ori	r24, 0x20	; 32
 4b4:	84 b9       	out	0x04, r24	; 4
 4b6:	08 95       	ret

000004b8 <PollInputs>:
}

void PollInputs(struct Player *player)
{
 4b8:	fc 01       	movw	r30, r24
	//Poll for first button
	if (!(BUTTON_PORTS & FIRST_BUTTON_PIN_LOCATION))
 4ba:	33 99       	sbic	0x06, 3	; 6
 4bc:	03 c0       	rjmp	.+6      	; 0x4c4 <PollInputs+0xc>
	{
		player[0].downFlag = true;
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	81 83       	std	Z+1, r24	; 0x01
 4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <PollInputs+0xe>
	}
	else
	{
		player[0].downFlag = false;
 4c4:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//Poll for second button
	if (!(BUTTON_PORTS & SECOND_BUTTON_PIN_LOCATION))
 4c6:	32 99       	sbic	0x06, 2	; 6
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <PollInputs+0x18>
	{
		player[0].upFlag = true;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	80 83       	st	Z, r24
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <PollInputs+0x1a>
	}
	else
	{
		player[0].upFlag = false;
 4d0:	10 82       	st	Z, r1
	}
	
	//Poll for third button
	if (!(BUTTON_PORTS & THIRD_BUTTON_PIN_LOCATION))
 4d2:	31 99       	sbic	0x06, 1	; 6
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <PollInputs+0x24>
	{
		player[1].downFlag = true;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	86 83       	std	Z+6, r24	; 0x06
 4da:	01 c0       	rjmp	.+2      	; 0x4de <PollInputs+0x26>
	}
	else
	{
		player[1].downFlag = false;
 4dc:	16 82       	std	Z+6, r1	; 0x06
	}
	
	//Poll for fourth button
	if (!(BUTTON_PORTS & FOURTH_BUTTON_PIN_LOCATION))
 4de:	30 99       	sbic	0x06, 0	; 6
 4e0:	03 c0       	rjmp	.+6      	; 0x4e8 <PollInputs+0x30>
	{
		player[1].upFlag = true;
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	85 83       	std	Z+5, r24	; 0x05
 4e6:	08 95       	ret
	}
	else
	{
		player[1].upFlag = false;
 4e8:	15 82       	std	Z+5, r1	; 0x05
 4ea:	08 95       	ret

000004ec <CheckInputs>:
	}
}

void CheckInputs(struct Player *player)
{
 4ec:	fc 01       	movw	r30, r24

	//checking for double inputs
	if ((player[0].downFlag == true) && (player[0].upFlag == true))
 4ee:	81 81       	ldd	r24, Z+1	; 0x01
 4f0:	88 23       	and	r24, r24
 4f2:	29 f0       	breq	.+10     	; 0x4fe <CheckInputs+0x12>
 4f4:	80 81       	ld	r24, Z
 4f6:	88 23       	and	r24, r24
 4f8:	11 f0       	breq	.+4      	; 0x4fe <CheckInputs+0x12>
	{
		player[0].downFlag = false;
 4fa:	11 82       	std	Z+1, r1	; 0x01
		player[0].upFlag = false;
 4fc:	10 82       	st	Z, r1
	}
	if ((player[1].downFlag == true) && (player[1].upFlag == true))
 4fe:	86 81       	ldd	r24, Z+6	; 0x06
 500:	88 23       	and	r24, r24
 502:	29 f0       	breq	.+10     	; 0x50e <CheckInputs+0x22>
 504:	85 81       	ldd	r24, Z+5	; 0x05
 506:	88 23       	and	r24, r24
 508:	11 f0       	breq	.+4      	; 0x50e <CheckInputs+0x22>
	{
		player[1].downFlag = false;
 50a:	16 82       	std	Z+6, r1	; 0x06
		player[1].upFlag = false;
 50c:	15 82       	std	Z+5, r1	; 0x05
	}
	
	//Checking up flag boundaries
	if ((player[0].upFlag == true) && (player[0].yPos <= 1))
 50e:	80 81       	ld	r24, Z
 510:	88 23       	and	r24, r24
 512:	21 f0       	breq	.+8      	; 0x51c <CheckInputs+0x30>
 514:	83 81       	ldd	r24, Z+3	; 0x03
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	08 f4       	brcc	.+2      	; 0x51c <CheckInputs+0x30>
	{
		player[0].upFlag = false;
 51a:	10 82       	st	Z, r1
	}
	if ((player[1].upFlag == true) && (player[1].yPos <= 1))
 51c:	85 81       	ldd	r24, Z+5	; 0x05
 51e:	88 23       	and	r24, r24
 520:	21 f0       	breq	.+8      	; 0x52a <CheckInputs+0x3e>
 522:	80 85       	ldd	r24, Z+8	; 0x08
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	08 f4       	brcc	.+2      	; 0x52a <CheckInputs+0x3e>
	{
		player[1].upFlag = false;
 528:	15 82       	std	Z+5, r1	; 0x05
	}
	
	//Checking down flag boundaries
	if ((player[0].downFlag == true) && (player[0].yPos >= 3))
 52a:	81 81       	ldd	r24, Z+1	; 0x01
 52c:	88 23       	and	r24, r24
 52e:	21 f0       	breq	.+8      	; 0x538 <CheckInputs+0x4c>
 530:	83 81       	ldd	r24, Z+3	; 0x03
 532:	83 30       	cpi	r24, 0x03	; 3
 534:	08 f0       	brcs	.+2      	; 0x538 <CheckInputs+0x4c>
	{
		player[0].downFlag = false;
 536:	11 82       	std	Z+1, r1	; 0x01
	}
	if ((player[1].downFlag == true) && (player[1].yPos >= 3))
 538:	86 81       	ldd	r24, Z+6	; 0x06
 53a:	88 23       	and	r24, r24
 53c:	21 f0       	breq	.+8      	; 0x546 <CheckInputs+0x5a>
 53e:	80 85       	ldd	r24, Z+8	; 0x08
 540:	83 30       	cpi	r24, 0x03	; 3
 542:	08 f0       	brcs	.+2      	; 0x546 <CheckInputs+0x5a>
	{
		player[1].downFlag = false;
 544:	16 82       	std	Z+6, r1	; 0x06
 546:	08 95       	ret

00000548 <ExecuteInputs>:
		//PORTB = (0 << PORTB5);
	//}
}

void ExecuteInputs(struct Player *player)
{
 548:	fc 01       	movw	r30, r24
	if (player[0].upFlag)
 54a:	80 81       	ld	r24, Z
 54c:	88 23       	and	r24, r24
 54e:	19 f0       	breq	.+6      	; 0x556 <ExecuteInputs+0xe>
	{	
		player[0].yPos -= 1;
 550:	83 81       	ldd	r24, Z+3	; 0x03
 552:	81 50       	subi	r24, 0x01	; 1
 554:	83 83       	std	Z+3, r24	; 0x03
	}
	if (player[0].downFlag)
 556:	81 81       	ldd	r24, Z+1	; 0x01
 558:	88 23       	and	r24, r24
 55a:	19 f0       	breq	.+6      	; 0x562 <ExecuteInputs+0x1a>
	{
		player[0].yPos += 1;
 55c:	83 81       	ldd	r24, Z+3	; 0x03
 55e:	8f 5f       	subi	r24, 0xFF	; 255
 560:	83 83       	std	Z+3, r24	; 0x03
	}
	if (player[1].upFlag)
 562:	85 81       	ldd	r24, Z+5	; 0x05
 564:	88 23       	and	r24, r24
 566:	19 f0       	breq	.+6      	; 0x56e <ExecuteInputs+0x26>
	{
		player[1].yPos -= 1;
 568:	80 85       	ldd	r24, Z+8	; 0x08
 56a:	81 50       	subi	r24, 0x01	; 1
 56c:	80 87       	std	Z+8, r24	; 0x08
	}
	if (player[1].downFlag)
 56e:	86 81       	ldd	r24, Z+6	; 0x06
 570:	88 23       	and	r24, r24
 572:	19 f0       	breq	.+6      	; 0x57a <ExecuteInputs+0x32>
	{
		player[1].yPos += 1;
 574:	80 85       	ldd	r24, Z+8	; 0x08
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	80 87       	std	Z+8, r24	; 0x08
 57a:	08 95       	ret

0000057c <BeginTransmisson>:
}

void DisplayCursor(uint8_t* displayControl)
{
	*displayControl |= 0x02;
	SendCommand(*displayControl | 0x08);
 57c:	84 ea       	ldi	r24, 0xA4	; 164
 57e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 582:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 586:	88 23       	and	r24, r24
 588:	e4 f7       	brge	.-8      	; 0x582 <BeginTransmisson+0x6>
 58a:	8e e4       	ldi	r24, 0x4E	; 78
 58c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 590:	84 e8       	ldi	r24, 0x84	; 132
 592:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 596:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 59a:	88 23       	and	r24, r24
 59c:	e4 f7       	brge	.-8      	; 0x596 <BeginTransmisson+0x1a>
 59e:	08 95       	ret

000005a0 <EndTransmisson>:
 5a0:	84 e9       	ldi	r24, 0x94	; 148
 5a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5a6:	8f e8       	ldi	r24, 0x8F	; 143
 5a8:	91 e0       	ldi	r25, 0x01	; 1
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <EndTransmisson+0xa>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <EndTransmisson+0x10>
 5b0:	00 00       	nop
 5b2:	08 95       	ret

000005b4 <ExpanderWrite>:
 5b4:	cf 93       	push	r28
 5b6:	c8 2f       	mov	r28, r24
 5b8:	87 e2       	ldi	r24, 0x27	; 39
 5ba:	0e 94 be 02 	call	0x57c	; 0x57c <BeginTransmisson>
 5be:	c8 60       	ori	r28, 0x08	; 8
 5c0:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 5c4:	84 e8       	ldi	r24, 0x84	; 132
 5c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5ce:	88 23       	and	r24, r24
 5d0:	e4 f7       	brge	.-8      	; 0x5ca <ExpanderWrite+0x16>
 5d2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <EndTransmisson>
 5d6:	cf 91       	pop	r28
 5d8:	08 95       	ret

000005da <PulseEnable>:
 5da:	cf 93       	push	r28
 5dc:	c8 2f       	mov	r28, r24
 5de:	84 60       	ori	r24, 0x04	; 4
 5e0:	0e 94 da 02 	call	0x5b4	; 0x5b4 <ExpanderWrite>
 5e4:	85 e0       	ldi	r24, 0x05	; 5
 5e6:	8a 95       	dec	r24
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <PulseEnable+0xc>
 5ea:	00 00       	nop
 5ec:	8c 2f       	mov	r24, r28
 5ee:	8b 7f       	andi	r24, 0xFB	; 251
 5f0:	0e 94 da 02 	call	0x5b4	; 0x5b4 <ExpanderWrite>
 5f4:	87 ec       	ldi	r24, 0xC7	; 199
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <PulseEnable+0x1e>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <PulseEnable+0x24>
 5fe:	00 00       	nop
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <Write4Bits>:
 604:	cf 93       	push	r28
 606:	c8 2f       	mov	r28, r24
 608:	0e 94 da 02 	call	0x5b4	; 0x5b4 <ExpanderWrite>
 60c:	8c 2f       	mov	r24, r28
 60e:	0e 94 ed 02 	call	0x5da	; 0x5da <PulseEnable>
 612:	cf 91       	pop	r28
 614:	08 95       	ret

00000616 <SendCommand>:
 616:	cf 93       	push	r28
 618:	c8 2f       	mov	r28, r24
 61a:	80 7f       	andi	r24, 0xF0	; 240
 61c:	0e 94 02 03 	call	0x604	; 0x604 <Write4Bits>
 620:	8c 2f       	mov	r24, r28
 622:	82 95       	swap	r24
 624:	80 7f       	andi	r24, 0xF0	; 240
 626:	0e 94 02 03 	call	0x604	; 0x604 <Write4Bits>
 62a:	8f e9       	ldi	r24, 0x9F	; 159
 62c:	9f e0       	ldi	r25, 0x0F	; 15
 62e:	01 97       	sbiw	r24, 0x01	; 1
 630:	f1 f7       	brne	.-4      	; 0x62e <SendCommand+0x18>
 632:	00 c0       	rjmp	.+0      	; 0x634 <SendCommand+0x1e>
 634:	00 00       	nop
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <SendData>:
}

void SendData(uint8_t value)
{
 63a:	cf 93       	push	r28
 63c:	c8 2f       	mov	r28, r24
	Write4Bits((value & 0xF0) | 0x01);
 63e:	80 7f       	andi	r24, 0xF0	; 240
 640:	81 60       	ori	r24, 0x01	; 1
 642:	0e 94 02 03 	call	0x604	; 0x604 <Write4Bits>
	Write4Bits(((value << 4) & 0xF0) | 0x01);
 646:	20 e1       	ldi	r18, 0x10	; 16
 648:	c2 9f       	mul	r28, r18
 64a:	c0 01       	movw	r24, r0
 64c:	11 24       	eor	r1, r1
 64e:	81 60       	ori	r24, 0x01	; 1
 650:	0e 94 02 03 	call	0x604	; 0x604 <Write4Bits>
 654:	8f e9       	ldi	r24, 0x9F	; 159
 656:	9f e0       	ldi	r25, 0x0F	; 15
 658:	01 97       	sbiw	r24, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <SendData+0x1e>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <SendData+0x24>
 65e:	00 00       	nop
	_delay_ms(1);
}
 660:	cf 91       	pop	r28
 662:	08 95       	ret

00000664 <CreateCustomChar>:
void CreateCustomChar(uint8_t location, uint8_t charmap[]){
 664:	ff 92       	push	r15
 666:	0f 93       	push	r16
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	f8 2e       	mov	r15, r24
 670:	8b 01       	movw	r16, r22
	
	for(int i=0; i<8; i++){
 672:	c0 e0       	ldi	r28, 0x00	; 0
 674:	d0 e0       	ldi	r29, 0x00	; 0
 676:	11 c0       	rjmp	.+34     	; 0x69a <CreateCustomChar+0x36>
		SendCommand(0x40|((location&0x07)<<3)+i);
 678:	8f 2d       	mov	r24, r15
 67a:	87 70       	andi	r24, 0x07	; 7
 67c:	88 0f       	add	r24, r24
 67e:	88 0f       	add	r24, r24
 680:	88 0f       	add	r24, r24
 682:	8c 0f       	add	r24, r28
 684:	80 64       	ori	r24, 0x40	; 64
 686:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
		SendData(charmap[i]&0b00011111);
 68a:	f8 01       	movw	r30, r16
 68c:	ec 0f       	add	r30, r28
 68e:	fd 1f       	adc	r31, r29
 690:	80 81       	ld	r24, Z
 692:	8f 71       	andi	r24, 0x1F	; 31
 694:	0e 94 1d 03 	call	0x63a	; 0x63a <SendData>
	Write4Bits(((value << 4) & 0xF0) | 0x01);
	_delay_ms(1);
}
void CreateCustomChar(uint8_t location, uint8_t charmap[]){
	
	for(int i=0; i<8; i++){
 698:	21 96       	adiw	r28, 0x01	; 1
 69a:	c8 30       	cpi	r28, 0x08	; 8
 69c:	d1 05       	cpc	r29, r1
 69e:	64 f3       	brlt	.-40     	; 0x678 <CreateCustomChar+0x14>
		SendCommand(0x40|((location&0x07)<<3)+i);
		SendData(charmap[i]&0b00011111);
	}
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	0f 91       	pop	r16
 6a8:	ff 90       	pop	r15
 6aa:	08 95       	ret

000006ac <InitLCD>:
char right_wall[8]={0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01};


void InitLCD()
{	
	DDRC |= (0 << DDRC4);
 6ac:	87 b1       	in	r24, 0x07	; 7
 6ae:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC5);
 6b0:	87 b1       	in	r24, 0x07	; 7
 6b2:	87 b9       	out	0x07, r24	; 7
	
	PORTC |= (1 << LCD_SDA_PORT);
 6b4:	88 b1       	in	r24, 0x08	; 8
 6b6:	80 61       	ori	r24, 0x10	; 16
 6b8:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << LCD_SCL_PORT);
 6ba:	88 b1       	in	r24, 0x08	; 8
 6bc:	80 62       	ori	r24, 0x20	; 32
 6be:	88 b9       	out	0x08, r24	; 8

    // Calculate the closest TWBR value based on the desired bit rate and prescaler
    // The closest prescaler for 100 kHz is 16, so we'll use that

    // Set the TWBR value and prescaler bits in the TWCR register
    TWBR0 = 72;
 6c0:	88 e4       	ldi	r24, 0x48	; 72
 6c2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWSR0 = (0 << TWPS1) | (0 << TWPS0); // Set prescaler to 16
 6c6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

    // Enable TWI
    TWCR0 = (1 << TWEN);
 6ca:	84 e0       	ldi	r24, 0x04	; 4
 6cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	ExpanderWrite(BACKLIGHT_VALUE);
 6d0:	88 e0       	ldi	r24, 0x08	; 8
 6d2:	0e 94 da 02 	call	0x5b4	; 0x5b4 <ExpanderWrite>

	Write4Bits(0x03 >> 4); // Initialization for 4-bit mode (First time)
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0e 94 02 03 	call	0x604	; 0x604 <Write4Bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6dc:	8f e4       	ldi	r24, 0x4F	; 79
 6de:	96 e4       	ldi	r25, 0x46	; 70
 6e0:	01 97       	sbiw	r24, 0x01	; 1
 6e2:	f1 f7       	brne	.-4      	; 0x6e0 <InitLCD+0x34>
 6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <InitLCD+0x3a>
 6e6:	00 00       	nop
	_delay_us(4500);      // Wait for 5ms

	Write4Bits(0x30 >> 4); // Initialization for 4-bit mode (First time)
 6e8:	83 e0       	ldi	r24, 0x03	; 3
 6ea:	0e 94 02 03 	call	0x604	; 0x604 <Write4Bits>
 6ee:	8f e4       	ldi	r24, 0x4F	; 79
 6f0:	96 e4       	ldi	r25, 0x46	; 70
 6f2:	01 97       	sbiw	r24, 0x01	; 1
 6f4:	f1 f7       	brne	.-4      	; 0x6f2 <InitLCD+0x46>
 6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <InitLCD+0x4c>
 6f8:	00 00       	nop
	_delay_us(4500);      // Wait for 5ms

	Write4Bits(0x30 >> 4); // Initialization for 4-bit mode (Third time)
 6fa:	83 e0       	ldi	r24, 0x03	; 3
 6fc:	0e 94 02 03 	call	0x604	; 0x604 <Write4Bits>
 700:	87 e5       	ldi	r24, 0x57	; 87
 702:	92 e0       	ldi	r25, 0x02	; 2
 704:	01 97       	sbiw	r24, 0x01	; 1
 706:	f1 f7       	brne	.-4      	; 0x704 <InitLCD+0x58>
 708:	00 c0       	rjmp	.+0      	; 0x70a <InitLCD+0x5e>
 70a:	00 00       	nop
	_delay_us(150);    // Wait for 150us

	Write4Bits(0x20 >> 4); // Initialization for 4-bit mode (Final time, sets 4-bit mode)
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	0e 94 02 03 	call	0x604	; 0x604 <Write4Bits>
	
	SendCommand(0x28);
 712:	88 e2       	ldi	r24, 0x28	; 40
 714:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
	SendCommand(0x0C);
 718:	8c e0       	ldi	r24, 0x0C	; 12
 71a:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
	CreateCustomChar(0x04,ball);
 71e:	60 e1       	ldi	r22, 0x10	; 16
 720:	71 e0       	ldi	r23, 0x01	; 1
 722:	84 e0       	ldi	r24, 0x04	; 4
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 32 03 	call	0x664	; 0x664 <CreateCustomChar>
	CreateCustomChar(0x02,left_wall);
 72a:	68 e0       	ldi	r22, 0x08	; 8
 72c:	71 e0       	ldi	r23, 0x01	; 1
 72e:	82 e0       	ldi	r24, 0x02	; 2
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 32 03 	call	0x664	; 0x664 <CreateCustomChar>
	CreateCustomChar(0x03,right_wall);
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	71 e0       	ldi	r23, 0x01	; 1
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 32 03 	call	0x664	; 0x664 <CreateCustomChar>
	SendCommand(0x01);
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
	SendCommand(0x02);
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
	SendCommand(0x06);
 74e:	86 e0       	ldi	r24, 0x06	; 6
 750:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
	SendCommand(0x0C);
 754:	8c e0       	ldi	r24, 0x0C	; 12
 756:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
 75a:	08 95       	ret

0000075c <SetCursorPosition>:
	createdAddress += xCoord;
	for (int i = 0; i <= createdAddress; i++)
	{
		SendCommand(0x14);
	}*/
	uint8_t coordset = xCoord-1;
 75c:	9f ef       	ldi	r25, 0xFF	; 255
 75e:	98 0f       	add	r25, r24
	switch(yCoord){
 760:	63 30       	cpi	r22, 0x03	; 3
 762:	39 f0       	breq	.+14     	; 0x772 <SetCursorPosition+0x16>
 764:	64 30       	cpi	r22, 0x04	; 4
 766:	41 f0       	breq	.+16     	; 0x778 <SetCursorPosition+0x1c>
 768:	62 30       	cpi	r22, 0x02	; 2
 76a:	41 f4       	brne	.+16     	; 0x77c <SetCursorPosition+0x20>
		case 1:
		coordset +=0;
		break;
		case 2:
		coordset +=0x40;
 76c:	9f e3       	ldi	r25, 0x3F	; 63
 76e:	98 0f       	add	r25, r24
		break;
 770:	05 c0       	rjmp	.+10     	; 0x77c <SetCursorPosition+0x20>
		case 3:
		coordset +=0x14;
 772:	93 e1       	ldi	r25, 0x13	; 19
 774:	98 0f       	add	r25, r24
		break;
 776:	02 c0       	rjmp	.+4      	; 0x77c <SetCursorPosition+0x20>
		case 4:
		coordset +=0x54;
 778:	93 e5       	ldi	r25, 0x53	; 83
 77a:	98 0f       	add	r25, r24
		break;
	}
	SendCommand(coordset | DDRAM_PRESCALER);
 77c:	89 2f       	mov	r24, r25
 77e:	80 68       	ori	r24, 0x80	; 128
 780:	0e 94 0b 03 	call	0x616	; 0x616 <SendCommand>
 784:	08 95       	ret

00000786 <main>:
#include "LCD.h"
#include "BoardManager.h"
#include "Physics.h"

int main(void)
{	
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
 78a:	cd b7       	in	r28, 0x3d	; 61
 78c:	de b7       	in	r29, 0x3e	; 62
 78e:	2e 97       	sbiw	r28, 0x0e	; 14
 790:	0f b6       	in	r0, 0x3f	; 63
 792:	f8 94       	cli
 794:	de bf       	out	0x3e, r29	; 62
 796:	0f be       	out	0x3f, r0	; 63
 798:	cd bf       	out	0x3d, r28	; 61
	//_delay_ms(1000);
	cli();
 79a:	f8 94       	cli
	struct Player player[2];
	InitInputs(player);
 79c:	ce 01       	movw	r24, r28
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	0e 94 44 02 	call	0x488	; 0x488 <InitInputs>
	struct Ball ball[1];
	init_ball(ball,10,2,1,1);
 7a4:	01 e0       	ldi	r16, 0x01	; 1
 7a6:	21 e0       	ldi	r18, 0x01	; 1
 7a8:	42 e0       	ldi	r20, 0x02	; 2
 7aa:	6a e0       	ldi	r22, 0x0A	; 10
 7ac:	ce 01       	movw	r24, r28
 7ae:	0b 96       	adiw	r24, 0x0b	; 11
 7b0:	0e 94 8b 01 	call	0x316	; 0x316 <init_ball>
	InitLCD();
 7b4:	0e 94 56 03 	call	0x6ac	; 0x6ac <InitLCD>
	ResetBoard(player);
 7b8:	ce 01       	movw	r24, r28
 7ba:	01 96       	adiw	r24, 0x01	; 1
 7bc:	0e 94 b2 00 	call	0x164	; 0x164 <ResetBoard>
    while (1)
    {
	    PollInputs(player);
 7c0:	ce 01       	movw	r24, r28
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <PollInputs>
	    CheckInputs(player);
 7c8:	ce 01       	movw	r24, r28
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	0e 94 76 02 	call	0x4ec	; 0x4ec <CheckInputs>
		ExecuteInputs(player);
 7d0:	ce 01       	movw	r24, r28
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	0e 94 a4 02 	call	0x548	; 0x548 <ExecuteInputs>
		reflect_paddles(player[0].xPos,player[0].yPos,player[1].xPos,player[1].yPos,ball);
 7d8:	8e 01       	movw	r16, r28
 7da:	05 5f       	subi	r16, 0xF5	; 245
 7dc:	1f 4f       	sbci	r17, 0xFF	; 255
 7de:	29 85       	ldd	r18, Y+9	; 0x09
 7e0:	48 85       	ldd	r20, Y+8	; 0x08
 7e2:	6c 81       	ldd	r22, Y+4	; 0x04
 7e4:	8b 81       	ldd	r24, Y+3	; 0x03
 7e6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <reflect_paddles>
		UpdateBallPosVel(ball);
 7ea:	c8 01       	movw	r24, r16
 7ec:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <UpdateBallPosVel>
		UpdateBoard(player,ball);
 7f0:	b8 01       	movw	r22, r16
 7f2:	ce 01       	movw	r24, r28
 7f4:	01 96       	adiw	r24, 0x01	; 1
 7f6:	0e 94 09 01 	call	0x212	; 0x212 <UpdateBoard>
		DetectUpdateScore(player,ball);
 7fa:	b8 01       	movw	r22, r16
 7fc:	ce 01       	movw	r24, r28
 7fe:	01 96       	adiw	r24, 0x01	; 1
 800:	0e 94 56 01 	call	0x2ac	; 0x2ac <DetectUpdateScore>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 804:	2f ef       	ldi	r18, 0xFF	; 255
 806:	83 ec       	ldi	r24, 0xC3	; 195
 808:	99 e0       	ldi	r25, 0x09	; 9
 80a:	21 50       	subi	r18, 0x01	; 1
 80c:	80 40       	sbci	r24, 0x00	; 0
 80e:	90 40       	sbci	r25, 0x00	; 0
 810:	e1 f7       	brne	.-8      	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 812:	00 c0       	rjmp	.+0      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 814:	00 00       	nop
 816:	d4 cf       	rjmp	.-88     	; 0x7c0 <main+0x3a>

00000818 <__vector_11>:
	max_cycle_H = (count_cycle>>8) & 0xff;//bitshift int to chars
	max_cycle_L = count_cycle & 0xff;
	SET_SPEAKER_PARAMS();//set timer values
}

ISR(TIMER1_COMPA_vect){
 818:	1f 92       	push	r1
 81a:	0f 92       	push	r0
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	0f 92       	push	r0
 820:	11 24       	eor	r1, r1
 822:	2f 93       	push	r18
 824:	3f 93       	push	r19
 826:	4f 93       	push	r20
 828:	5f 93       	push	r21
 82a:	6f 93       	push	r22
 82c:	7f 93       	push	r23
 82e:	8f 93       	push	r24
 830:	9f 93       	push	r25
 832:	af 93       	push	r26
 834:	bf 93       	push	r27
 836:	ef 93       	push	r30
 838:	ff 93       	push	r31
	TIM1_COMPA();//calls assembly interrupt handle
 83a:	0e 94 79 00 	call	0xf2	; 0xf2 <TIM1_COMPA>
}
 83e:	ff 91       	pop	r31
 840:	ef 91       	pop	r30
 842:	bf 91       	pop	r27
 844:	af 91       	pop	r26
 846:	9f 91       	pop	r25
 848:	8f 91       	pop	r24
 84a:	7f 91       	pop	r23
 84c:	6f 91       	pop	r22
 84e:	5f 91       	pop	r21
 850:	4f 91       	pop	r20
 852:	3f 91       	pop	r19
 854:	2f 91       	pop	r18
 856:	0f 90       	pop	r0
 858:	0f be       	out	0x3f, r0	; 63
 85a:	0f 90       	pop	r0
 85c:	1f 90       	pop	r1
 85e:	18 95       	reti

00000860 <SET_SPEAKER_PARAMS>:
void TIM1_COMPA();
	
void SET_SPEAKER_PARAMS()
{
	cli();//turn off interrupts
 860:	f8 94       	cli
	DDRB |= (1<<PORTB1);//set pin B1 to output for sound
 862:	84 b1       	in	r24, 0x04	; 4
 864:	82 60       	ori	r24, 0x02	; 2
 866:	84 b9       	out	0x04, r24	; 4
	TCCR1A = 0xC0;
 868:	e0 e8       	ldi	r30, 0x80	; 128
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 ec       	ldi	r24, 0xC0	; 192
 86e:	80 83       	st	Z, r24
	TCCR1B = 0x01;//clk/8 time
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCCR1C = 0x80;
 876:	80 e8       	ldi	r24, 0x80	; 128
 878:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
	TCCR1A = 0x40;
 87c:	80 e4       	ldi	r24, 0x40	; 64
 87e:	80 83       	st	Z, r24
	int tcount = TCNT1L + (TCNT1H<<8);//get clock value
 880:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 884:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	98 2f       	mov	r25, r24
 88c:	88 27       	eor	r24, r24
 88e:	82 0f       	add	r24, r18
 890:	91 1d       	adc	r25, r1
	tcount = tcount + g_freq; //increase clock value
 892:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_freq>
 896:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_freq+0x1>
 89a:	82 0f       	add	r24, r18
 89c:	93 1f       	adc	r25, r19
	OCR1AL = tcount & 0xff;//load to output compare registers
 89e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1AH = (tcount>>8) & 0xff;
 8a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
	cycle_level = 0;///reset cycle level
 8a6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
	TIMSK1 = 0x02;//set interrupts
 8aa:	82 e0       	ldi	r24, 0x02	; 2
 8ac:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	TIFR1 = 0x02;
 8b0:	86 bb       	out	0x16, r24	; 22
	sei();//enable global interrupts
 8b2:	78 94       	sei
 8b4:	08 95       	ret

000008b6 <Play_speaker>:
char max_cycle_H = 120;
char cycle_count_L = 0;//counts clock timer for sound up to maximum
char cycle_count_H = 0;
char cycle_level = 0; //variable to track which side of duty cycle sound is on

void Play_speaker(int freq, int len_ms){
 8b6:	cf 92       	push	r12
 8b8:	df 92       	push	r13
 8ba:	ef 92       	push	r14
 8bc:	ff 92       	push	r15
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
 8c2:	eb 01       	movw	r28, r22
	int freq_adj = 500000/freq+30; //calculate the timing ofcycles, needs offset to prevent error at small values
 8c4:	6c 01       	movw	r12, r24
 8c6:	99 0f       	add	r25, r25
 8c8:	ee 08       	sbc	r14, r14
 8ca:	ff 08       	sbc	r15, r15
 8cc:	60 e2       	ldi	r22, 0x20	; 32
 8ce:	71 ea       	ldi	r23, 0xA1	; 161
 8d0:	87 e0       	ldi	r24, 0x07	; 7
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	a7 01       	movw	r20, r14
 8d6:	96 01       	movw	r18, r12
 8d8:	0e 94 ce 04 	call	0x99c	; 0x99c <__divmodsi4>
 8dc:	22 5e       	subi	r18, 0xE2	; 226
 8de:	3f 4f       	sbci	r19, 0xFF	; 255
	freq_high = (freq_adj>>8) & 0xff;//bitshifting to change integer to char
 8e0:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <freq_high>
	freq_low = freq_adj & 0xff;
 8e4:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <freq_low>
	cycle_count_L = 0;//set cycles to zero
 8e8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <cycle_count_L>
	cycle_count_H = 0;
 8ec:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <cycle_count_H>
	cycle_level = 0;
 8f0:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
	int count_cycle = (long)freq*(long)len_ms/1000;//integer number for maximum cycles, need long cast to prevent intermediate overflow value
 8f4:	de 01       	movw	r26, r28
 8f6:	a7 01       	movw	r20, r14
 8f8:	96 01       	movw	r18, r12
 8fa:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulshisi3>
 8fe:	28 ee       	ldi	r18, 0xE8	; 232
 900:	33 e0       	ldi	r19, 0x03	; 3
 902:	40 e0       	ldi	r20, 0x00	; 0
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	0e 94 ce 04 	call	0x99c	; 0x99c <__divmodsi4>
	max_cycle_H = (count_cycle>>8) & 0xff;//bitshift int to chars
 90a:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <max_cycle_H>
	max_cycle_L = count_cycle & 0xff;
 90e:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <max_cycle_L>
	SET_SPEAKER_PARAMS();//set timer values
 912:	0e 94 30 04 	call	0x860	; 0x860 <SET_SPEAKER_PARAMS>
}
 916:	df 91       	pop	r29
 918:	cf 91       	pop	r28
 91a:	ff 90       	pop	r15
 91c:	ef 90       	pop	r14
 91e:	df 90       	pop	r13
 920:	cf 90       	pop	r12
 922:	08 95       	ret

00000924 <score_sound>:
	TIFR1 = 0x02;
	sei();//enable global interrupts
}

void score_sound(){
	Play_speaker(400,1000);
 924:	68 ee       	ldi	r22, 0xE8	; 232
 926:	73 e0       	ldi	r23, 0x03	; 3
 928:	80 e9       	ldi	r24, 0x90	; 144
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Play_speaker>
 930:	2f ef       	ldi	r18, 0xFF	; 255
 932:	89 e6       	ldi	r24, 0x69	; 105
 934:	98 e1       	ldi	r25, 0x18	; 24
 936:	21 50       	subi	r18, 0x01	; 1
 938:	80 40       	sbci	r24, 0x00	; 0
 93a:	90 40       	sbci	r25, 0x00	; 0
 93c:	e1 f7       	brne	.-8      	; 0x936 <score_sound+0x12>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <score_sound+0x1c>
 940:	00 00       	nop
	_delay_ms(8000);
	Play_speaker(440,1000);
 942:	68 ee       	ldi	r22, 0xE8	; 232
 944:	73 e0       	ldi	r23, 0x03	; 3
 946:	88 eb       	ldi	r24, 0xB8	; 184
 948:	91 e0       	ldi	r25, 0x01	; 1
 94a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Play_speaker>
 94e:	2f ef       	ldi	r18, 0xFF	; 255
 950:	89 e6       	ldi	r24, 0x69	; 105
 952:	98 e1       	ldi	r25, 0x18	; 24
 954:	21 50       	subi	r18, 0x01	; 1
 956:	80 40       	sbci	r24, 0x00	; 0
 958:	90 40       	sbci	r25, 0x00	; 0
 95a:	e1 f7       	brne	.-8      	; 0x954 <score_sound+0x30>
 95c:	00 c0       	rjmp	.+0      	; 0x95e <score_sound+0x3a>
 95e:	00 00       	nop
	_delay_ms(8000);
	Play_speaker(380,1000);
 960:	68 ee       	ldi	r22, 0xE8	; 232
 962:	73 e0       	ldi	r23, 0x03	; 3
 964:	8c e7       	ldi	r24, 0x7C	; 124
 966:	91 e0       	ldi	r25, 0x01	; 1
 968:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Play_speaker>
 96c:	2f ef       	ldi	r18, 0xFF	; 255
 96e:	89 e6       	ldi	r24, 0x69	; 105
 970:	98 e1       	ldi	r25, 0x18	; 24
 972:	21 50       	subi	r18, 0x01	; 1
 974:	80 40       	sbci	r24, 0x00	; 0
 976:	90 40       	sbci	r25, 0x00	; 0
 978:	e1 f7       	brne	.-8      	; 0x972 <score_sound+0x4e>
 97a:	00 c0       	rjmp	.+0      	; 0x97c <score_sound+0x58>
 97c:	00 00       	nop
 97e:	08 95       	ret

00000980 <bounce_sound>:
	_delay_ms(8000);
}
	
void bounce_sound(){
	Play_speaker(120,500);
 980:	64 ef       	ldi	r22, 0xF4	; 244
 982:	71 e0       	ldi	r23, 0x01	; 1
 984:	88 e7       	ldi	r24, 0x78	; 120
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Play_speaker>
 98c:	08 95       	ret

0000098e <paddle_sound>:
}
void paddle_sound(){
	Play_speaker(240,500);
 98e:	64 ef       	ldi	r22, 0xF4	; 244
 990:	71 e0       	ldi	r23, 0x01	; 1
 992:	80 ef       	ldi	r24, 0xF0	; 240
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Play_speaker>
 99a:	08 95       	ret

0000099c <__divmodsi4>:
 99c:	05 2e       	mov	r0, r21
 99e:	97 fb       	bst	r25, 7
 9a0:	1e f4       	brtc	.+6      	; 0x9a8 <__divmodsi4+0xc>
 9a2:	00 94       	com	r0
 9a4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__negsi2>
 9a8:	57 fd       	sbrc	r21, 7
 9aa:	07 d0       	rcall	.+14     	; 0x9ba <__divmodsi4_neg2>
 9ac:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__udivmodsi4>
 9b0:	07 fc       	sbrc	r0, 7
 9b2:	03 d0       	rcall	.+6      	; 0x9ba <__divmodsi4_neg2>
 9b4:	4e f4       	brtc	.+18     	; 0x9c8 <__divmodsi4_exit>
 9b6:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__negsi2>

000009ba <__divmodsi4_neg2>:
 9ba:	50 95       	com	r21
 9bc:	40 95       	com	r20
 9be:	30 95       	com	r19
 9c0:	21 95       	neg	r18
 9c2:	3f 4f       	sbci	r19, 0xFF	; 255
 9c4:	4f 4f       	sbci	r20, 0xFF	; 255
 9c6:	5f 4f       	sbci	r21, 0xFF	; 255

000009c8 <__divmodsi4_exit>:
 9c8:	08 95       	ret

000009ca <__negsi2>:
 9ca:	90 95       	com	r25
 9cc:	80 95       	com	r24
 9ce:	70 95       	com	r23
 9d0:	61 95       	neg	r22
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	08 95       	ret

000009da <__mulshisi3>:
 9da:	b7 ff       	sbrs	r27, 7
 9dc:	0c 94 17 05 	jmp	0xa2e	; 0xa2e <__muluhisi3>

000009e0 <__mulohisi3>:
 9e0:	0e 94 17 05 	call	0xa2e	; 0xa2e <__muluhisi3>
 9e4:	82 1b       	sub	r24, r18
 9e6:	93 0b       	sbc	r25, r19
 9e8:	08 95       	ret

000009ea <__udivmodsi4>:
 9ea:	a1 e2       	ldi	r26, 0x21	; 33
 9ec:	1a 2e       	mov	r1, r26
 9ee:	aa 1b       	sub	r26, r26
 9f0:	bb 1b       	sub	r27, r27
 9f2:	fd 01       	movw	r30, r26
 9f4:	0d c0       	rjmp	.+26     	; 0xa10 <__udivmodsi4_ep>

000009f6 <__udivmodsi4_loop>:
 9f6:	aa 1f       	adc	r26, r26
 9f8:	bb 1f       	adc	r27, r27
 9fa:	ee 1f       	adc	r30, r30
 9fc:	ff 1f       	adc	r31, r31
 9fe:	a2 17       	cp	r26, r18
 a00:	b3 07       	cpc	r27, r19
 a02:	e4 07       	cpc	r30, r20
 a04:	f5 07       	cpc	r31, r21
 a06:	20 f0       	brcs	.+8      	; 0xa10 <__udivmodsi4_ep>
 a08:	a2 1b       	sub	r26, r18
 a0a:	b3 0b       	sbc	r27, r19
 a0c:	e4 0b       	sbc	r30, r20
 a0e:	f5 0b       	sbc	r31, r21

00000a10 <__udivmodsi4_ep>:
 a10:	66 1f       	adc	r22, r22
 a12:	77 1f       	adc	r23, r23
 a14:	88 1f       	adc	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	1a 94       	dec	r1
 a1a:	69 f7       	brne	.-38     	; 0x9f6 <__udivmodsi4_loop>
 a1c:	60 95       	com	r22
 a1e:	70 95       	com	r23
 a20:	80 95       	com	r24
 a22:	90 95       	com	r25
 a24:	9b 01       	movw	r18, r22
 a26:	ac 01       	movw	r20, r24
 a28:	bd 01       	movw	r22, r26
 a2a:	cf 01       	movw	r24, r30
 a2c:	08 95       	ret

00000a2e <__muluhisi3>:
 a2e:	0e 94 22 05 	call	0xa44	; 0xa44 <__umulhisi3>
 a32:	a5 9f       	mul	r26, r21
 a34:	90 0d       	add	r25, r0
 a36:	b4 9f       	mul	r27, r20
 a38:	90 0d       	add	r25, r0
 a3a:	a4 9f       	mul	r26, r20
 a3c:	80 0d       	add	r24, r0
 a3e:	91 1d       	adc	r25, r1
 a40:	11 24       	eor	r1, r1
 a42:	08 95       	ret

00000a44 <__umulhisi3>:
 a44:	a2 9f       	mul	r26, r18
 a46:	b0 01       	movw	r22, r0
 a48:	b3 9f       	mul	r27, r19
 a4a:	c0 01       	movw	r24, r0
 a4c:	a3 9f       	mul	r26, r19
 a4e:	70 0d       	add	r23, r0
 a50:	81 1d       	adc	r24, r1
 a52:	11 24       	eor	r1, r1
 a54:	91 1d       	adc	r25, r1
 a56:	b2 9f       	mul	r27, r18
 a58:	70 0d       	add	r23, r0
 a5a:	81 1d       	adc	r24, r1
 a5c:	11 24       	eor	r1, r1
 a5e:	91 1d       	adc	r25, r1
 a60:	08 95       	ret

00000a62 <_exit>:
 a62:	f8 94       	cli

00000a64 <__stop_program>:
 a64:	ff cf       	rjmp	.-2      	; 0xa64 <__stop_program>
