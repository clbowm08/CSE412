
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001d6  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000002e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c77  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a22  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059c  00000000  00000000  00001a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000529  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ca  00000000  00000000  000025c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000278f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ed       	ldi	r30, 0xD6	; 214
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 30       	cpi	r26, 0x07	; 7
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 b7 00 	call	0x16e	; 0x16e <main>
  ea:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TIM1_COMPA>:
.global cycle_level			
.section ".text"			

.global TIM1_COMPA
TIM1_COMPA:
		lds		r19, cycle_level
  f2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_end>
		sbrc	r19,0				
  f6:	30 fd       	sbrc	r19, 0
		rjmp	ONE					
  f8:	06 c0       	rjmp	.+12     	; 0x106 <ONE>
		lds		r25, freq_low			
  fa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq_low>
		lds		r18, freq_high			
  fe:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,1				
 102:	31 e0       	ldi	r19, 0x01	; 1
		rjmp	BEGIN				
 104:	20 c0       	rjmp	.+64     	; 0x146 <BEGIN>

00000106 <ONE>:
ONE:	lds		r25,freq_low			
 106:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq_low>
		lds		r18,freq_high			
 10a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,0				
 10e:	30 e0       	ldi	r19, 0x00	; 0

		lds		r20, max_cycle_L//one side of cycle, load and compares cycle to max
 110:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <max_cycle_L>
		lds		r21, max_cycle_H
 114:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		lds		r22, cycle_count_L
 118:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <cycle_count_L>
		lds		r23, cycle_count_H
 11c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <cycle_count_H>
		ldi     r24, 0x1
 120:	81 e0       	ldi	r24, 0x01	; 1
		add     r22,r24
 122:	68 0f       	add	r22, r24
		adc		r23,r19
 124:	73 1f       	adc	r23, r19
		sts		cycle_count_L,r22
 126:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <cycle_count_L>
		sts		cycle_count_H,r23
 12a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <cycle_count_H>
		cp		r20,r22
 12e:	46 17       	cp	r20, r22
		cpc		r21,r23
 130:	57 07       	cpc	r21, r23
		brge	BEGIN
 132:	4c f4       	brge	.+18     	; 0x146 <BEGIN>
		cli						//at max, disable interrups
 134:	f8 94       	cli
		ldi r26,0x00			
 136:	a0 e0       	ldi	r26, 0x00	; 0
		sts TIMSK1,r26			
 138:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		out TIFR1,r26	
 13c:	a6 bf       	out	0x36, r26	; 54
		ldi r26,0x00			
 13e:	a0 e0       	ldi	r26, 0x00	; 0
		sts TCCR1A,r26//turn off B1 output pin
 140:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sei
 144:	78 94       	sei

00000146 <BEGIN>:

BEGIN:	lds		r26,OCR1AL			
 146:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		add		r25,r26			
 14a:	9a 0f       	add	r25, r26
		lds		r26,OCR1AH			
 14c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		adc		r18,r26				
 150:	2a 1f       	adc	r18, r26
		sts		OCR1AH,r18			
 152:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		sts		OCR1AL,r25			
 156:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		sbrc r19,0
 15a:	30 fd       	sbrc	r19, 0
		rjmp Return
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Return>

0000015e <Return>:
Return:
	sts cycle_level,r19
 15e:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <__data_end>
	ret
 162:	08 95       	ret

00000164 <PollInputs>:
#include <avr/io.h>

void PollInputs()
{
	
	if (!(PINC & (1 << PINC5)))
 164:	35 99       	sbic	0x06, 5	; 6
 166:	02 c0       	rjmp	.+4      	; 0x16c <PollInputs+0x8>
	{
		PORTB = (1 << PORTB5);
 168:	80 e2       	ldi	r24, 0x20	; 32
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	08 95       	ret

0000016e <main>:
ISR(TIMER1_COMPA_vect){
	TIM1_COMPA();
}*/
int main(void)
{
	cli();
 16e:	f8 94       	cli
	PollInputs();
 170:	0e 94 b2 00 	call	0x164	; 0x164 <PollInputs>
	DDRC |= (0 << DDRC5);
 174:	87 b1       	in	r24, 0x07	; 7
 176:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC5);
 178:	88 b1       	in	r24, 0x08	; 8
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	88 b9       	out	0x08, r24	; 8
	DDRB |= (1 << DDRB5);
 17e:	84 b1       	in	r24, 0x04	; 4
 180:	80 62       	ori	r24, 0x20	; 32
 182:	84 b9       	out	0x04, r24	; 4
	while (1)
	{
		PollInputs();
 184:	0e 94 b2 00 	call	0x164	; 0x164 <PollInputs>
 188:	fd cf       	rjmp	.-6      	; 0x184 <main+0x16>

0000018a <__vector_11>:
	max_cycle_H = (count_cycle>>8) & 0xff;//bitshift int to chars
	max_cycle_L = count_cycle & 0xff;
	SET_SPEAKER_PARAMS();//set timer values
}

ISR(TIMER1_COMPA_vect){
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	4f 93       	push	r20
 19a:	5f 93       	push	r21
 19c:	6f 93       	push	r22
 19e:	7f 93       	push	r23
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
 1a4:	af 93       	push	r26
 1a6:	bf 93       	push	r27
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
	TIM1_COMPA();//calls assembly interrupt handle
 1ac:	0e 94 79 00 	call	0xf2	; 0xf2 <TIM1_COMPA>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
