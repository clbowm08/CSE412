
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00001484  00001518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080011e  0080011e  00001536  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000015a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002378  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108d  00000000  00000000  00003ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010ea  00000000  00000000  00004b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004c8  00000000  00000000  00005c58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000880  00000000  00000000  00006120  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014e7  00000000  00000000  000069a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00007e87  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__vector_11>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_14>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	e4 e8       	ldi	r30, 0x84	; 132
      c8:	f4 e1       	ldi	r31, 0x14	; 20
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ae 31       	cpi	r26, 0x1E	; 30
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	ae e1       	ldi	r26, 0x1E	; 30
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a9 32       	cpi	r26, 0x29	; 41
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 1d 06 	call	0xc3a	; 0xc3a <main>
      ea:	0c 94 40 0a 	jmp	0x1480	; 0x1480 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TIM1_COMPA>:
.global cycle_level			
.section ".text"			

.global TIM1_COMPA
TIM1_COMPA:
		lds		r19, cycle_level
      f2:	30 91 26 01 	lds	r19, 0x0126	; 0x800126 <cycle_level>
		sbrc	r19,0				
      f6:	30 fd       	sbrc	r19, 0
		rjmp	ONE					
      f8:	06 c0       	rjmp	.+12     	; 0x106 <ONE>
		lds		r25, freq_low			
      fa:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <freq_low>
		lds		r18, freq_high			
      fe:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <freq_high>
		ldi		r19,1				
     102:	31 e0       	ldi	r19, 0x01	; 1
		rjmp	BEGIN				
     104:	20 c0       	rjmp	.+64     	; 0x146 <BEGIN>

00000106 <ONE>:
ONE:	lds		r25,freq_low			
     106:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <freq_low>
		lds		r18,freq_high			
     10a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <freq_high>
		ldi		r19,0				
     10e:	30 e0       	ldi	r19, 0x00	; 0

		lds		r20, max_cycle_L//one side of cycle, load and compares cycle to max
     110:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <max_cycle_L>
		lds		r21, max_cycle_H
     114:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <max_cycle_H>
		lds		r22, cycle_count_L
     118:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <cycle_count_L>
		lds		r23, cycle_count_H
     11c:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <cycle_count_H>
		ldi     r24, 0x1
     120:	81 e0       	ldi	r24, 0x01	; 1
		add     r22,r24
     122:	68 0f       	add	r22, r24
		adc		r23,r19
     124:	73 1f       	adc	r23, r19
		sts		cycle_count_L,r22
     126:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <cycle_count_L>
		sts		cycle_count_H,r23
     12a:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <cycle_count_H>
		cp		r20,r22
     12e:	46 17       	cp	r20, r22
		cpc		r21,r23
     130:	57 07       	cpc	r21, r23
		brge	BEGIN
     132:	4c f4       	brge	.+18     	; 0x146 <BEGIN>
		cli						//at max, disable interrups
     134:	f8 94       	cli
		ldi r26,0x00			
     136:	a0 e0       	ldi	r26, 0x00	; 0
		sts TIMSK1,r26			
     138:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		out TIFR1,r26	
     13c:	a6 bf       	out	0x36, r26	; 54
		ldi r26,0x00			
     13e:	a0 e0       	ldi	r26, 0x00	; 0
		sts TCCR1A,r26//turn off B1 output pin
     140:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sei
     144:	78 94       	sei

00000146 <BEGIN>:

BEGIN:	lds		r26,OCR1AL			
     146:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		add		r25,r26			
     14a:	9a 0f       	add	r25, r26
		lds		r26,OCR1AH			
     14c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		adc		r18,r26				
     150:	2a 1f       	adc	r18, r26
		sts		OCR1AH,r18			
     152:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		sts		OCR1AL,r25			
     156:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		sbrc r19,0
     15a:	30 fd       	sbrc	r19, 0
		rjmp Return
     15c:	00 c0       	rjmp	.+0      	; 0x15e <Return>

0000015e <Return>:
Return:
	sts cycle_level,r19
     15e:	30 93 26 01 	sts	0x0126, r19	; 0x800126 <cycle_level>
	ret
     162:	08 95       	ret

00000164 <ResetBoard>:
#include <util/delay.h>
#include "Physics.h"
#include "Sound.h"

void ResetBoard(struct Player *player)
{
     164:	fc 01       	movw	r30, r24
	player[0].downFlag = false;
     166:	11 82       	std	Z+1, r1	; 0x01
	player[0].upFlag = false;
     168:	10 82       	st	Z, r1
	player[1].downFlag = false;
     16a:	14 86       	std	Z+12, r1	; 0x0c
	player[1].upFlag = false;
     16c:	13 86       	std	Z+11, r1	; 0x0b
	
		
	player[0].xPos = 0;
     16e:	12 82       	std	Z+2, r1	; 0x02
     170:	13 82       	std	Z+3, r1	; 0x03
     172:	14 82       	std	Z+4, r1	; 0x04
     174:	15 82       	std	Z+5, r1	; 0x05
	player[0].yPos = 2;
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	a0 e0       	ldi	r26, 0x00	; 0
     17c:	b0 e4       	ldi	r27, 0x40	; 64
     17e:	86 83       	std	Z+6, r24	; 0x06
     180:	97 83       	std	Z+7, r25	; 0x07
     182:	a0 87       	std	Z+8, r26	; 0x08
     184:	b1 87       	std	Z+9, r27	; 0x09
	player[1].xPos = 17;
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	68 e8       	ldi	r22, 0x88	; 136
     18c:	71 e4       	ldi	r23, 0x41	; 65
     18e:	45 87       	std	Z+13, r20	; 0x0d
     190:	56 87       	std	Z+14, r21	; 0x0e
     192:	67 87       	std	Z+15, r22	; 0x0f
     194:	70 8b       	std	Z+16, r23	; 0x10
	player[1].yPos = 2;
     196:	81 8b       	std	Z+17, r24	; 0x11
     198:	92 8b       	std	Z+18, r25	; 0x12
     19a:	a3 8b       	std	Z+19, r26	; 0x13
     19c:	b4 8b       	std	Z+20, r27	; 0x14
	
	player[0].score = 0;
     19e:	12 86       	std	Z+10, r1	; 0x0a
	player[1].score = 0;
     1a0:	15 8a       	std	Z+21, r1	; 0x15
     1a2:	08 95       	ret

000001a4 <printscore>:
	SendData(0x7C);

	//SetCursorPosition(ball[0].xPos,ball[0].yPos);
	//SendData(0x01);
}
void printscore(unsigned char score, unsigned char xpos){
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	c8 2f       	mov	r28, r24
     1aa:	d6 2f       	mov	r29, r22
	SetCursorPosition(xpos+2,1);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	82 e0       	ldi	r24, 0x02	; 2
     1b0:	8d 0f       	add	r24, r29
     1b2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SetCursorPosition>
	unsigned char out = (score%10)+48;
     1b6:	9d ec       	ldi	r25, 0xCD	; 205
     1b8:	c9 9f       	mul	r28, r25
     1ba:	91 2d       	mov	r25, r1
     1bc:	11 24       	eor	r1, r1
     1be:	96 95       	lsr	r25
     1c0:	96 95       	lsr	r25
     1c2:	96 95       	lsr	r25
     1c4:	99 0f       	add	r25, r25
     1c6:	89 2f       	mov	r24, r25
     1c8:	88 0f       	add	r24, r24
     1ca:	88 0f       	add	r24, r24
     1cc:	98 0f       	add	r25, r24
     1ce:	8c 2f       	mov	r24, r28
     1d0:	89 1b       	sub	r24, r25
	SendData(out);
     1d2:	80 5d       	subi	r24, 0xD0	; 208
     1d4:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>
	if(score<10){
     1d8:	ca 30       	cpi	r28, 0x0A	; 10
     1da:	50 f1       	brcs	.+84     	; 0x230 <printscore+0x8c>
		return;
	}
	SetCursorPosition(xpos+1,1);
     1dc:	61 e0       	ldi	r22, 0x01	; 1
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	8d 0f       	add	r24, r29
     1e2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SetCursorPosition>
	out = (score%100)/10+48;
     1e6:	89 e2       	ldi	r24, 0x29	; 41
     1e8:	c8 9f       	mul	r28, r24
     1ea:	81 2d       	mov	r24, r1
     1ec:	11 24       	eor	r1, r1
     1ee:	82 95       	swap	r24
     1f0:	8f 70       	andi	r24, 0x0F	; 15
     1f2:	9c 2f       	mov	r25, r28
     1f4:	24 e6       	ldi	r18, 0x64	; 100
     1f6:	82 9f       	mul	r24, r18
     1f8:	90 19       	sub	r25, r0
     1fa:	11 24       	eor	r1, r1
     1fc:	89 2f       	mov	r24, r25
     1fe:	9d ec       	ldi	r25, 0xCD	; 205
     200:	89 9f       	mul	r24, r25
     202:	81 2d       	mov	r24, r1
     204:	11 24       	eor	r1, r1
     206:	86 95       	lsr	r24
     208:	86 95       	lsr	r24
     20a:	86 95       	lsr	r24
	SendData(out);
     20c:	80 5d       	subi	r24, 0xD0	; 208
     20e:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>
	if(score<100){
     212:	c4 36       	cpi	r28, 0x64	; 100
     214:	68 f0       	brcs	.+26     	; 0x230 <printscore+0x8c>
		return;
	}
	SetCursorPosition(xpos,1);
     216:	61 e0       	ldi	r22, 0x01	; 1
     218:	8d 2f       	mov	r24, r29
     21a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SetCursorPosition>
	out = score/100+48;
     21e:	89 e2       	ldi	r24, 0x29	; 41
     220:	c8 9f       	mul	r28, r24
     222:	81 2d       	mov	r24, r1
     224:	11 24       	eor	r1, r1
     226:	82 95       	swap	r24
     228:	8f 70       	andi	r24, 0x0F	; 15
	SendData(out);
     22a:	80 5d       	subi	r24, 0xD0	; 208
     22c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>
}
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <UpdateBoard>:
	player[0].score = 0;
	player[1].score = 0;
}

void UpdateBoard(struct Player *player,struct Ball *ball)
{
     236:	8f 92       	push	r8
     238:	9f 92       	push	r9
     23a:	af 92       	push	r10
     23c:	bf 92       	push	r11
     23e:	cf 92       	push	r12
     240:	df 92       	push	r13
     242:	ef 92       	push	r14
     244:	ff 92       	push	r15
     246:	0f 93       	push	r16
     248:	1f 93       	push	r17
     24a:	cf 93       	push	r28
     24c:	df 93       	push	r29
     24e:	ec 01       	movw	r28, r24
     250:	8b 01       	movw	r16, r22
	SendCommand(0x01);
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     258:	8f ed       	ldi	r24, 0xDF	; 223
     25a:	9e e2       	ldi	r25, 0x2E	; 46
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <UpdateBoard+0x26>
     260:	00 c0       	rjmp	.+0      	; 0x262 <UpdateBoard+0x2c>
     262:	00 00       	nop
	_delay_ms(3);
	SendCommand(0x02);
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
	printscore(player[0].score,3);
     26a:	8a 85       	ldd	r24, Y+10	; 0x0a
     26c:	63 e0       	ldi	r22, 0x03	; 3
     26e:	70 e0       	ldi	r23, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <printscore>
	printscore(player[1].score,16);
     276:	8d 89       	ldd	r24, Y+21	; 0x15
     278:	60 e1       	ldi	r22, 0x10	; 16
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <printscore>
	SetCursorPosition(round(ball[0].xPos),round(ball[0].yPos));
     282:	f8 01       	movw	r30, r16
     284:	64 81       	ldd	r22, Z+4	; 0x04
     286:	75 81       	ldd	r23, Z+5	; 0x05
     288:	86 81       	ldd	r24, Z+6	; 0x06
     28a:	97 81       	ldd	r25, Z+7	; 0x07
     28c:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     290:	4b 01       	movw	r8, r22
     292:	5c 01       	movw	r10, r24
     294:	f8 01       	movw	r30, r16
     296:	60 81       	ld	r22, Z
     298:	71 81       	ldd	r23, Z+1	; 0x01
     29a:	82 81       	ldd	r24, Z+2	; 0x02
     29c:	93 81       	ldd	r25, Z+3	; 0x03
     29e:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     2a2:	6b 01       	movw	r12, r22
     2a4:	7c 01       	movw	r14, r24
     2a6:	c5 01       	movw	r24, r10
     2a8:	b4 01       	movw	r22, r8
     2aa:	0e 94 3d 08 	call	0x107a	; 0x107a <__fixunssfsi>
     2ae:	16 2f       	mov	r17, r22
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	0e 94 3d 08 	call	0x107a	; 0x107a <__fixunssfsi>
     2b8:	86 2f       	mov	r24, r22
     2ba:	61 2f       	mov	r22, r17
     2bc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SetCursorPosition>
	SendData('o');
     2c0:	8f e6       	ldi	r24, 0x6F	; 111
     2c2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>
	SetCursorPosition((int)(player[0].xPos+2), round(player[0].yPos));
     2c6:	6e 81       	ldd	r22, Y+6	; 0x06
     2c8:	7f 81       	ldd	r23, Y+7	; 0x07
     2ca:	88 85       	ldd	r24, Y+8	; 0x08
     2cc:	99 85       	ldd	r25, Y+9	; 0x09
     2ce:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     2d2:	6b 01       	movw	r12, r22
     2d4:	7c 01       	movw	r14, r24
     2d6:	6a 81       	ldd	r22, Y+2	; 0x02
     2d8:	7b 81       	ldd	r23, Y+3	; 0x03
     2da:	8c 81       	ldd	r24, Y+4	; 0x04
     2dc:	9d 81       	ldd	r25, Y+5	; 0x05
     2de:	20 e0       	ldi	r18, 0x00	; 0
     2e0:	30 e0       	ldi	r19, 0x00	; 0
     2e2:	40 e0       	ldi	r20, 0x00	; 0
     2e4:	50 e4       	ldi	r21, 0x40	; 64
     2e6:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     2ea:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
     2ee:	16 2f       	mov	r17, r22
     2f0:	c7 01       	movw	r24, r14
     2f2:	b6 01       	movw	r22, r12
     2f4:	0e 94 3d 08 	call	0x107a	; 0x107a <__fixunssfsi>
     2f8:	81 2f       	mov	r24, r17
     2fa:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SetCursorPosition>
	SendData(0x7C);
     2fe:	8c e7       	ldi	r24, 0x7C	; 124
     300:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>
	SetCursorPosition((int)((player[0].xPos)+2), round((player[0].yPos) + 1));
     304:	6e 81       	ldd	r22, Y+6	; 0x06
     306:	7f 81       	ldd	r23, Y+7	; 0x07
     308:	88 85       	ldd	r24, Y+8	; 0x08
     30a:	99 85       	ldd	r25, Y+9	; 0x09
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e8       	ldi	r20, 0x80	; 128
     312:	5f e3       	ldi	r21, 0x3F	; 63
     314:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     318:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     31c:	6b 01       	movw	r12, r22
     31e:	7c 01       	movw	r14, r24
     320:	6a 81       	ldd	r22, Y+2	; 0x02
     322:	7b 81       	ldd	r23, Y+3	; 0x03
     324:	8c 81       	ldd	r24, Y+4	; 0x04
     326:	9d 81       	ldd	r25, Y+5	; 0x05
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	40 e0       	ldi	r20, 0x00	; 0
     32e:	50 e4       	ldi	r21, 0x40	; 64
     330:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     334:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
     338:	16 2f       	mov	r17, r22
     33a:	c7 01       	movw	r24, r14
     33c:	b6 01       	movw	r22, r12
     33e:	0e 94 3d 08 	call	0x107a	; 0x107a <__fixunssfsi>
     342:	81 2f       	mov	r24, r17
     344:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SetCursorPosition>
	SendData(0x7C);
     348:	8c e7       	ldi	r24, 0x7C	; 124
     34a:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>
	SetCursorPosition((int)(player[1].xPos+2), round(player[1].yPos));
     34e:	69 89       	ldd	r22, Y+17	; 0x11
     350:	7a 89       	ldd	r23, Y+18	; 0x12
     352:	8b 89       	ldd	r24, Y+19	; 0x13
     354:	9c 89       	ldd	r25, Y+20	; 0x14
     356:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     35a:	6b 01       	movw	r12, r22
     35c:	7c 01       	movw	r14, r24
     35e:	6d 85       	ldd	r22, Y+13	; 0x0d
     360:	7e 85       	ldd	r23, Y+14	; 0x0e
     362:	8f 85       	ldd	r24, Y+15	; 0x0f
     364:	98 89       	ldd	r25, Y+16	; 0x10
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	50 e4       	ldi	r21, 0x40	; 64
     36e:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     372:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
     376:	16 2f       	mov	r17, r22
     378:	c7 01       	movw	r24, r14
     37a:	b6 01       	movw	r22, r12
     37c:	0e 94 3d 08 	call	0x107a	; 0x107a <__fixunssfsi>
     380:	81 2f       	mov	r24, r17
     382:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SetCursorPosition>
	SendData(0x7C);
     386:	8c e7       	ldi	r24, 0x7C	; 124
     388:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>
	SetCursorPosition((int)(player[1].xPos+2), round((player[1].yPos) + 1));
     38c:	69 89       	ldd	r22, Y+17	; 0x11
     38e:	7a 89       	ldd	r23, Y+18	; 0x12
     390:	8b 89       	ldd	r24, Y+19	; 0x13
     392:	9c 89       	ldd	r25, Y+20	; 0x14
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	40 e8       	ldi	r20, 0x80	; 128
     39a:	5f e3       	ldi	r21, 0x3F	; 63
     39c:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     3a0:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     3a4:	6b 01       	movw	r12, r22
     3a6:	7c 01       	movw	r14, r24
     3a8:	6d 85       	ldd	r22, Y+13	; 0x0d
     3aa:	7e 85       	ldd	r23, Y+14	; 0x0e
     3ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     3ae:	98 89       	ldd	r25, Y+16	; 0x10
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e4       	ldi	r21, 0x40	; 64
     3b8:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     3bc:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
     3c0:	c6 2f       	mov	r28, r22
     3c2:	c7 01       	movw	r24, r14
     3c4:	b6 01       	movw	r22, r12
     3c6:	0e 94 3d 08 	call	0x107a	; 0x107a <__fixunssfsi>
     3ca:	8c 2f       	mov	r24, r28
     3cc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <SetCursorPosition>
	SendData(0x7C);
     3d0:	8c e7       	ldi	r24, 0x7C	; 124
     3d2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>

	//SetCursorPosition(ball[0].xPos,ball[0].yPos);
	//SendData(0x01);
}
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	0f 91       	pop	r16
     3de:	ff 90       	pop	r15
     3e0:	ef 90       	pop	r14
     3e2:	df 90       	pop	r13
     3e4:	cf 90       	pop	r12
     3e6:	bf 90       	pop	r11
     3e8:	af 90       	pop	r10
     3ea:	9f 90       	pop	r9
     3ec:	8f 90       	pop	r8
     3ee:	08 95       	ret

000003f0 <DetectUpdateScore>:
	}
	SetCursorPosition(xpos,1);
	out = score/100+48;
	SendData(out);
}
DetectUpdateScore(struct Player *player,struct Ball *ball, char *resetDeltaTime){
     3f0:	ef 92       	push	r14
     3f2:	ff 92       	push	r15
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	8c 01       	movw	r16, r24
     3fe:	eb 01       	movw	r28, r22
     400:	7a 01       	movw	r14, r20
	if((ball[0].xPos <= 1) && (ball[0].xVel < 0)){
     402:	68 81       	ld	r22, Y
     404:	79 81       	ldd	r23, Y+1	; 0x01
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	9b 81       	ldd	r25, Y+3	; 0x03
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e8       	ldi	r20, 0x80	; 128
     410:	5f e3       	ldi	r21, 0x3F	; 63
     412:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__cmpsf2>
     416:	18 16       	cp	r1, r24
     418:	1c f1       	brlt	.+70     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     41a:	88 85       	ldd	r24, Y+8	; 0x08
     41c:	88 23       	and	r24, r24
     41e:	04 f5       	brge	.+64     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
		player[1].score+=1;
     420:	f8 01       	movw	r30, r16
     422:	85 89       	ldd	r24, Z+21	; 0x15
     424:	8f 5f       	subi	r24, 0xFF	; 255
     426:	85 8b       	std	Z+21, r24	; 0x15
		ball[0].xPos +=10; 
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 e2       	ldi	r20, 0x20	; 32
     42e:	51 e4       	ldi	r21, 0x41	; 65
     430:	68 81       	ld	r22, Y
     432:	79 81       	ldd	r23, Y+1	; 0x01
     434:	8a 81       	ldd	r24, Y+2	; 0x02
     436:	9b 81       	ldd	r25, Y+3	; 0x03
     438:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     43c:	68 83       	st	Y, r22
     43e:	79 83       	std	Y+1, r23	; 0x01
     440:	8a 83       	std	Y+2, r24	; 0x02
     442:	9b 83       	std	Y+3, r25	; 0x03
		score_sound();
     444:	0e 94 16 07 	call	0xe2c	; 0xe2c <score_sound>
     448:	ff ef       	ldi	r31, 0xFF	; 255
     44a:	2b e7       	ldi	r18, 0x7B	; 123
     44c:	82 e9       	ldi	r24, 0x92	; 146
     44e:	f1 50       	subi	r31, 0x01	; 1
     450:	20 40       	sbci	r18, 0x00	; 0
     452:	80 40       	sbci	r24, 0x00	; 0
     454:	e1 f7       	brne	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     458:	00 00       	nop
		_delay_ms(3000);
		*resetDeltaTime = 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	f7 01       	movw	r30, r14
     45e:	80 83       	st	Z, r24
		
	}
	if((ball[0].xPos >= 20) && (ball[0].xVel > 0)){
     460:	68 81       	ld	r22, Y
     462:	79 81       	ldd	r23, Y+1	; 0x01
     464:	8a 81       	ldd	r24, Y+2	; 0x02
     466:	9b 81       	ldd	r25, Y+3	; 0x03
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	40 ea       	ldi	r20, 0xA0	; 160
     46e:	51 e4       	ldi	r21, 0x41	; 65
     470:	0e 94 1e 09 	call	0x123c	; 0x123c <__gesf2>
     474:	88 23       	and	r24, r24
     476:	1c f1       	brlt	.+70     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
     478:	88 85       	ldd	r24, Y+8	; 0x08
     47a:	18 16       	cp	r1, r24
     47c:	04 f5       	brge	.+64     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		player[0].score+=1;
     47e:	f8 01       	movw	r30, r16
     480:	82 85       	ldd	r24, Z+10	; 0x0a
     482:	8f 5f       	subi	r24, 0xFF	; 255
     484:	82 87       	std	Z+10, r24	; 0x0a
		ball[0].xPos -=10;
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	40 e2       	ldi	r20, 0x20	; 32
     48c:	51 e4       	ldi	r21, 0x41	; 65
     48e:	68 81       	ld	r22, Y
     490:	79 81       	ldd	r23, Y+1	; 0x01
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	9b 81       	ldd	r25, Y+3	; 0x03
     496:	0e 94 52 07 	call	0xea4	; 0xea4 <__subsf3>
     49a:	68 83       	st	Y, r22
     49c:	79 83       	std	Y+1, r23	; 0x01
     49e:	8a 83       	std	Y+2, r24	; 0x02
     4a0:	9b 83       	std	Y+3, r25	; 0x03
		score_sound();
     4a2:	0e 94 16 07 	call	0xe2c	; 0xe2c <score_sound>
     4a6:	ff ef       	ldi	r31, 0xFF	; 255
     4a8:	21 e1       	ldi	r18, 0x11	; 17
     4aa:	8a e7       	ldi	r24, 0x7A	; 122
     4ac:	f1 50       	subi	r31, 0x01	; 1
     4ae:	20 40       	sbci	r18, 0x00	; 0
     4b0:	80 40       	sbci	r24, 0x00	; 0
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b6:	00 00       	nop
		_delay_ms(2500);
		*resetDeltaTime = 1;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	f7 01       	movw	r30, r14
     4bc:	80 83       	st	Z, r24
	}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	08 95       	ret

000004cc <init_ball>:
#define ymax 4
#define xmin 1
#define ymin 1

#define BALL_SPEED 5
void init_ball(struct Ball *ball, unsigned char xpos, unsigned char ypos, signed char xvel,signed char yvel){
     4cc:	ff 92       	push	r15
     4ce:	0f 93       	push	r16
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
     4d8:	14 2f       	mov	r17, r20
     4da:	f2 2e       	mov	r15, r18
	ball[0].xPos = xpos;
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__floatunsisf>
     4e6:	68 83       	st	Y, r22
     4e8:	79 83       	std	Y+1, r23	; 0x01
     4ea:	8a 83       	std	Y+2, r24	; 0x02
     4ec:	9b 83       	std	Y+3, r25	; 0x03
	ball[0].yPos = ypos;
     4ee:	61 2f       	mov	r22, r17
     4f0:	70 e0       	ldi	r23, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__floatunsisf>
     4fa:	6c 83       	std	Y+4, r22	; 0x04
     4fc:	7d 83       	std	Y+5, r23	; 0x05
     4fe:	8e 83       	std	Y+6, r24	; 0x06
     500:	9f 83       	std	Y+7, r25	; 0x07
	ball[0].xVel = xvel;
     502:	f8 86       	std	Y+8, r15	; 0x08
	ball[0].yVel = yvel;
     504:	09 87       	std	Y+9, r16	; 0x09
}
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	08 95       	ret

00000512 <UpdateBallVel>:
void UpdateBallPosVel(struct Ball *ball, float deltaTime){
	UpdateBallVel(ball);
	ball[0].xPos +=(ball[0].xVel * deltaTime * BALL_SPEED);
	ball[0].yPos +=(ball[0].yVel * deltaTime * BALL_SPEED);
}
void UpdateBallVel(struct Ball *ball){
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	ec 01       	movw	r28, r24
		//Play_speaker(440,500);
	}
	if ((ball[0].xPos >= xmax) && (ball[0].xVel>0)){
		//Play_speaker(440,500);
	}
	if ((ball[0].yPos <= ymin) && (ball[0].yVel<0)){
     518:	6c 81       	ldd	r22, Y+4	; 0x04
     51a:	7d 81       	ldd	r23, Y+5	; 0x05
     51c:	8e 81       	ldd	r24, Y+6	; 0x06
     51e:	9f 81       	ldd	r25, Y+7	; 0x07
     520:	20 e0       	ldi	r18, 0x00	; 0
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	40 e8       	ldi	r20, 0x80	; 128
     526:	5f e3       	ldi	r21, 0x3F	; 63
     528:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__cmpsf2>
     52c:	18 16       	cp	r1, r24
     52e:	3c f0       	brlt	.+14     	; 0x53e <UpdateBallVel+0x2c>
     530:	89 85       	ldd	r24, Y+9	; 0x09
     532:	88 23       	and	r24, r24
     534:	24 f4       	brge	.+8      	; 0x53e <UpdateBallVel+0x2c>
		ball[0].yVel = -1*ball[0].yVel;
     536:	81 95       	neg	r24
     538:	89 87       	std	Y+9, r24	; 0x09
		bounce_sound();
     53a:	0e 94 44 07 	call	0xe88	; 0xe88 <bounce_sound>
	}
	if ((ball[0].yPos >= ymax) && (ball[0].yVel>0)){
     53e:	6c 81       	ldd	r22, Y+4	; 0x04
     540:	7d 81       	ldd	r23, Y+5	; 0x05
     542:	8e 81       	ldd	r24, Y+6	; 0x06
     544:	9f 81       	ldd	r25, Y+7	; 0x07
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e8       	ldi	r20, 0x80	; 128
     54c:	50 e4       	ldi	r21, 0x40	; 64
     54e:	0e 94 1e 09 	call	0x123c	; 0x123c <__gesf2>
     552:	88 23       	and	r24, r24
     554:	3c f0       	brlt	.+14     	; 0x564 <UpdateBallVel+0x52>
     556:	89 85       	ldd	r24, Y+9	; 0x09
     558:	18 16       	cp	r1, r24
     55a:	24 f4       	brge	.+8      	; 0x564 <UpdateBallVel+0x52>
		ball[0].yVel = -1*ball[0].yVel;
     55c:	81 95       	neg	r24
     55e:	89 87       	std	Y+9, r24	; 0x09
		bounce_sound();
     560:	0e 94 44 07 	call	0xe88	; 0xe88 <bounce_sound>
	}
}
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <UpdateBallPosVel>:
	ball[0].xPos = xpos;
	ball[0].yPos = ypos;
	ball[0].xVel = xvel;
	ball[0].yVel = yvel;
}
void UpdateBallPosVel(struct Ball *ball, float deltaTime){
     56a:	cf 92       	push	r12
     56c:	df 92       	push	r13
     56e:	ef 92       	push	r14
     570:	ff 92       	push	r15
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	ec 01       	movw	r28, r24
     578:	6a 01       	movw	r12, r20
     57a:	7b 01       	movw	r14, r22
	UpdateBallVel(ball);
     57c:	0e 94 89 02 	call	0x512	; 0x512 <UpdateBallVel>
	ball[0].xPos +=(ball[0].xVel * deltaTime * BALL_SPEED);
     580:	68 85       	ldd	r22, Y+8	; 0x08
     582:	06 2e       	mov	r0, r22
     584:	00 0c       	add	r0, r0
     586:	77 0b       	sbc	r23, r23
     588:	88 0b       	sbc	r24, r24
     58a:	99 0b       	sbc	r25, r25
     58c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__floatsisf>
     590:	a7 01       	movw	r20, r14
     592:	96 01       	movw	r18, r12
     594:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulsf3>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 ea       	ldi	r20, 0xA0	; 160
     59e:	50 e4       	ldi	r21, 0x40	; 64
     5a0:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulsf3>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	68 81       	ld	r22, Y
     5aa:	79 81       	ldd	r23, Y+1	; 0x01
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	9b 81       	ldd	r25, Y+3	; 0x03
     5b0:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     5b4:	68 83       	st	Y, r22
     5b6:	79 83       	std	Y+1, r23	; 0x01
     5b8:	8a 83       	std	Y+2, r24	; 0x02
     5ba:	9b 83       	std	Y+3, r25	; 0x03
	ball[0].yPos +=(ball[0].yVel * deltaTime * BALL_SPEED);
     5bc:	69 85       	ldd	r22, Y+9	; 0x09
     5be:	06 2e       	mov	r0, r22
     5c0:	00 0c       	add	r0, r0
     5c2:	77 0b       	sbc	r23, r23
     5c4:	88 0b       	sbc	r24, r24
     5c6:	99 0b       	sbc	r25, r25
     5c8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__floatsisf>
     5cc:	a7 01       	movw	r20, r14
     5ce:	96 01       	movw	r18, r12
     5d0:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulsf3>
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	40 ea       	ldi	r20, 0xA0	; 160
     5da:	50 e4       	ldi	r21, 0x40	; 64
     5dc:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulsf3>
     5e0:	9b 01       	movw	r18, r22
     5e2:	ac 01       	movw	r20, r24
     5e4:	6c 81       	ldd	r22, Y+4	; 0x04
     5e6:	7d 81       	ldd	r23, Y+5	; 0x05
     5e8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ea:	9f 81       	ldd	r25, Y+7	; 0x07
     5ec:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     5f0:	6c 83       	std	Y+4, r22	; 0x04
     5f2:	7d 83       	std	Y+5, r23	; 0x05
     5f4:	8e 83       	std	Y+6, r24	; 0x06
     5f6:	9f 83       	std	Y+7, r25	; 0x07
}
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	df 90       	pop	r13
     602:	cf 90       	pop	r12
     604:	08 95       	ret

00000606 <reflect_paddles>:
	if ((ball[0].yPos >= ymax) && (ball[0].yVel>0)){
		ball[0].yVel = -1*ball[0].yVel;
		bounce_sound();
	}
}
void reflect_paddles(float p1_x, float p1_y, float p2_x, float p2_y, struct Ball *ball){
     606:	4f 92       	push	r4
     608:	5f 92       	push	r5
     60a:	6f 92       	push	r6
     60c:	7f 92       	push	r7
     60e:	8f 92       	push	r8
     610:	9f 92       	push	r9
     612:	af 92       	push	r10
     614:	bf 92       	push	r11
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	28 97       	sbiw	r28, 0x08	; 8
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	e9 82       	std	Y+1, r14	; 0x01
     640:	fa 82       	std	Y+2, r15	; 0x02
     642:	0b 83       	std	Y+3, r16	; 0x03
     644:	1c 83       	std	Y+4, r17	; 0x04
	if(((ball[0].xPos <= p1_x + 4)&&(ball[0].xVel < 0)) && ((round(ball[0].yPos) >= round(p1_y)) && (round(ball[0].yPos) <= round(p1_y + 1))))
     646:	f4 01       	movw	r30, r8
     648:	40 80       	ld	r4, Z
     64a:	51 80       	ldd	r5, Z+1	; 0x01
     64c:	62 80       	ldd	r6, Z+2	; 0x02
     64e:	73 80       	ldd	r7, Z+3	; 0x03
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	40 e8       	ldi	r20, 0x80	; 128
     656:	50 e4       	ldi	r21, 0x40	; 64
     658:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     65c:	9b 01       	movw	r18, r22
     65e:	ac 01       	movw	r20, r24
     660:	c3 01       	movw	r24, r6
     662:	b2 01       	movw	r22, r4
     664:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__cmpsf2>
     668:	18 16       	cp	r1, r24
     66a:	9c f1       	brlt	.+102    	; 0x6d2 <reflect_paddles+0xcc>
     66c:	f4 01       	movw	r30, r8
     66e:	10 85       	ldd	r17, Z+8	; 0x08
     670:	11 23       	and	r17, r17
     672:	7c f5       	brge	.+94     	; 0x6d2 <reflect_paddles+0xcc>
     674:	64 81       	ldd	r22, Z+4	; 0x04
     676:	75 81       	ldd	r23, Z+5	; 0x05
     678:	86 81       	ldd	r24, Z+6	; 0x06
     67a:	97 81       	ldd	r25, Z+7	; 0x07
     67c:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     680:	2b 01       	movw	r4, r22
     682:	3c 01       	movw	r6, r24
     684:	6d 81       	ldd	r22, Y+5	; 0x05
     686:	7e 81       	ldd	r23, Y+6	; 0x06
     688:	8f 81       	ldd	r24, Y+7	; 0x07
     68a:	98 85       	ldd	r25, Y+8	; 0x08
     68c:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     690:	9b 01       	movw	r18, r22
     692:	ac 01       	movw	r20, r24
     694:	c3 01       	movw	r24, r6
     696:	b2 01       	movw	r22, r4
     698:	0e 94 1e 09 	call	0x123c	; 0x123c <__gesf2>
     69c:	88 23       	and	r24, r24
     69e:	cc f0       	brlt	.+50     	; 0x6d2 <reflect_paddles+0xcc>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 e8       	ldi	r20, 0x80	; 128
     6a6:	5f e3       	ldi	r21, 0x3F	; 63
     6a8:	6d 81       	ldd	r22, Y+5	; 0x05
     6aa:	7e 81       	ldd	r23, Y+6	; 0x06
     6ac:	8f 81       	ldd	r24, Y+7	; 0x07
     6ae:	98 85       	ldd	r25, Y+8	; 0x08
     6b0:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     6b4:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     6b8:	9b 01       	movw	r18, r22
     6ba:	ac 01       	movw	r20, r24
     6bc:	c3 01       	movw	r24, r6
     6be:	b2 01       	movw	r22, r4
     6c0:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__cmpsf2>
     6c4:	18 16       	cp	r1, r24
     6c6:	2c f0       	brlt	.+10     	; 0x6d2 <reflect_paddles+0xcc>
	{
		ball[0].xVel = -1 * ball[0].xVel;
     6c8:	11 95       	neg	r17
     6ca:	f4 01       	movw	r30, r8
     6cc:	10 87       	std	Z+8, r17	; 0x08
		paddle_sound();
     6ce:	0e 94 4b 07 	call	0xe96	; 0xe96 <paddle_sound>
	}
	if(((ball[0].xPos >= p2_x + 1)&&(ball[0].xVel > 0)) && ((round(ball[0].yPos) >= round(p2_y)) && (round(ball[0].yPos) <= round(p2_y + 1))))
     6d2:	f4 01       	movw	r30, r8
     6d4:	40 80       	ld	r4, Z
     6d6:	51 80       	ldd	r5, Z+1	; 0x01
     6d8:	62 80       	ldd	r6, Z+2	; 0x02
     6da:	73 80       	ldd	r7, Z+3	; 0x03
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	40 e8       	ldi	r20, 0x80	; 128
     6e2:	5f e3       	ldi	r21, 0x3F	; 63
     6e4:	69 81       	ldd	r22, Y+1	; 0x01
     6e6:	7a 81       	ldd	r23, Y+2	; 0x02
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	9c 81       	ldd	r25, Y+4	; 0x04
     6ec:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     6f0:	9b 01       	movw	r18, r22
     6f2:	ac 01       	movw	r20, r24
     6f4:	c3 01       	movw	r24, r6
     6f6:	b2 01       	movw	r22, r4
     6f8:	0e 94 1e 09 	call	0x123c	; 0x123c <__gesf2>
     6fc:	88 23       	and	r24, r24
     6fe:	7c f1       	brlt	.+94     	; 0x75e <reflect_paddles+0x158>
     700:	f4 01       	movw	r30, r8
     702:	10 85       	ldd	r17, Z+8	; 0x08
     704:	11 16       	cp	r1, r17
     706:	5c f5       	brge	.+86     	; 0x75e <reflect_paddles+0x158>
     708:	64 81       	ldd	r22, Z+4	; 0x04
     70a:	75 81       	ldd	r23, Z+5	; 0x05
     70c:	86 81       	ldd	r24, Z+6	; 0x06
     70e:	97 81       	ldd	r25, Z+7	; 0x07
     710:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     714:	2b 01       	movw	r4, r22
     716:	3c 01       	movw	r6, r24
     718:	c6 01       	movw	r24, r12
     71a:	b5 01       	movw	r22, r10
     71c:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     720:	9b 01       	movw	r18, r22
     722:	ac 01       	movw	r20, r24
     724:	c3 01       	movw	r24, r6
     726:	b2 01       	movw	r22, r4
     728:	0e 94 1e 09 	call	0x123c	; 0x123c <__gesf2>
     72c:	88 23       	and	r24, r24
     72e:	bc f0       	brlt	.+46     	; 0x75e <reflect_paddles+0x158>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e8       	ldi	r20, 0x80	; 128
     736:	5f e3       	ldi	r21, 0x3F	; 63
     738:	c6 01       	movw	r24, r12
     73a:	b5 01       	movw	r22, r10
     73c:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     740:	0e 94 90 09 	call	0x1320	; 0x1320 <round>
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	c3 01       	movw	r24, r6
     74a:	b2 01       	movw	r22, r4
     74c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <__cmpsf2>
     750:	18 16       	cp	r1, r24
     752:	2c f0       	brlt	.+10     	; 0x75e <reflect_paddles+0x158>
	{
		ball[0].xVel = -1 * ball[0].xVel;
     754:	11 95       	neg	r17
     756:	f4 01       	movw	r30, r8
     758:	10 87       	std	Z+8, r17	; 0x08
		paddle_sound();
     75a:	0e 94 4b 07 	call	0xe96	; 0xe96 <paddle_sound>
	}
	
     75e:	28 96       	adiw	r28, 0x08	; 8
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	f8 94       	cli
     764:	de bf       	out	0x3e, r29	; 62
     766:	0f be       	out	0x3f, r0	; 63
     768:	cd bf       	out	0x3d, r28	; 61
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	bf 90       	pop	r11
     77c:	af 90       	pop	r10
     77e:	9f 90       	pop	r9
     780:	8f 90       	pop	r8
     782:	7f 90       	pop	r7
     784:	6f 90       	pop	r6
     786:	5f 90       	pop	r5
     788:	4f 90       	pop	r4
     78a:	08 95       	ret

0000078c <InitInputs>:
#define PADDLE_VELOCITY 5

void InitInputs(struct Player *player)
{	
	//Initializing data direction register for button ports to be Inputs
	DDRC |= (0 << DDRC3);
     78c:	87 b1       	in	r24, 0x07	; 7
     78e:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC2);
     790:	87 b1       	in	r24, 0x07	; 7
     792:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC1);
     794:	87 b1       	in	r24, 0x07	; 7
     796:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC0);
     798:	87 b1       	in	r24, 0x07	; 7
     79a:	87 b9       	out	0x07, r24	; 7
	
	//Initializing ports of buttons to produce a signal enabling ()
	PORTC |= (1 << PORTC3);
     79c:	88 b1       	in	r24, 0x08	; 8
     79e:	88 60       	ori	r24, 0x08	; 8
     7a0:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC2);
     7a2:	88 b1       	in	r24, 0x08	; 8
     7a4:	84 60       	ori	r24, 0x04	; 4
     7a6:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC1);
     7a8:	88 b1       	in	r24, 0x08	; 8
     7aa:	82 60       	ori	r24, 0x02	; 2
     7ac:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC0);
     7ae:	88 b1       	in	r24, 0x08	; 8
     7b0:	81 60       	ori	r24, 0x01	; 1
     7b2:	88 b9       	out	0x08, r24	; 8
	
	//Initializing LED output (CAN BE DELETED AFTER DEBUG PHASE)
	DDRB |= (1 << DDRB5);
     7b4:	84 b1       	in	r24, 0x04	; 4
     7b6:	80 62       	ori	r24, 0x20	; 32
     7b8:	84 b9       	out	0x04, r24	; 4
     7ba:	08 95       	ret

000007bc <PollInputs>:
}

void PollInputs(struct Player *player)
{
     7bc:	fc 01       	movw	r30, r24
	//Poll for first button
	if (!(BUTTON_PORTS & FIRST_BUTTON_PIN_LOCATION))
     7be:	33 99       	sbic	0x06, 3	; 6
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <PollInputs+0xc>
	{
		player[0].downFlag = true;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	81 83       	std	Z+1, r24	; 0x01
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <PollInputs+0xe>
	}
	else
	{
		player[0].downFlag = false;
     7c8:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//Poll for second button
	if (!(BUTTON_PORTS & SECOND_BUTTON_PIN_LOCATION))
     7ca:	32 99       	sbic	0x06, 2	; 6
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <PollInputs+0x18>
	{
		player[0].upFlag = true;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	80 83       	st	Z, r24
     7d2:	01 c0       	rjmp	.+2      	; 0x7d6 <PollInputs+0x1a>
	}
	else
	{
		player[0].upFlag = false;
     7d4:	10 82       	st	Z, r1
	}
	
	//Poll for third button
	if (!(BUTTON_PORTS & THIRD_BUTTON_PIN_LOCATION))
     7d6:	31 99       	sbic	0x06, 1	; 6
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <PollInputs+0x24>
	{
		player[1].downFlag = true;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	84 87       	std	Z+12, r24	; 0x0c
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <PollInputs+0x26>
	}
	else
	{
		player[1].downFlag = false;
     7e0:	14 86       	std	Z+12, r1	; 0x0c
	}
	
	//Poll for fourth button
	if (!(BUTTON_PORTS & FOURTH_BUTTON_PIN_LOCATION))
     7e2:	30 99       	sbic	0x06, 0	; 6
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <PollInputs+0x30>
	{
		player[1].upFlag = true;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	83 87       	std	Z+11, r24	; 0x0b
     7ea:	08 95       	ret
	}
	else
	{
		player[1].upFlag = false;
     7ec:	13 86       	std	Z+11, r1	; 0x0b
     7ee:	08 95       	ret

000007f0 <CheckInputs>:
	}
}

void CheckInputs(struct Player *player)
{
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24

	//checking for double inputs
	if ((player[0].downFlag == true) && (player[0].upFlag == true))
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
     7f8:	88 23       	and	r24, r24
     7fa:	29 f0       	breq	.+10     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     7fc:	88 81       	ld	r24, Y
     7fe:	88 23       	and	r24, r24
     800:	11 f0       	breq	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		player[0].downFlag = false;
     802:	19 82       	std	Y+1, r1	; 0x01
		player[0].upFlag = false;
     804:	18 82       	st	Y, r1
	}
	if ((player[1].downFlag == true) && (player[1].upFlag == true))
     806:	8c 85       	ldd	r24, Y+12	; 0x0c
     808:	88 23       	and	r24, r24
     80a:	29 f0       	breq	.+10     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     80c:	8b 85       	ldd	r24, Y+11	; 0x0b
     80e:	88 23       	and	r24, r24
     810:	11 f0       	breq	.+4      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		player[1].downFlag = false;
     812:	1c 86       	std	Y+12, r1	; 0x0c
		player[1].upFlag = false;
     814:	1b 86       	std	Y+11, r1	; 0x0b
	}
	
	//Checking up flag boundaries
	if ((player[0].upFlag == true) && ((int)(player[0].yPos) <= 1))
     816:	88 81       	ld	r24, Y
     818:	88 23       	and	r24, r24
     81a:	51 f0       	breq	.+20     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     81c:	6e 81       	ldd	r22, Y+6	; 0x06
     81e:	7f 81       	ldd	r23, Y+7	; 0x07
     820:	88 85       	ldd	r24, Y+8	; 0x08
     822:	99 85       	ldd	r25, Y+9	; 0x09
     824:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
     828:	62 30       	cpi	r22, 0x02	; 2
     82a:	71 05       	cpc	r23, r1
     82c:	0c f4       	brge	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
	{
		player[0].upFlag = false;
     82e:	18 82       	st	Y, r1
	}
	if ((player[1].upFlag == true) && ((int)(player[1].yPos) <= 1))
     830:	8b 85       	ldd	r24, Y+11	; 0x0b
     832:	88 23       	and	r24, r24
     834:	51 f0       	breq	.+20     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     836:	69 89       	ldd	r22, Y+17	; 0x11
     838:	7a 89       	ldd	r23, Y+18	; 0x12
     83a:	8b 89       	ldd	r24, Y+19	; 0x13
     83c:	9c 89       	ldd	r25, Y+20	; 0x14
     83e:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
     842:	62 30       	cpi	r22, 0x02	; 2
     844:	71 05       	cpc	r23, r1
     846:	0c f4       	brge	.+2      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
	{
		player[1].upFlag = false;
     848:	1b 86       	std	Y+11, r1	; 0x0b
	}
	
	//Checking down flag boundaries
	if ((player[0].downFlag == true) && ((int)(player[0].yPos) >= 3))
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 23       	and	r24, r24
     84e:	51 f0       	breq	.+20     	; 0x864 <__DATA_REGION_LENGTH__+0x64>
     850:	6e 81       	ldd	r22, Y+6	; 0x06
     852:	7f 81       	ldd	r23, Y+7	; 0x07
     854:	88 85       	ldd	r24, Y+8	; 0x08
     856:	99 85       	ldd	r25, Y+9	; 0x09
     858:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
     85c:	63 30       	cpi	r22, 0x03	; 3
     85e:	71 05       	cpc	r23, r1
     860:	0c f0       	brlt	.+2      	; 0x864 <__DATA_REGION_LENGTH__+0x64>
	{
		player[0].downFlag = false;
     862:	19 82       	std	Y+1, r1	; 0x01
	}
	if ((player[1].downFlag == true) && ((int)(player[1].yPos) >= 3))
     864:	8c 85       	ldd	r24, Y+12	; 0x0c
     866:	88 23       	and	r24, r24
     868:	51 f0       	breq	.+20     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     86a:	69 89       	ldd	r22, Y+17	; 0x11
     86c:	7a 89       	ldd	r23, Y+18	; 0x12
     86e:	8b 89       	ldd	r24, Y+19	; 0x13
     870:	9c 89       	ldd	r25, Y+20	; 0x14
     872:	0e 94 36 08 	call	0x106c	; 0x106c <__fixsfsi>
     876:	63 30       	cpi	r22, 0x03	; 3
     878:	71 05       	cpc	r23, r1
     87a:	0c f0       	brlt	.+2      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
	{
		player[1].downFlag = false;
     87c:	1c 86       	std	Y+12, r1	; 0x0c
	}
}
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <ExecuteInputs>:

void ExecuteInputs(struct Player *player, float deltaTime)
{
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
     892:	6a 01       	movw	r12, r20
     894:	7b 01       	movw	r14, r22
	if (player[0].upFlag)
     896:	88 81       	ld	r24, Y
     898:	88 23       	and	r24, r24
     89a:	a1 f0       	breq	.+40     	; 0x8c4 <ExecuteInputs+0x40>
	{	
		player[0].yPos -= PADDLE_VELOCITY * deltaTime;
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 ea       	ldi	r20, 0xA0	; 160
     8a2:	50 e4       	ldi	r21, 0x40	; 64
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulsf3>
     8ac:	9b 01       	movw	r18, r22
     8ae:	ac 01       	movw	r20, r24
     8b0:	6e 81       	ldd	r22, Y+6	; 0x06
     8b2:	7f 81       	ldd	r23, Y+7	; 0x07
     8b4:	88 85       	ldd	r24, Y+8	; 0x08
     8b6:	99 85       	ldd	r25, Y+9	; 0x09
     8b8:	0e 94 52 07 	call	0xea4	; 0xea4 <__subsf3>
     8bc:	6e 83       	std	Y+6, r22	; 0x06
     8be:	7f 83       	std	Y+7, r23	; 0x07
     8c0:	88 87       	std	Y+8, r24	; 0x08
     8c2:	99 87       	std	Y+9, r25	; 0x09
	}
	if (player[0].downFlag)
     8c4:	89 81       	ldd	r24, Y+1	; 0x01
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f0       	breq	.+40     	; 0x8f2 <ExecuteInputs+0x6e>
	{
		player[0].yPos += PADDLE_VELOCITY * deltaTime;
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 ea       	ldi	r20, 0xA0	; 160
     8d0:	50 e4       	ldi	r21, 0x40	; 64
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulsf3>
     8da:	9b 01       	movw	r18, r22
     8dc:	ac 01       	movw	r20, r24
     8de:	6e 81       	ldd	r22, Y+6	; 0x06
     8e0:	7f 81       	ldd	r23, Y+7	; 0x07
     8e2:	88 85       	ldd	r24, Y+8	; 0x08
     8e4:	99 85       	ldd	r25, Y+9	; 0x09
     8e6:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     8ea:	6e 83       	std	Y+6, r22	; 0x06
     8ec:	7f 83       	std	Y+7, r23	; 0x07
     8ee:	88 87       	std	Y+8, r24	; 0x08
     8f0:	99 87       	std	Y+9, r25	; 0x09
	}
	if (player[1].upFlag)
     8f2:	8b 85       	ldd	r24, Y+11	; 0x0b
     8f4:	88 23       	and	r24, r24
     8f6:	a1 f0       	breq	.+40     	; 0x920 <__stack+0x21>
	{
		player[1].yPos -= PADDLE_VELOCITY * deltaTime;
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	40 ea       	ldi	r20, 0xA0	; 160
     8fe:	50 e4       	ldi	r21, 0x40	; 64
     900:	c7 01       	movw	r24, r14
     902:	b6 01       	movw	r22, r12
     904:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulsf3>
     908:	9b 01       	movw	r18, r22
     90a:	ac 01       	movw	r20, r24
     90c:	69 89       	ldd	r22, Y+17	; 0x11
     90e:	7a 89       	ldd	r23, Y+18	; 0x12
     910:	8b 89       	ldd	r24, Y+19	; 0x13
     912:	9c 89       	ldd	r25, Y+20	; 0x14
     914:	0e 94 52 07 	call	0xea4	; 0xea4 <__subsf3>
     918:	69 8b       	std	Y+17, r22	; 0x11
     91a:	7a 8b       	std	Y+18, r23	; 0x12
     91c:	8b 8b       	std	Y+19, r24	; 0x13
     91e:	9c 8b       	std	Y+20, r25	; 0x14
	}
	if (player[1].downFlag)
     920:	8c 85       	ldd	r24, Y+12	; 0x0c
     922:	88 23       	and	r24, r24
     924:	a1 f0       	breq	.+40     	; 0x94e <__stack+0x4f>
	{
		player[1].yPos += PADDLE_VELOCITY * deltaTime;
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 ea       	ldi	r20, 0xA0	; 160
     92c:	50 e4       	ldi	r21, 0x40	; 64
     92e:	c7 01       	movw	r24, r14
     930:	b6 01       	movw	r22, r12
     932:	0e 94 23 09 	call	0x1246	; 0x1246 <__mulsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	69 89       	ldd	r22, Y+17	; 0x11
     93c:	7a 89       	ldd	r23, Y+18	; 0x12
     93e:	8b 89       	ldd	r24, Y+19	; 0x13
     940:	9c 89       	ldd	r25, Y+20	; 0x14
     942:	0e 94 53 07 	call	0xea6	; 0xea6 <__addsf3>
     946:	69 8b       	std	Y+17, r22	; 0x11
     948:	7a 8b       	std	Y+18, r23	; 0x12
     94a:	8b 8b       	std	Y+19, r24	; 0x13
     94c:	9c 8b       	std	Y+20, r25	; 0x14
	}
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	08 95       	ret

0000095c <BeginTransmisson>:
     95c:	84 ea       	ldi	r24, 0xA4	; 164
     95e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     962:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     966:	88 23       	and	r24, r24
     968:	e4 f7       	brge	.-8      	; 0x962 <BeginTransmisson+0x6>
     96a:	8e e4       	ldi	r24, 0x4E	; 78
     96c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     970:	84 e8       	ldi	r24, 0x84	; 132
     972:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     976:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     97a:	88 23       	and	r24, r24
     97c:	e4 f7       	brge	.-8      	; 0x976 <BeginTransmisson+0x1a>
     97e:	08 95       	ret

00000980 <EndTransmisson>:
     980:	84 e9       	ldi	r24, 0x94	; 148
     982:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     986:	8f e8       	ldi	r24, 0x8F	; 143
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	f1 f7       	brne	.-4      	; 0x98a <EndTransmisson+0xa>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <EndTransmisson+0x10>
     990:	00 00       	nop
     992:	08 95       	ret

00000994 <ExpanderWrite>:
     994:	cf 93       	push	r28
     996:	c8 2f       	mov	r28, r24
     998:	87 e2       	ldi	r24, 0x27	; 39
     99a:	0e 94 ae 04 	call	0x95c	; 0x95c <BeginTransmisson>
     99e:	c8 60       	ori	r28, 0x08	; 8
     9a0:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     9a4:	84 e8       	ldi	r24, 0x84	; 132
     9a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     9ae:	88 23       	and	r24, r24
     9b0:	e4 f7       	brge	.-8      	; 0x9aa <ExpanderWrite+0x16>
     9b2:	0e 94 c0 04 	call	0x980	; 0x980 <EndTransmisson>
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <PulseEnable>:
     9ba:	cf 93       	push	r28
     9bc:	c8 2f       	mov	r28, r24
     9be:	84 60       	ori	r24, 0x04	; 4
     9c0:	0e 94 ca 04 	call	0x994	; 0x994 <ExpanderWrite>
     9c4:	85 e0       	ldi	r24, 0x05	; 5
     9c6:	8a 95       	dec	r24
     9c8:	f1 f7       	brne	.-4      	; 0x9c6 <PulseEnable+0xc>
     9ca:	00 00       	nop
     9cc:	8c 2f       	mov	r24, r28
     9ce:	8b 7f       	andi	r24, 0xFB	; 251
     9d0:	0e 94 ca 04 	call	0x994	; 0x994 <ExpanderWrite>
     9d4:	87 ec       	ldi	r24, 0xC7	; 199
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <PulseEnable+0x1e>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <PulseEnable+0x24>
     9de:	00 00       	nop
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <Write4Bits>:
     9e4:	cf 93       	push	r28
     9e6:	c8 2f       	mov	r28, r24
     9e8:	0e 94 ca 04 	call	0x994	; 0x994 <ExpanderWrite>
     9ec:	8c 2f       	mov	r24, r28
     9ee:	0e 94 dd 04 	call	0x9ba	; 0x9ba <PulseEnable>
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <SendCommand>:
     9f6:	cf 93       	push	r28
     9f8:	c8 2f       	mov	r28, r24
     9fa:	80 7f       	andi	r24, 0xF0	; 240
     9fc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Write4Bits>
     a00:	8c 2f       	mov	r24, r28
     a02:	82 95       	swap	r24
     a04:	80 7f       	andi	r24, 0xF0	; 240
     a06:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Write4Bits>
     a0a:	8f e9       	ldi	r24, 0x9F	; 159
     a0c:	9f e0       	ldi	r25, 0x0F	; 15
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <SendCommand+0x18>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <SendCommand+0x1e>
     a14:	00 00       	nop
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <SendData>:
     a1a:	cf 93       	push	r28
     a1c:	c8 2f       	mov	r28, r24
     a1e:	80 7f       	andi	r24, 0xF0	; 240
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Write4Bits>
     a26:	20 e1       	ldi	r18, 0x10	; 16
     a28:	c2 9f       	mul	r28, r18
     a2a:	c0 01       	movw	r24, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	81 60       	ori	r24, 0x01	; 1
     a30:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Write4Bits>
     a34:	8f e9       	ldi	r24, 0x9F	; 159
     a36:	9f e0       	ldi	r25, 0x0F	; 15
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	f1 f7       	brne	.-4      	; 0xa38 <SendData+0x1e>
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <SendData+0x24>
     a3e:	00 00       	nop
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <CreateCustomChar>:
     a44:	ff 92       	push	r15
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	f8 2e       	mov	r15, r24
     a50:	8b 01       	movw	r16, r22
     a52:	c0 e0       	ldi	r28, 0x00	; 0
     a54:	d0 e0       	ldi	r29, 0x00	; 0
     a56:	11 c0       	rjmp	.+34     	; 0xa7a <CreateCustomChar+0x36>
     a58:	8f 2d       	mov	r24, r15
     a5a:	87 70       	andi	r24, 0x07	; 7
     a5c:	88 0f       	add	r24, r24
     a5e:	88 0f       	add	r24, r24
     a60:	88 0f       	add	r24, r24
     a62:	8c 0f       	add	r24, r28
     a64:	80 64       	ori	r24, 0x40	; 64
     a66:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
     a6a:	f8 01       	movw	r30, r16
     a6c:	ec 0f       	add	r30, r28
     a6e:	fd 1f       	adc	r31, r29
     a70:	80 81       	ld	r24, Z
     a72:	8f 71       	andi	r24, 0x1F	; 31
     a74:	0e 94 0d 05 	call	0xa1a	; 0xa1a <SendData>
     a78:	21 96       	adiw	r28, 0x01	; 1
     a7a:	c8 30       	cpi	r28, 0x08	; 8
     a7c:	d1 05       	cpc	r29, r1
     a7e:	64 f3       	brlt	.-40     	; 0xa58 <CreateCustomChar+0x14>
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	08 95       	ret

00000a8c <InitLCD>:
     a8c:	87 b1       	in	r24, 0x07	; 7
     a8e:	87 b9       	out	0x07, r24	; 7
     a90:	87 b1       	in	r24, 0x07	; 7
     a92:	87 b9       	out	0x07, r24	; 7
     a94:	88 b1       	in	r24, 0x08	; 8
     a96:	80 61       	ori	r24, 0x10	; 16
     a98:	88 b9       	out	0x08, r24	; 8
     a9a:	88 b1       	in	r24, 0x08	; 8
     a9c:	80 62       	ori	r24, 0x20	; 32
     a9e:	88 b9       	out	0x08, r24	; 8
     aa0:	88 e4       	ldi	r24, 0x48	; 72
     aa2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     aa6:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     aaa:	84 e0       	ldi	r24, 0x04	; 4
     aac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	0e 94 ca 04 	call	0x994	; 0x994 <ExpanderWrite>
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Write4Bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     abc:	8f e4       	ldi	r24, 0x4F	; 79
     abe:	96 e4       	ldi	r25, 0x46	; 70
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	f1 f7       	brne	.-4      	; 0xac0 <InitLCD+0x34>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <InitLCD+0x3a>
     ac6:	00 00       	nop
     ac8:	83 e0       	ldi	r24, 0x03	; 3
     aca:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Write4Bits>
     ace:	8f e4       	ldi	r24, 0x4F	; 79
     ad0:	96 e4       	ldi	r25, 0x46	; 70
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <InitLCD+0x46>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <InitLCD+0x4c>
     ad8:	00 00       	nop
     ada:	83 e0       	ldi	r24, 0x03	; 3
     adc:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Write4Bits>
     ae0:	87 e5       	ldi	r24, 0x57	; 87
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	01 97       	sbiw	r24, 0x01	; 1
     ae6:	f1 f7       	brne	.-4      	; 0xae4 <InitLCD+0x58>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <InitLCD+0x5e>
     aea:	00 00       	nop
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Write4Bits>
     af2:	88 e2       	ldi	r24, 0x28	; 40
     af4:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
     af8:	8c e0       	ldi	r24, 0x0C	; 12
     afa:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
     afe:	60 e1       	ldi	r22, 0x10	; 16
     b00:	71 e0       	ldi	r23, 0x01	; 1
     b02:	84 e0       	ldi	r24, 0x04	; 4
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 22 05 	call	0xa44	; 0xa44 <CreateCustomChar>
     b0a:	68 e0       	ldi	r22, 0x08	; 8
     b0c:	71 e0       	ldi	r23, 0x01	; 1
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 22 05 	call	0xa44	; 0xa44 <CreateCustomChar>
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	71 e0       	ldi	r23, 0x01	; 1
     b1a:	83 e0       	ldi	r24, 0x03	; 3
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 22 05 	call	0xa44	; 0xa44 <CreateCustomChar>
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
     b2e:	86 e0       	ldi	r24, 0x06	; 6
     b30:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
     b34:	8c e0       	ldi	r24, 0x0C	; 12
     b36:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
     b3a:	08 95       	ret

00000b3c <SetCursorPosition>:
     b3c:	9f ef       	ldi	r25, 0xFF	; 255
     b3e:	98 0f       	add	r25, r24
     b40:	63 30       	cpi	r22, 0x03	; 3
     b42:	39 f0       	breq	.+14     	; 0xb52 <SetCursorPosition+0x16>
     b44:	64 30       	cpi	r22, 0x04	; 4
     b46:	41 f0       	breq	.+16     	; 0xb58 <SetCursorPosition+0x1c>
     b48:	62 30       	cpi	r22, 0x02	; 2
     b4a:	41 f4       	brne	.+16     	; 0xb5c <SetCursorPosition+0x20>
     b4c:	9f e3       	ldi	r25, 0x3F	; 63
     b4e:	98 0f       	add	r25, r24
     b50:	05 c0       	rjmp	.+10     	; 0xb5c <SetCursorPosition+0x20>
     b52:	93 e1       	ldi	r25, 0x13	; 19
     b54:	98 0f       	add	r25, r24
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <SetCursorPosition+0x20>
     b58:	93 e5       	ldi	r25, 0x53	; 83
     b5a:	98 0f       	add	r25, r24
     b5c:	89 2f       	mov	r24, r25
     b5e:	80 68       	ori	r24, 0x80	; 128
     b60:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <SendCommand>
     b64:	08 95       	ret

00000b66 <myMillis>:
volatile uint32_t previousTime = 0;

uint32_t myMillis() {
	uint32_t ms;
	// Disable interrupts to ensure atomic access to the variable
	cli();
     b66:	f8 94       	cli
	ms = milliseconds;
     b68:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <milliseconds>
     b6c:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <milliseconds+0x1>
     b70:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <milliseconds+0x2>
     b74:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <milliseconds+0x3>
	// Enable interrupts back
	sei();
     b78:	78 94       	sei
	return ms;
}
     b7a:	08 95       	ret

00000b7c <GetDeltaTime>:

float GetDeltaTime()
{
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
	uint32_t currentTime = myMillis();
     b88:	0e 94 b3 05 	call	0xb66	; 0xb66 <myMillis>
     b8c:	8b 01       	movw	r16, r22
     b8e:	9c 01       	movw	r18, r24
	uint32_t deltaTime = (currentTime - previousTime);
     b90:	40 91 1e 01 	lds	r20, 0x011E	; 0x80011e <__data_end>
     b94:	50 91 1f 01 	lds	r21, 0x011F	; 0x80011f <__data_end+0x1>
     b98:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end+0x2>
     b9c:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x3>
     ba0:	68 01       	movw	r12, r16
     ba2:	79 01       	movw	r14, r18
     ba4:	c4 1a       	sub	r12, r20
     ba6:	d5 0a       	sbc	r13, r21
     ba8:	e6 0a       	sbc	r14, r22
     baa:	f7 0a       	sbc	r15, r23
     bac:	c7 01       	movw	r24, r14
     bae:	b6 01       	movw	r22, r12
	previousTime = currentTime;
     bb0:	00 93 1e 01 	sts	0x011E, r16	; 0x80011e <__data_end>
     bb4:	10 93 1f 01 	sts	0x011F, r17	; 0x80011f <__data_end+0x1>
     bb8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <__data_end+0x2>
     bbc:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <__data_end+0x3>
	return deltaTime;
     bc0:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <__floatunsisf>
}
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	08 95       	ret

00000bd2 <init_timer0>:

void init_timer0() {
	// Set the timer mode to CTC (Clear Timer on Compare Match) mode
	TCCR0A |= (1 << WGM01);
     bd2:	84 b5       	in	r24, 0x24	; 36
     bd4:	82 60       	ori	r24, 0x02	; 2
     bd6:	84 bd       	out	0x24, r24	; 36

	// Set the prescaler to 64 (adjust as needed for your application)
	TCCR0B |= (1 << CS01) | (1 << CS00);
     bd8:	85 b5       	in	r24, 0x25	; 37
     bda:	83 60       	ori	r24, 0x03	; 3
     bdc:	85 bd       	out	0x25, r24	; 37

	// Calculate the compare match value (OCR0A) for 1 ms interrupt period
	OCR0A = (F_CPU / (64UL * 1000)) - 1;
     bde:	89 ef       	ldi	r24, 0xF9	; 249
     be0:	87 bd       	out	0x27, r24	; 39

	// Enable TIMER0 compare match interrupt
	TIMSK0 |= (1 << OCIE0A);
     be2:	ee e6       	ldi	r30, 0x6E	; 110
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	80 83       	st	Z, r24

	// Enable global interrupts
	sei();
     bec:	78 94       	sei
     bee:	08 95       	ret

00000bf0 <__vector_14>:
}

// TIMER0 compare match interrupt handler
ISR(TIMER0_COMPA_vect) {
     bf0:	1f 92       	push	r1
     bf2:	0f 92       	push	r0
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	0f 92       	push	r0
     bf8:	11 24       	eor	r1, r1
     bfa:	8f 93       	push	r24
     bfc:	9f 93       	push	r25
     bfe:	af 93       	push	r26
     c00:	bf 93       	push	r27
	milliseconds++;
     c02:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <milliseconds>
     c06:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <milliseconds+0x1>
     c0a:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <milliseconds+0x2>
     c0e:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <milliseconds+0x3>
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <milliseconds>
     c1c:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <milliseconds+0x1>
     c20:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <milliseconds+0x2>
     c24:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <milliseconds+0x3>
}
     c28:	bf 91       	pop	r27
     c2a:	af 91       	pop	r26
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	0f 90       	pop	r0
     c36:	1f 90       	pop	r1
     c38:	18 95       	reti

00000c3a <main>:

int main(void)
{	
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	a1 97       	sbiw	r28, 0x21	; 33
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
	//_delay_ms(1000);
	cli();
     c4e:	f8 94       	cli
	init_timer0();
     c50:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <init_timer0>
	float deltaTime = (GetDeltaTime() / 1000.0);
     c54:	0e 94 be 05 	call	0xb7c	; 0xb7c <GetDeltaTime>
     c58:	20 e0       	ldi	r18, 0x00	; 0
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	4a e7       	ldi	r20, 0x7A	; 122
     c5e:	54 e4       	ldi	r21, 0x44	; 68
     c60:	0e 94 c4 07 	call	0xf88	; 0xf88 <__divsf3>
     c64:	2b 01       	movw	r4, r22
     c66:	3c 01       	movw	r6, r24
	struct Player player[2];
	InitInputs(player);
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	0e 94 c6 03 	call	0x78c	; 0x78c <InitInputs>
	struct Ball ball[1];
	init_ball(ball,10,2,1,1);
     c70:	01 e0       	ldi	r16, 0x01	; 1
     c72:	21 e0       	ldi	r18, 0x01	; 1
     c74:	42 e0       	ldi	r20, 0x02	; 2
     c76:	6a e0       	ldi	r22, 0x0A	; 10
     c78:	ce 01       	movw	r24, r28
     c7a:	47 96       	adiw	r24, 0x17	; 23
     c7c:	0e 94 66 02 	call	0x4cc	; 0x4cc <init_ball>
	InitLCD();
     c80:	0e 94 46 05 	call	0xa8c	; 0xa8c <InitLCD>
	ResetBoard(player);
     c84:	ce 01       	movw	r24, r28
     c86:	01 96       	adiw	r24, 0x01	; 1
     c88:	0e 94 b2 00 	call	0x164	; 0x164 <ResetBoard>
    while (1)
    {
	    PollInputs(player);
     c8c:	ce 01       	movw	r24, r28
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	0e 94 de 03 	call	0x7bc	; 0x7bc <PollInputs>
	    CheckInputs(player);
     c94:	ce 01       	movw	r24, r28
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <CheckInputs>
		ExecuteInputs(player, deltaTime);
     c9c:	b3 01       	movw	r22, r6
     c9e:	a2 01       	movw	r20, r4
     ca0:	ce 01       	movw	r24, r28
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	0e 94 42 04 	call	0x884	; 0x884 <ExecuteInputs>
		reflect_paddles(player[0].xPos,player[0].yPos,player[1].xPos,player[1].yPos,ball);
     ca8:	aa 88       	ldd	r10, Y+18	; 0x12
     caa:	bb 88       	ldd	r11, Y+19	; 0x13
     cac:	cc 88       	ldd	r12, Y+20	; 0x14
     cae:	dd 88       	ldd	r13, Y+21	; 0x15
     cb0:	ee 84       	ldd	r14, Y+14	; 0x0e
     cb2:	ff 84       	ldd	r15, Y+15	; 0x0f
     cb4:	08 89       	ldd	r16, Y+16	; 0x10
     cb6:	19 89       	ldd	r17, Y+17	; 0x11
     cb8:	2f 81       	ldd	r18, Y+7	; 0x07
     cba:	38 85       	ldd	r19, Y+8	; 0x08
     cbc:	49 85       	ldd	r20, Y+9	; 0x09
     cbe:	5a 85       	ldd	r21, Y+10	; 0x0a
     cc0:	6b 81       	ldd	r22, Y+3	; 0x03
     cc2:	7c 81       	ldd	r23, Y+4	; 0x04
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	fe 01       	movw	r30, r28
     cca:	77 96       	adiw	r30, 0x17	; 23
     ccc:	4f 01       	movw	r8, r30
     cce:	0e 94 03 03 	call	0x606	; 0x606 <reflect_paddles>
		UpdateBallPosVel(ball, deltaTime);
     cd2:	b3 01       	movw	r22, r6
     cd4:	a2 01       	movw	r20, r4
     cd6:	c4 01       	movw	r24, r8
     cd8:	0e 94 b5 02 	call	0x56a	; 0x56a <UpdateBallPosVel>
		char resetDeltaTime = 0;
     cdc:	19 a2       	std	Y+33, r1	; 0x21
		DetectUpdateScore(player, ball, &resetDeltaTime);
     cde:	ae 01       	movw	r20, r28
     ce0:	4f 5d       	subi	r20, 0xDF	; 223
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	b4 01       	movw	r22, r8
     ce6:	ce 01       	movw	r24, r28
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <DetectUpdateScore>
		if (resetDeltaTime == 1)
     cee:	89 a1       	ldd	r24, Y+33	; 0x21
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	21 f4       	brne	.+8      	; 0xcfc <main+0xc2>
		{
			deltaTime = (GetDeltaTime() / 1000);
     cf4:	0e 94 be 05 	call	0xb7c	; 0xb7c <GetDeltaTime>
			deltaTime = (GetDeltaTime() / 1000);
     cf8:	0e 94 be 05 	call	0xb7c	; 0xb7c <GetDeltaTime>
		}
		UpdateBoard(player,ball);
     cfc:	be 01       	movw	r22, r28
     cfe:	69 5e       	subi	r22, 0xE9	; 233
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	ce 01       	movw	r24, r28
     d04:	01 96       	adiw	r24, 0x01	; 1
     d06:	0e 94 1b 01 	call	0x236	; 0x236 <UpdateBoard>
		deltaTime = (GetDeltaTime() / 1000);
     d0a:	0e 94 be 05 	call	0xb7c	; 0xb7c <GetDeltaTime>
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4a e7       	ldi	r20, 0x7A	; 122
     d14:	54 e4       	ldi	r21, 0x44	; 68
     d16:	0e 94 c4 07 	call	0xf88	; 0xf88 <__divsf3>
     d1a:	2b 01       	movw	r4, r22
     d1c:	3c 01       	movw	r6, r24
	}
     d1e:	b6 cf       	rjmp	.-148    	; 0xc8c <main+0x52>

00000d20 <__vector_11>:
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	2f 93       	push	r18
     d2c:	3f 93       	push	r19
     d2e:	4f 93       	push	r20
     d30:	5f 93       	push	r21
     d32:	6f 93       	push	r22
     d34:	7f 93       	push	r23
     d36:	8f 93       	push	r24
     d38:	9f 93       	push	r25
     d3a:	af 93       	push	r26
     d3c:	bf 93       	push	r27
     d3e:	ef 93       	push	r30
     d40:	ff 93       	push	r31
     d42:	0e 94 79 00 	call	0xf2	; 0xf2 <TIM1_COMPA>
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <SET_SPEAKER_PARAMS>:
     d68:	f8 94       	cli
     d6a:	84 b1       	in	r24, 0x04	; 4
     d6c:	82 60       	ori	r24, 0x02	; 2
     d6e:	84 b9       	out	0x04, r24	; 4
     d70:	e0 e8       	ldi	r30, 0x80	; 128
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 ec       	ldi	r24, 0xC0	; 192
     d76:	80 83       	st	Z, r24
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     d7e:	80 e8       	ldi	r24, 0x80	; 128
     d80:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
     d84:	80 e4       	ldi	r24, 0x40	; 64
     d86:	80 83       	st	Z, r24
     d88:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     d8c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	98 2f       	mov	r25, r24
     d94:	88 27       	eor	r24, r24
     d96:	82 0f       	add	r24, r18
     d98:	91 1d       	adc	r25, r1
     d9a:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <g_freq>
     d9e:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <g_freq+0x1>
     da2:	82 0f       	add	r24, r18
     da4:	93 1f       	adc	r25, r19
     da6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     daa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     dae:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <cycle_level>
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     db8:	86 bb       	out	0x16, r24	; 22
     dba:	78 94       	sei
     dbc:	08 95       	ret

00000dbe <Play_speaker>:
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	eb 01       	movw	r28, r22
     dcc:	6c 01       	movw	r12, r24
     dce:	99 0f       	add	r25, r25
     dd0:	ee 08       	sbc	r14, r14
     dd2:	ff 08       	sbc	r15, r15
     dd4:	60 e2       	ldi	r22, 0x20	; 32
     dd6:	71 ea       	ldi	r23, 0xA1	; 161
     dd8:	87 e0       	ldi	r24, 0x07	; 7
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	a7 01       	movw	r20, r14
     dde:	96 01       	movw	r18, r12
     de0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__divmodsi4>
     de4:	22 5e       	subi	r18, 0xE2	; 226
     de6:	3f 4f       	sbci	r19, 0xFF	; 255
     de8:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <freq_high>
     dec:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <freq_low>
     df0:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <cycle_count_L>
     df4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <cycle_count_H>
     df8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <cycle_level>
     dfc:	de 01       	movw	r26, r28
     dfe:	a7 01       	movw	r20, r14
     e00:	96 01       	movw	r18, r12
     e02:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__mulshisi3>
     e06:	28 ee       	ldi	r18, 0xE8	; 232
     e08:	33 e0       	ldi	r19, 0x03	; 3
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	50 e0       	ldi	r21, 0x00	; 0
     e0e:	0e 94 dd 09 	call	0x13ba	; 0x13ba <__divmodsi4>
     e12:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <max_cycle_H>
     e16:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <max_cycle_L>
     e1a:	0e 94 b4 06 	call	0xd68	; 0xd68 <SET_SPEAKER_PARAMS>
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	08 95       	ret

00000e2c <score_sound>:
     e2c:	68 ee       	ldi	r22, 0xE8	; 232
     e2e:	73 e0       	ldi	r23, 0x03	; 3
     e30:	80 e9       	ldi	r24, 0x90	; 144
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 df 06 	call	0xdbe	; 0xdbe <Play_speaker>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e38:	2f ef       	ldi	r18, 0xFF	; 255
     e3a:	89 e6       	ldi	r24, 0x69	; 105
     e3c:	98 e1       	ldi	r25, 0x18	; 24
     e3e:	21 50       	subi	r18, 0x01	; 1
     e40:	80 40       	sbci	r24, 0x00	; 0
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <score_sound+0x12>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <score_sound+0x1c>
     e48:	00 00       	nop
     e4a:	68 ee       	ldi	r22, 0xE8	; 232
     e4c:	73 e0       	ldi	r23, 0x03	; 3
     e4e:	88 eb       	ldi	r24, 0xB8	; 184
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	0e 94 df 06 	call	0xdbe	; 0xdbe <Play_speaker>
     e56:	2f ef       	ldi	r18, 0xFF	; 255
     e58:	89 e6       	ldi	r24, 0x69	; 105
     e5a:	98 e1       	ldi	r25, 0x18	; 24
     e5c:	21 50       	subi	r18, 0x01	; 1
     e5e:	80 40       	sbci	r24, 0x00	; 0
     e60:	90 40       	sbci	r25, 0x00	; 0
     e62:	e1 f7       	brne	.-8      	; 0xe5c <score_sound+0x30>
     e64:	00 c0       	rjmp	.+0      	; 0xe66 <score_sound+0x3a>
     e66:	00 00       	nop
     e68:	68 ee       	ldi	r22, 0xE8	; 232
     e6a:	73 e0       	ldi	r23, 0x03	; 3
     e6c:	8c e7       	ldi	r24, 0x7C	; 124
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 df 06 	call	0xdbe	; 0xdbe <Play_speaker>
     e74:	2f ef       	ldi	r18, 0xFF	; 255
     e76:	89 e6       	ldi	r24, 0x69	; 105
     e78:	98 e1       	ldi	r25, 0x18	; 24
     e7a:	21 50       	subi	r18, 0x01	; 1
     e7c:	80 40       	sbci	r24, 0x00	; 0
     e7e:	90 40       	sbci	r25, 0x00	; 0
     e80:	e1 f7       	brne	.-8      	; 0xe7a <score_sound+0x4e>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <score_sound+0x58>
     e84:	00 00       	nop
     e86:	08 95       	ret

00000e88 <bounce_sound>:
     e88:	64 ef       	ldi	r22, 0xF4	; 244
     e8a:	71 e0       	ldi	r23, 0x01	; 1
     e8c:	88 e7       	ldi	r24, 0x78	; 120
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 df 06 	call	0xdbe	; 0xdbe <Play_speaker>
     e94:	08 95       	ret

00000e96 <paddle_sound>:
     e96:	64 ef       	ldi	r22, 0xF4	; 244
     e98:	71 e0       	ldi	r23, 0x01	; 1
     e9a:	80 ef       	ldi	r24, 0xF0	; 240
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 df 06 	call	0xdbe	; 0xdbe <Play_speaker>
     ea2:	08 95       	ret

00000ea4 <__subsf3>:
     ea4:	50 58       	subi	r21, 0x80	; 128

00000ea6 <__addsf3>:
     ea6:	bb 27       	eor	r27, r27
     ea8:	aa 27       	eor	r26, r26
     eaa:	0e 94 6a 07 	call	0xed4	; 0xed4 <__addsf3x>
     eae:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_round>
     eb2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscA>
     eb6:	38 f0       	brcs	.+14     	; 0xec6 <__addsf3+0x20>
     eb8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscB>
     ebc:	20 f0       	brcs	.+8      	; 0xec6 <__addsf3+0x20>
     ebe:	39 f4       	brne	.+14     	; 0xece <__addsf3+0x28>
     ec0:	9f 3f       	cpi	r25, 0xFF	; 255
     ec2:	19 f4       	brne	.+6      	; 0xeca <__addsf3+0x24>
     ec4:	26 f4       	brtc	.+8      	; 0xece <__addsf3+0x28>
     ec6:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>
     eca:	0e f4       	brtc	.+2      	; 0xece <__addsf3+0x28>
     ecc:	e0 95       	com	r30
     ece:	e7 fb       	bst	r30, 7
     ed0:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_inf>

00000ed4 <__addsf3x>:
     ed4:	e9 2f       	mov	r30, r25
     ed6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_split3>
     eda:	58 f3       	brcs	.-42     	; 0xeb2 <__addsf3+0xc>
     edc:	ba 17       	cp	r27, r26
     ede:	62 07       	cpc	r22, r18
     ee0:	73 07       	cpc	r23, r19
     ee2:	84 07       	cpc	r24, r20
     ee4:	95 07       	cpc	r25, r21
     ee6:	20 f0       	brcs	.+8      	; 0xef0 <__addsf3x+0x1c>
     ee8:	79 f4       	brne	.+30     	; 0xf08 <__addsf3x+0x34>
     eea:	a6 f5       	brtc	.+104    	; 0xf54 <__addsf3x+0x80>
     eec:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_zero>
     ef0:	0e f4       	brtc	.+2      	; 0xef4 <__addsf3x+0x20>
     ef2:	e0 95       	com	r30
     ef4:	0b 2e       	mov	r0, r27
     ef6:	ba 2f       	mov	r27, r26
     ef8:	a0 2d       	mov	r26, r0
     efa:	0b 01       	movw	r0, r22
     efc:	b9 01       	movw	r22, r18
     efe:	90 01       	movw	r18, r0
     f00:	0c 01       	movw	r0, r24
     f02:	ca 01       	movw	r24, r20
     f04:	a0 01       	movw	r20, r0
     f06:	11 24       	eor	r1, r1
     f08:	ff 27       	eor	r31, r31
     f0a:	59 1b       	sub	r21, r25
     f0c:	99 f0       	breq	.+38     	; 0xf34 <__addsf3x+0x60>
     f0e:	59 3f       	cpi	r21, 0xF9	; 249
     f10:	50 f4       	brcc	.+20     	; 0xf26 <__addsf3x+0x52>
     f12:	50 3e       	cpi	r21, 0xE0	; 224
     f14:	68 f1       	brcs	.+90     	; 0xf70 <__addsf3x+0x9c>
     f16:	1a 16       	cp	r1, r26
     f18:	f0 40       	sbci	r31, 0x00	; 0
     f1a:	a2 2f       	mov	r26, r18
     f1c:	23 2f       	mov	r18, r19
     f1e:	34 2f       	mov	r19, r20
     f20:	44 27       	eor	r20, r20
     f22:	58 5f       	subi	r21, 0xF8	; 248
     f24:	f3 cf       	rjmp	.-26     	; 0xf0c <__addsf3x+0x38>
     f26:	46 95       	lsr	r20
     f28:	37 95       	ror	r19
     f2a:	27 95       	ror	r18
     f2c:	a7 95       	ror	r26
     f2e:	f0 40       	sbci	r31, 0x00	; 0
     f30:	53 95       	inc	r21
     f32:	c9 f7       	brne	.-14     	; 0xf26 <__addsf3x+0x52>
     f34:	7e f4       	brtc	.+30     	; 0xf54 <__addsf3x+0x80>
     f36:	1f 16       	cp	r1, r31
     f38:	ba 0b       	sbc	r27, r26
     f3a:	62 0b       	sbc	r22, r18
     f3c:	73 0b       	sbc	r23, r19
     f3e:	84 0b       	sbc	r24, r20
     f40:	ba f0       	brmi	.+46     	; 0xf70 <__addsf3x+0x9c>
     f42:	91 50       	subi	r25, 0x01	; 1
     f44:	a1 f0       	breq	.+40     	; 0xf6e <__addsf3x+0x9a>
     f46:	ff 0f       	add	r31, r31
     f48:	bb 1f       	adc	r27, r27
     f4a:	66 1f       	adc	r22, r22
     f4c:	77 1f       	adc	r23, r23
     f4e:	88 1f       	adc	r24, r24
     f50:	c2 f7       	brpl	.-16     	; 0xf42 <__addsf3x+0x6e>
     f52:	0e c0       	rjmp	.+28     	; 0xf70 <__addsf3x+0x9c>
     f54:	ba 0f       	add	r27, r26
     f56:	62 1f       	adc	r22, r18
     f58:	73 1f       	adc	r23, r19
     f5a:	84 1f       	adc	r24, r20
     f5c:	48 f4       	brcc	.+18     	; 0xf70 <__addsf3x+0x9c>
     f5e:	87 95       	ror	r24
     f60:	77 95       	ror	r23
     f62:	67 95       	ror	r22
     f64:	b7 95       	ror	r27
     f66:	f7 95       	ror	r31
     f68:	9e 3f       	cpi	r25, 0xFE	; 254
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <__addsf3x+0x9a>
     f6c:	b0 cf       	rjmp	.-160    	; 0xece <__addsf3+0x28>
     f6e:	93 95       	inc	r25
     f70:	88 0f       	add	r24, r24
     f72:	08 f0       	brcs	.+2      	; 0xf76 <__addsf3x+0xa2>
     f74:	99 27       	eor	r25, r25
     f76:	ee 0f       	add	r30, r30
     f78:	97 95       	ror	r25
     f7a:	87 95       	ror	r24
     f7c:	08 95       	ret

00000f7e <__cmpsf2>:
     f7e:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_cmp>
     f82:	08 f4       	brcc	.+2      	; 0xf86 <__cmpsf2+0x8>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	08 95       	ret

00000f88 <__divsf3>:
     f88:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__divsf3x>
     f8c:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_round>
     f90:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscB>
     f94:	58 f0       	brcs	.+22     	; 0xfac <__divsf3+0x24>
     f96:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscA>
     f9a:	40 f0       	brcs	.+16     	; 0xfac <__divsf3+0x24>
     f9c:	29 f4       	brne	.+10     	; 0xfa8 <__divsf3+0x20>
     f9e:	5f 3f       	cpi	r21, 0xFF	; 255
     fa0:	29 f0       	breq	.+10     	; 0xfac <__divsf3+0x24>
     fa2:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_inf>
     fa6:	51 11       	cpse	r21, r1
     fa8:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_szero>
     fac:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>

00000fb0 <__divsf3x>:
     fb0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_split3>
     fb4:	68 f3       	brcs	.-38     	; 0xf90 <__divsf3+0x8>

00000fb6 <__divsf3_pse>:
     fb6:	99 23       	and	r25, r25
     fb8:	b1 f3       	breq	.-20     	; 0xfa6 <__divsf3+0x1e>
     fba:	55 23       	and	r21, r21
     fbc:	91 f3       	breq	.-28     	; 0xfa2 <__divsf3+0x1a>
     fbe:	95 1b       	sub	r25, r21
     fc0:	55 0b       	sbc	r21, r21
     fc2:	bb 27       	eor	r27, r27
     fc4:	aa 27       	eor	r26, r26
     fc6:	62 17       	cp	r22, r18
     fc8:	73 07       	cpc	r23, r19
     fca:	84 07       	cpc	r24, r20
     fcc:	38 f0       	brcs	.+14     	; 0xfdc <__divsf3_pse+0x26>
     fce:	9f 5f       	subi	r25, 0xFF	; 255
     fd0:	5f 4f       	sbci	r21, 0xFF	; 255
     fd2:	22 0f       	add	r18, r18
     fd4:	33 1f       	adc	r19, r19
     fd6:	44 1f       	adc	r20, r20
     fd8:	aa 1f       	adc	r26, r26
     fda:	a9 f3       	breq	.-22     	; 0xfc6 <__divsf3_pse+0x10>
     fdc:	35 d0       	rcall	.+106    	; 0x1048 <__divsf3_pse+0x92>
     fde:	0e 2e       	mov	r0, r30
     fe0:	3a f0       	brmi	.+14     	; 0xff0 <__divsf3_pse+0x3a>
     fe2:	e0 e8       	ldi	r30, 0x80	; 128
     fe4:	32 d0       	rcall	.+100    	; 0x104a <__divsf3_pse+0x94>
     fe6:	91 50       	subi	r25, 0x01	; 1
     fe8:	50 40       	sbci	r21, 0x00	; 0
     fea:	e6 95       	lsr	r30
     fec:	00 1c       	adc	r0, r0
     fee:	ca f7       	brpl	.-14     	; 0xfe2 <__divsf3_pse+0x2c>
     ff0:	2b d0       	rcall	.+86     	; 0x1048 <__divsf3_pse+0x92>
     ff2:	fe 2f       	mov	r31, r30
     ff4:	29 d0       	rcall	.+82     	; 0x1048 <__divsf3_pse+0x92>
     ff6:	66 0f       	add	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	bb 1f       	adc	r27, r27
     ffe:	26 17       	cp	r18, r22
    1000:	37 07       	cpc	r19, r23
    1002:	48 07       	cpc	r20, r24
    1004:	ab 07       	cpc	r26, r27
    1006:	b0 e8       	ldi	r27, 0x80	; 128
    1008:	09 f0       	breq	.+2      	; 0x100c <__divsf3_pse+0x56>
    100a:	bb 0b       	sbc	r27, r27
    100c:	80 2d       	mov	r24, r0
    100e:	bf 01       	movw	r22, r30
    1010:	ff 27       	eor	r31, r31
    1012:	93 58       	subi	r25, 0x83	; 131
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
    1016:	3a f0       	brmi	.+14     	; 0x1026 <__divsf3_pse+0x70>
    1018:	9e 3f       	cpi	r25, 0xFE	; 254
    101a:	51 05       	cpc	r21, r1
    101c:	78 f0       	brcs	.+30     	; 0x103c <__divsf3_pse+0x86>
    101e:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_inf>
    1022:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_szero>
    1026:	5f 3f       	cpi	r21, 0xFF	; 255
    1028:	e4 f3       	brlt	.-8      	; 0x1022 <__divsf3_pse+0x6c>
    102a:	98 3e       	cpi	r25, 0xE8	; 232
    102c:	d4 f3       	brlt	.-12     	; 0x1022 <__divsf3_pse+0x6c>
    102e:	86 95       	lsr	r24
    1030:	77 95       	ror	r23
    1032:	67 95       	ror	r22
    1034:	b7 95       	ror	r27
    1036:	f7 95       	ror	r31
    1038:	9f 5f       	subi	r25, 0xFF	; 255
    103a:	c9 f7       	brne	.-14     	; 0x102e <__divsf3_pse+0x78>
    103c:	88 0f       	add	r24, r24
    103e:	91 1d       	adc	r25, r1
    1040:	96 95       	lsr	r25
    1042:	87 95       	ror	r24
    1044:	97 f9       	bld	r25, 7
    1046:	08 95       	ret
    1048:	e1 e0       	ldi	r30, 0x01	; 1
    104a:	66 0f       	add	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	88 1f       	adc	r24, r24
    1050:	bb 1f       	adc	r27, r27
    1052:	62 17       	cp	r22, r18
    1054:	73 07       	cpc	r23, r19
    1056:	84 07       	cpc	r24, r20
    1058:	ba 07       	cpc	r27, r26
    105a:	20 f0       	brcs	.+8      	; 0x1064 <__divsf3_pse+0xae>
    105c:	62 1b       	sub	r22, r18
    105e:	73 0b       	sbc	r23, r19
    1060:	84 0b       	sbc	r24, r20
    1062:	ba 0b       	sbc	r27, r26
    1064:	ee 1f       	adc	r30, r30
    1066:	88 f7       	brcc	.-30     	; 0x104a <__divsf3_pse+0x94>
    1068:	e0 95       	com	r30
    106a:	08 95       	ret

0000106c <__fixsfsi>:
    106c:	0e 94 3d 08 	call	0x107a	; 0x107a <__fixunssfsi>
    1070:	68 94       	set
    1072:	b1 11       	cpse	r27, r1
    1074:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_szero>
    1078:	08 95       	ret

0000107a <__fixunssfsi>:
    107a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_splitA>
    107e:	88 f0       	brcs	.+34     	; 0x10a2 <__fixunssfsi+0x28>
    1080:	9f 57       	subi	r25, 0x7F	; 127
    1082:	98 f0       	brcs	.+38     	; 0x10aa <__fixunssfsi+0x30>
    1084:	b9 2f       	mov	r27, r25
    1086:	99 27       	eor	r25, r25
    1088:	b7 51       	subi	r27, 0x17	; 23
    108a:	b0 f0       	brcs	.+44     	; 0x10b8 <__fixunssfsi+0x3e>
    108c:	e1 f0       	breq	.+56     	; 0x10c6 <__fixunssfsi+0x4c>
    108e:	66 0f       	add	r22, r22
    1090:	77 1f       	adc	r23, r23
    1092:	88 1f       	adc	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	1a f0       	brmi	.+6      	; 0x109e <__fixunssfsi+0x24>
    1098:	ba 95       	dec	r27
    109a:	c9 f7       	brne	.-14     	; 0x108e <__fixunssfsi+0x14>
    109c:	14 c0       	rjmp	.+40     	; 0x10c6 <__fixunssfsi+0x4c>
    109e:	b1 30       	cpi	r27, 0x01	; 1
    10a0:	91 f0       	breq	.+36     	; 0x10c6 <__fixunssfsi+0x4c>
    10a2:	0e 94 17 09 	call	0x122e	; 0x122e <__fp_zero>
    10a6:	b1 e0       	ldi	r27, 0x01	; 1
    10a8:	08 95       	ret
    10aa:	0c 94 17 09 	jmp	0x122e	; 0x122e <__fp_zero>
    10ae:	67 2f       	mov	r22, r23
    10b0:	78 2f       	mov	r23, r24
    10b2:	88 27       	eor	r24, r24
    10b4:	b8 5f       	subi	r27, 0xF8	; 248
    10b6:	39 f0       	breq	.+14     	; 0x10c6 <__fixunssfsi+0x4c>
    10b8:	b9 3f       	cpi	r27, 0xF9	; 249
    10ba:	cc f3       	brlt	.-14     	; 0x10ae <__fixunssfsi+0x34>
    10bc:	86 95       	lsr	r24
    10be:	77 95       	ror	r23
    10c0:	67 95       	ror	r22
    10c2:	b3 95       	inc	r27
    10c4:	d9 f7       	brne	.-10     	; 0x10bc <__fixunssfsi+0x42>
    10c6:	3e f4       	brtc	.+14     	; 0x10d6 <__fixunssfsi+0x5c>
    10c8:	90 95       	com	r25
    10ca:	80 95       	com	r24
    10cc:	70 95       	com	r23
    10ce:	61 95       	neg	r22
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	8f 4f       	sbci	r24, 0xFF	; 255
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	08 95       	ret

000010d8 <__floatunsisf>:
    10d8:	e8 94       	clt
    10da:	09 c0       	rjmp	.+18     	; 0x10ee <__floatsisf+0x12>

000010dc <__floatsisf>:
    10dc:	97 fb       	bst	r25, 7
    10de:	3e f4       	brtc	.+14     	; 0x10ee <__floatsisf+0x12>
    10e0:	90 95       	com	r25
    10e2:	80 95       	com	r24
    10e4:	70 95       	com	r23
    10e6:	61 95       	neg	r22
    10e8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ea:	8f 4f       	sbci	r24, 0xFF	; 255
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	99 23       	and	r25, r25
    10f0:	a9 f0       	breq	.+42     	; 0x111c <__floatsisf+0x40>
    10f2:	f9 2f       	mov	r31, r25
    10f4:	96 e9       	ldi	r25, 0x96	; 150
    10f6:	bb 27       	eor	r27, r27
    10f8:	93 95       	inc	r25
    10fa:	f6 95       	lsr	r31
    10fc:	87 95       	ror	r24
    10fe:	77 95       	ror	r23
    1100:	67 95       	ror	r22
    1102:	b7 95       	ror	r27
    1104:	f1 11       	cpse	r31, r1
    1106:	f8 cf       	rjmp	.-16     	; 0x10f8 <__floatsisf+0x1c>
    1108:	fa f4       	brpl	.+62     	; 0x1148 <__floatsisf+0x6c>
    110a:	bb 0f       	add	r27, r27
    110c:	11 f4       	brne	.+4      	; 0x1112 <__floatsisf+0x36>
    110e:	60 ff       	sbrs	r22, 0
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <__floatsisf+0x6c>
    1112:	6f 5f       	subi	r22, 0xFF	; 255
    1114:	7f 4f       	sbci	r23, 0xFF	; 255
    1116:	8f 4f       	sbci	r24, 0xFF	; 255
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	16 c0       	rjmp	.+44     	; 0x1148 <__floatsisf+0x6c>
    111c:	88 23       	and	r24, r24
    111e:	11 f0       	breq	.+4      	; 0x1124 <__floatsisf+0x48>
    1120:	96 e9       	ldi	r25, 0x96	; 150
    1122:	11 c0       	rjmp	.+34     	; 0x1146 <__floatsisf+0x6a>
    1124:	77 23       	and	r23, r23
    1126:	21 f0       	breq	.+8      	; 0x1130 <__floatsisf+0x54>
    1128:	9e e8       	ldi	r25, 0x8E	; 142
    112a:	87 2f       	mov	r24, r23
    112c:	76 2f       	mov	r23, r22
    112e:	05 c0       	rjmp	.+10     	; 0x113a <__floatsisf+0x5e>
    1130:	66 23       	and	r22, r22
    1132:	71 f0       	breq	.+28     	; 0x1150 <__floatsisf+0x74>
    1134:	96 e8       	ldi	r25, 0x86	; 134
    1136:	86 2f       	mov	r24, r22
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	2a f0       	brmi	.+10     	; 0x1148 <__floatsisf+0x6c>
    113e:	9a 95       	dec	r25
    1140:	66 0f       	add	r22, r22
    1142:	77 1f       	adc	r23, r23
    1144:	88 1f       	adc	r24, r24
    1146:	da f7       	brpl	.-10     	; 0x113e <__floatsisf+0x62>
    1148:	88 0f       	add	r24, r24
    114a:	96 95       	lsr	r25
    114c:	87 95       	ror	r24
    114e:	97 f9       	bld	r25, 7
    1150:	08 95       	ret

00001152 <__fp_cmp>:
    1152:	99 0f       	add	r25, r25
    1154:	00 08       	sbc	r0, r0
    1156:	55 0f       	add	r21, r21
    1158:	aa 0b       	sbc	r26, r26
    115a:	e0 e8       	ldi	r30, 0x80	; 128
    115c:	fe ef       	ldi	r31, 0xFE	; 254
    115e:	16 16       	cp	r1, r22
    1160:	17 06       	cpc	r1, r23
    1162:	e8 07       	cpc	r30, r24
    1164:	f9 07       	cpc	r31, r25
    1166:	c0 f0       	brcs	.+48     	; 0x1198 <__fp_cmp+0x46>
    1168:	12 16       	cp	r1, r18
    116a:	13 06       	cpc	r1, r19
    116c:	e4 07       	cpc	r30, r20
    116e:	f5 07       	cpc	r31, r21
    1170:	98 f0       	brcs	.+38     	; 0x1198 <__fp_cmp+0x46>
    1172:	62 1b       	sub	r22, r18
    1174:	73 0b       	sbc	r23, r19
    1176:	84 0b       	sbc	r24, r20
    1178:	95 0b       	sbc	r25, r21
    117a:	39 f4       	brne	.+14     	; 0x118a <__fp_cmp+0x38>
    117c:	0a 26       	eor	r0, r26
    117e:	61 f0       	breq	.+24     	; 0x1198 <__fp_cmp+0x46>
    1180:	23 2b       	or	r18, r19
    1182:	24 2b       	or	r18, r20
    1184:	25 2b       	or	r18, r21
    1186:	21 f4       	brne	.+8      	; 0x1190 <__fp_cmp+0x3e>
    1188:	08 95       	ret
    118a:	0a 26       	eor	r0, r26
    118c:	09 f4       	brne	.+2      	; 0x1190 <__fp_cmp+0x3e>
    118e:	a1 40       	sbci	r26, 0x01	; 1
    1190:	a6 95       	lsr	r26
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	81 1d       	adc	r24, r1
    1196:	81 1d       	adc	r24, r1
    1198:	08 95       	ret

0000119a <__fp_inf>:
    119a:	97 f9       	bld	r25, 7
    119c:	9f 67       	ori	r25, 0x7F	; 127
    119e:	80 e8       	ldi	r24, 0x80	; 128
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	08 95       	ret

000011a6 <__fp_nan>:
    11a6:	9f ef       	ldi	r25, 0xFF	; 255
    11a8:	80 ec       	ldi	r24, 0xC0	; 192
    11aa:	08 95       	ret

000011ac <__fp_pscA>:
    11ac:	00 24       	eor	r0, r0
    11ae:	0a 94       	dec	r0
    11b0:	16 16       	cp	r1, r22
    11b2:	17 06       	cpc	r1, r23
    11b4:	18 06       	cpc	r1, r24
    11b6:	09 06       	cpc	r0, r25
    11b8:	08 95       	ret

000011ba <__fp_pscB>:
    11ba:	00 24       	eor	r0, r0
    11bc:	0a 94       	dec	r0
    11be:	12 16       	cp	r1, r18
    11c0:	13 06       	cpc	r1, r19
    11c2:	14 06       	cpc	r1, r20
    11c4:	05 06       	cpc	r0, r21
    11c6:	08 95       	ret

000011c8 <__fp_round>:
    11c8:	09 2e       	mov	r0, r25
    11ca:	03 94       	inc	r0
    11cc:	00 0c       	add	r0, r0
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <__fp_round+0xc>
    11d0:	88 23       	and	r24, r24
    11d2:	52 f0       	brmi	.+20     	; 0x11e8 <__fp_round+0x20>
    11d4:	bb 0f       	add	r27, r27
    11d6:	40 f4       	brcc	.+16     	; 0x11e8 <__fp_round+0x20>
    11d8:	bf 2b       	or	r27, r31
    11da:	11 f4       	brne	.+4      	; 0x11e0 <__fp_round+0x18>
    11dc:	60 ff       	sbrs	r22, 0
    11de:	04 c0       	rjmp	.+8      	; 0x11e8 <__fp_round+0x20>
    11e0:	6f 5f       	subi	r22, 0xFF	; 255
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	8f 4f       	sbci	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	08 95       	ret

000011ea <__fp_split3>:
    11ea:	57 fd       	sbrc	r21, 7
    11ec:	90 58       	subi	r25, 0x80	; 128
    11ee:	44 0f       	add	r20, r20
    11f0:	55 1f       	adc	r21, r21
    11f2:	59 f0       	breq	.+22     	; 0x120a <__fp_splitA+0x10>
    11f4:	5f 3f       	cpi	r21, 0xFF	; 255
    11f6:	71 f0       	breq	.+28     	; 0x1214 <__fp_splitA+0x1a>
    11f8:	47 95       	ror	r20

000011fa <__fp_splitA>:
    11fa:	88 0f       	add	r24, r24
    11fc:	97 fb       	bst	r25, 7
    11fe:	99 1f       	adc	r25, r25
    1200:	61 f0       	breq	.+24     	; 0x121a <__fp_splitA+0x20>
    1202:	9f 3f       	cpi	r25, 0xFF	; 255
    1204:	79 f0       	breq	.+30     	; 0x1224 <__fp_splitA+0x2a>
    1206:	87 95       	ror	r24
    1208:	08 95       	ret
    120a:	12 16       	cp	r1, r18
    120c:	13 06       	cpc	r1, r19
    120e:	14 06       	cpc	r1, r20
    1210:	55 1f       	adc	r21, r21
    1212:	f2 cf       	rjmp	.-28     	; 0x11f8 <__fp_split3+0xe>
    1214:	46 95       	lsr	r20
    1216:	f1 df       	rcall	.-30     	; 0x11fa <__fp_splitA>
    1218:	08 c0       	rjmp	.+16     	; 0x122a <__fp_splitA+0x30>
    121a:	16 16       	cp	r1, r22
    121c:	17 06       	cpc	r1, r23
    121e:	18 06       	cpc	r1, r24
    1220:	99 1f       	adc	r25, r25
    1222:	f1 cf       	rjmp	.-30     	; 0x1206 <__fp_splitA+0xc>
    1224:	86 95       	lsr	r24
    1226:	71 05       	cpc	r23, r1
    1228:	61 05       	cpc	r22, r1
    122a:	08 94       	sec
    122c:	08 95       	ret

0000122e <__fp_zero>:
    122e:	e8 94       	clt

00001230 <__fp_szero>:
    1230:	bb 27       	eor	r27, r27
    1232:	66 27       	eor	r22, r22
    1234:	77 27       	eor	r23, r23
    1236:	cb 01       	movw	r24, r22
    1238:	97 f9       	bld	r25, 7
    123a:	08 95       	ret

0000123c <__gesf2>:
    123c:	0e 94 a9 08 	call	0x1152	; 0x1152 <__fp_cmp>
    1240:	08 f4       	brcc	.+2      	; 0x1244 <__gesf2+0x8>
    1242:	8f ef       	ldi	r24, 0xFF	; 255
    1244:	08 95       	ret

00001246 <__mulsf3>:
    1246:	0e 94 36 09 	call	0x126c	; 0x126c <__mulsf3x>
    124a:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__fp_round>
    124e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <__fp_pscA>
    1252:	38 f0       	brcs	.+14     	; 0x1262 <__mulsf3+0x1c>
    1254:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__fp_pscB>
    1258:	20 f0       	brcs	.+8      	; 0x1262 <__mulsf3+0x1c>
    125a:	95 23       	and	r25, r21
    125c:	11 f0       	breq	.+4      	; 0x1262 <__mulsf3+0x1c>
    125e:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_inf>
    1262:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__fp_nan>
    1266:	11 24       	eor	r1, r1
    1268:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_szero>

0000126c <__mulsf3x>:
    126c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_split3>
    1270:	70 f3       	brcs	.-36     	; 0x124e <__mulsf3+0x8>

00001272 <__mulsf3_pse>:
    1272:	95 9f       	mul	r25, r21
    1274:	c1 f3       	breq	.-16     	; 0x1266 <__mulsf3+0x20>
    1276:	95 0f       	add	r25, r21
    1278:	50 e0       	ldi	r21, 0x00	; 0
    127a:	55 1f       	adc	r21, r21
    127c:	62 9f       	mul	r22, r18
    127e:	f0 01       	movw	r30, r0
    1280:	72 9f       	mul	r23, r18
    1282:	bb 27       	eor	r27, r27
    1284:	f0 0d       	add	r31, r0
    1286:	b1 1d       	adc	r27, r1
    1288:	63 9f       	mul	r22, r19
    128a:	aa 27       	eor	r26, r26
    128c:	f0 0d       	add	r31, r0
    128e:	b1 1d       	adc	r27, r1
    1290:	aa 1f       	adc	r26, r26
    1292:	64 9f       	mul	r22, r20
    1294:	66 27       	eor	r22, r22
    1296:	b0 0d       	add	r27, r0
    1298:	a1 1d       	adc	r26, r1
    129a:	66 1f       	adc	r22, r22
    129c:	82 9f       	mul	r24, r18
    129e:	22 27       	eor	r18, r18
    12a0:	b0 0d       	add	r27, r0
    12a2:	a1 1d       	adc	r26, r1
    12a4:	62 1f       	adc	r22, r18
    12a6:	73 9f       	mul	r23, r19
    12a8:	b0 0d       	add	r27, r0
    12aa:	a1 1d       	adc	r26, r1
    12ac:	62 1f       	adc	r22, r18
    12ae:	83 9f       	mul	r24, r19
    12b0:	a0 0d       	add	r26, r0
    12b2:	61 1d       	adc	r22, r1
    12b4:	22 1f       	adc	r18, r18
    12b6:	74 9f       	mul	r23, r20
    12b8:	33 27       	eor	r19, r19
    12ba:	a0 0d       	add	r26, r0
    12bc:	61 1d       	adc	r22, r1
    12be:	23 1f       	adc	r18, r19
    12c0:	84 9f       	mul	r24, r20
    12c2:	60 0d       	add	r22, r0
    12c4:	21 1d       	adc	r18, r1
    12c6:	82 2f       	mov	r24, r18
    12c8:	76 2f       	mov	r23, r22
    12ca:	6a 2f       	mov	r22, r26
    12cc:	11 24       	eor	r1, r1
    12ce:	9f 57       	subi	r25, 0x7F	; 127
    12d0:	50 40       	sbci	r21, 0x00	; 0
    12d2:	9a f0       	brmi	.+38     	; 0x12fa <__mulsf3_pse+0x88>
    12d4:	f1 f0       	breq	.+60     	; 0x1312 <__mulsf3_pse+0xa0>
    12d6:	88 23       	and	r24, r24
    12d8:	4a f0       	brmi	.+18     	; 0x12ec <__mulsf3_pse+0x7a>
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31
    12de:	bb 1f       	adc	r27, r27
    12e0:	66 1f       	adc	r22, r22
    12e2:	77 1f       	adc	r23, r23
    12e4:	88 1f       	adc	r24, r24
    12e6:	91 50       	subi	r25, 0x01	; 1
    12e8:	50 40       	sbci	r21, 0x00	; 0
    12ea:	a9 f7       	brne	.-22     	; 0x12d6 <__mulsf3_pse+0x64>
    12ec:	9e 3f       	cpi	r25, 0xFE	; 254
    12ee:	51 05       	cpc	r21, r1
    12f0:	80 f0       	brcs	.+32     	; 0x1312 <__mulsf3_pse+0xa0>
    12f2:	0c 94 cd 08 	jmp	0x119a	; 0x119a <__fp_inf>
    12f6:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_szero>
    12fa:	5f 3f       	cpi	r21, 0xFF	; 255
    12fc:	e4 f3       	brlt	.-8      	; 0x12f6 <__mulsf3_pse+0x84>
    12fe:	98 3e       	cpi	r25, 0xE8	; 232
    1300:	d4 f3       	brlt	.-12     	; 0x12f6 <__mulsf3_pse+0x84>
    1302:	86 95       	lsr	r24
    1304:	77 95       	ror	r23
    1306:	67 95       	ror	r22
    1308:	b7 95       	ror	r27
    130a:	f7 95       	ror	r31
    130c:	e7 95       	ror	r30
    130e:	9f 5f       	subi	r25, 0xFF	; 255
    1310:	c1 f7       	brne	.-16     	; 0x1302 <__mulsf3_pse+0x90>
    1312:	fe 2b       	or	r31, r30
    1314:	88 0f       	add	r24, r24
    1316:	91 1d       	adc	r25, r1
    1318:	96 95       	lsr	r25
    131a:	87 95       	ror	r24
    131c:	97 f9       	bld	r25, 7
    131e:	08 95       	ret

00001320 <round>:
    1320:	0e 94 fd 08 	call	0x11fa	; 0x11fa <__fp_splitA>
    1324:	e8 f0       	brcs	.+58     	; 0x1360 <round+0x40>
    1326:	9e 37       	cpi	r25, 0x7E	; 126
    1328:	e8 f0       	brcs	.+58     	; 0x1364 <round+0x44>
    132a:	96 39       	cpi	r25, 0x96	; 150
    132c:	b8 f4       	brcc	.+46     	; 0x135c <round+0x3c>
    132e:	9e 38       	cpi	r25, 0x8E	; 142
    1330:	48 f4       	brcc	.+18     	; 0x1344 <round+0x24>
    1332:	67 2f       	mov	r22, r23
    1334:	78 2f       	mov	r23, r24
    1336:	88 27       	eor	r24, r24
    1338:	98 5f       	subi	r25, 0xF8	; 248
    133a:	f9 cf       	rjmp	.-14     	; 0x132e <round+0xe>
    133c:	86 95       	lsr	r24
    133e:	77 95       	ror	r23
    1340:	67 95       	ror	r22
    1342:	93 95       	inc	r25
    1344:	95 39       	cpi	r25, 0x95	; 149
    1346:	d0 f3       	brcs	.-12     	; 0x133c <round+0x1c>
    1348:	b6 2f       	mov	r27, r22
    134a:	b1 70       	andi	r27, 0x01	; 1
    134c:	6b 0f       	add	r22, r27
    134e:	71 1d       	adc	r23, r1
    1350:	81 1d       	adc	r24, r1
    1352:	20 f4       	brcc	.+8      	; 0x135c <round+0x3c>
    1354:	87 95       	ror	r24
    1356:	77 95       	ror	r23
    1358:	67 95       	ror	r22
    135a:	93 95       	inc	r25
    135c:	0c 94 b4 09 	jmp	0x1368	; 0x1368 <__fp_mintl>
    1360:	0c 94 cf 09 	jmp	0x139e	; 0x139e <__fp_mpack>
    1364:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_szero>

00001368 <__fp_mintl>:
    1368:	88 23       	and	r24, r24
    136a:	71 f4       	brne	.+28     	; 0x1388 <__fp_mintl+0x20>
    136c:	77 23       	and	r23, r23
    136e:	21 f0       	breq	.+8      	; 0x1378 <__fp_mintl+0x10>
    1370:	98 50       	subi	r25, 0x08	; 8
    1372:	87 2b       	or	r24, r23
    1374:	76 2f       	mov	r23, r22
    1376:	07 c0       	rjmp	.+14     	; 0x1386 <__fp_mintl+0x1e>
    1378:	66 23       	and	r22, r22
    137a:	11 f4       	brne	.+4      	; 0x1380 <__fp_mintl+0x18>
    137c:	99 27       	eor	r25, r25
    137e:	0d c0       	rjmp	.+26     	; 0x139a <__fp_mintl+0x32>
    1380:	90 51       	subi	r25, 0x10	; 16
    1382:	86 2b       	or	r24, r22
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	2a f0       	brmi	.+10     	; 0x1394 <__fp_mintl+0x2c>
    138a:	9a 95       	dec	r25
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	da f7       	brpl	.-10     	; 0x138a <__fp_mintl+0x22>
    1394:	88 0f       	add	r24, r24
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret

0000139e <__fp_mpack>:
    139e:	9f 3f       	cpi	r25, 0xFF	; 255
    13a0:	31 f0       	breq	.+12     	; 0x13ae <__fp_mpack_finite+0xc>

000013a2 <__fp_mpack_finite>:
    13a2:	91 50       	subi	r25, 0x01	; 1
    13a4:	20 f4       	brcc	.+8      	; 0x13ae <__fp_mpack_finite+0xc>
    13a6:	87 95       	ror	r24
    13a8:	77 95       	ror	r23
    13aa:	67 95       	ror	r22
    13ac:	b7 95       	ror	r27
    13ae:	88 0f       	add	r24, r24
    13b0:	91 1d       	adc	r25, r1
    13b2:	96 95       	lsr	r25
    13b4:	87 95       	ror	r24
    13b6:	97 f9       	bld	r25, 7
    13b8:	08 95       	ret

000013ba <__divmodsi4>:
    13ba:	05 2e       	mov	r0, r21
    13bc:	97 fb       	bst	r25, 7
    13be:	1e f4       	brtc	.+6      	; 0x13c6 <__divmodsi4+0xc>
    13c0:	00 94       	com	r0
    13c2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__negsi2>
    13c6:	57 fd       	sbrc	r21, 7
    13c8:	07 d0       	rcall	.+14     	; 0x13d8 <__divmodsi4_neg2>
    13ca:	0e 94 04 0a 	call	0x1408	; 0x1408 <__udivmodsi4>
    13ce:	07 fc       	sbrc	r0, 7
    13d0:	03 d0       	rcall	.+6      	; 0x13d8 <__divmodsi4_neg2>
    13d2:	4e f4       	brtc	.+18     	; 0x13e6 <__divmodsi4_exit>
    13d4:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__negsi2>

000013d8 <__divmodsi4_neg2>:
    13d8:	50 95       	com	r21
    13da:	40 95       	com	r20
    13dc:	30 95       	com	r19
    13de:	21 95       	neg	r18
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	4f 4f       	sbci	r20, 0xFF	; 255
    13e4:	5f 4f       	sbci	r21, 0xFF	; 255

000013e6 <__divmodsi4_exit>:
    13e6:	08 95       	ret

000013e8 <__negsi2>:
    13e8:	90 95       	com	r25
    13ea:	80 95       	com	r24
    13ec:	70 95       	com	r23
    13ee:	61 95       	neg	r22
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	8f 4f       	sbci	r24, 0xFF	; 255
    13f4:	9f 4f       	sbci	r25, 0xFF	; 255
    13f6:	08 95       	ret

000013f8 <__mulshisi3>:
    13f8:	b7 ff       	sbrs	r27, 7
    13fa:	0c 94 26 0a 	jmp	0x144c	; 0x144c <__muluhisi3>

000013fe <__mulohisi3>:
    13fe:	0e 94 26 0a 	call	0x144c	; 0x144c <__muluhisi3>
    1402:	82 1b       	sub	r24, r18
    1404:	93 0b       	sbc	r25, r19
    1406:	08 95       	ret

00001408 <__udivmodsi4>:
    1408:	a1 e2       	ldi	r26, 0x21	; 33
    140a:	1a 2e       	mov	r1, r26
    140c:	aa 1b       	sub	r26, r26
    140e:	bb 1b       	sub	r27, r27
    1410:	fd 01       	movw	r30, r26
    1412:	0d c0       	rjmp	.+26     	; 0x142e <__udivmodsi4_ep>

00001414 <__udivmodsi4_loop>:
    1414:	aa 1f       	adc	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	ee 1f       	adc	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	a2 17       	cp	r26, r18
    141e:	b3 07       	cpc	r27, r19
    1420:	e4 07       	cpc	r30, r20
    1422:	f5 07       	cpc	r31, r21
    1424:	20 f0       	brcs	.+8      	; 0x142e <__udivmodsi4_ep>
    1426:	a2 1b       	sub	r26, r18
    1428:	b3 0b       	sbc	r27, r19
    142a:	e4 0b       	sbc	r30, r20
    142c:	f5 0b       	sbc	r31, r21

0000142e <__udivmodsi4_ep>:
    142e:	66 1f       	adc	r22, r22
    1430:	77 1f       	adc	r23, r23
    1432:	88 1f       	adc	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	1a 94       	dec	r1
    1438:	69 f7       	brne	.-38     	; 0x1414 <__udivmodsi4_loop>
    143a:	60 95       	com	r22
    143c:	70 95       	com	r23
    143e:	80 95       	com	r24
    1440:	90 95       	com	r25
    1442:	9b 01       	movw	r18, r22
    1444:	ac 01       	movw	r20, r24
    1446:	bd 01       	movw	r22, r26
    1448:	cf 01       	movw	r24, r30
    144a:	08 95       	ret

0000144c <__muluhisi3>:
    144c:	0e 94 31 0a 	call	0x1462	; 0x1462 <__umulhisi3>
    1450:	a5 9f       	mul	r26, r21
    1452:	90 0d       	add	r25, r0
    1454:	b4 9f       	mul	r27, r20
    1456:	90 0d       	add	r25, r0
    1458:	a4 9f       	mul	r26, r20
    145a:	80 0d       	add	r24, r0
    145c:	91 1d       	adc	r25, r1
    145e:	11 24       	eor	r1, r1
    1460:	08 95       	ret

00001462 <__umulhisi3>:
    1462:	a2 9f       	mul	r26, r18
    1464:	b0 01       	movw	r22, r0
    1466:	b3 9f       	mul	r27, r19
    1468:	c0 01       	movw	r24, r0
    146a:	a3 9f       	mul	r26, r19
    146c:	70 0d       	add	r23, r0
    146e:	81 1d       	adc	r24, r1
    1470:	11 24       	eor	r1, r1
    1472:	91 1d       	adc	r25, r1
    1474:	b2 9f       	mul	r27, r18
    1476:	70 0d       	add	r23, r0
    1478:	81 1d       	adc	r24, r1
    147a:	11 24       	eor	r1, r1
    147c:	91 1d       	adc	r25, r1
    147e:	08 95       	ret

00001480 <_exit>:
    1480:	f8 94       	cli

00001482 <__stop_program>:
    1482:	ff cf       	rjmp	.-2      	; 0x1482 <__stop_program>
