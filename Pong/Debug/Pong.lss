
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000005ac  00000640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080011c  0080011c  0000065c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000006d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018fd  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e74  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4b  00000000  00000000  00002f81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00003ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000750  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e3  00000000  00000000  000046a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000508b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec ea       	ldi	r30, 0xAC	; 172
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 31       	cpi	r26, 0x1C	; 28
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac e1       	ldi	r26, 0x1C	; 28
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 31       	cpi	r26, 0x1F	; 31
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 78 02 	call	0x4f0	; 0x4f0 <main>
  ea:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TIM1_COMPA>:
  f2:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <__data_end>
  f6:	30 fd       	sbrc	r19, 0
  f8:	06 c0       	rjmp	.+12     	; 0x106 <ONE>
  fa:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <freq_low>
  fe:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <freq_high>
 102:	31 e0       	ldi	r19, 0x01	; 1
 104:	20 c0       	rjmp	.+64     	; 0x146 <BEGIN>

00000106 <ONE>:
 106:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <freq_low>
 10a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <freq_high>
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <max_cycle_L>
 114:	50 91 18 01 	lds	r21, 0x0118	; 0x800118 <max_cycle_H>
 118:	60 91 1e 01 	lds	r22, 0x011E	; 0x80011e <cycle_count_L>
 11c:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <cycle_count_H>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	68 0f       	add	r22, r24
 124:	73 1f       	adc	r23, r19
 126:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <cycle_count_L>
 12a:	70 93 1d 01 	sts	0x011D, r23	; 0x80011d <cycle_count_H>
 12e:	46 17       	cp	r20, r22
 130:	57 07       	cpc	r21, r23
 132:	4c f4       	brge	.+18     	; 0x146 <BEGIN>
 134:	f8 94       	cli
 136:	a0 e0       	ldi	r26, 0x00	; 0
 138:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 13c:	a6 bf       	out	0x36, r26	; 54
 13e:	a0 e0       	ldi	r26, 0x00	; 0
 140:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 144:	78 94       	sei

00000146 <BEGIN>:
 146:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 14a:	9a 0f       	add	r25, r26
 14c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 150:	2a 1f       	adc	r18, r26
 152:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 156:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 15a:	30 fd       	sbrc	r19, 0
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Return>

0000015e <Return>:
 15e:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <__data_end>
 162:	08 95       	ret

00000164 <ResetBoard>:
#include <stdbool.h>
#include "Input.h"
#include <util/delay.h>

void ResetBoard(struct Player *player)
{
 164:	fc 01       	movw	r30, r24
	player[0].downFlag = false;
 166:	11 82       	std	Z+1, r1	; 0x01
	player[0].upFlag = false;
 168:	10 82       	st	Z, r1
	player[1].downFlag = false;
 16a:	15 82       	std	Z+5, r1	; 0x05
	player[1].upFlag = false;
 16c:	14 82       	std	Z+4, r1	; 0x04
		
	player[0].xPos = 0;
 16e:	12 82       	std	Z+2, r1	; 0x02
	player[0].yPos = 2;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	83 83       	std	Z+3, r24	; 0x03
	player[1].xPos = 17;
 174:	91 e1       	ldi	r25, 0x11	; 17
 176:	96 83       	std	Z+6, r25	; 0x06
	player[1].yPos = 2;
 178:	87 83       	std	Z+7, r24	; 0x07
 17a:	08 95       	ret

0000017c <UpdateBoard>:
}

void UpdateBoard(struct Player *player)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
	SendCommand(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 b5 01 	call	0x36a	; 0x36a <SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	8f ed       	ldi	r24, 0xDF	; 223
 18a:	9e e2       	ldi	r25, 0x2E	; 46
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <UpdateBoard+0x10>
 190:	00 c0       	rjmp	.+0      	; 0x192 <UpdateBoard+0x16>
 192:	00 00       	nop
	_delay_ms(3);
	SendCommand(0x02);
 194:	82 e0       	ldi	r24, 0x02	; 2
 196:	0e 94 b5 01 	call	0x36a	; 0x36a <SendCommand>
	SetCursorPosition(player[0].xPos, player[0].yPos);
 19a:	6b 81       	ldd	r22, Y+3	; 0x03
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	0e 94 4e 02 	call	0x49c	; 0x49c <SetCursorPosition>
	SendData(0x7C);
 1a2:	8c e7       	ldi	r24, 0x7C	; 124
 1a4:	0e 94 c7 01 	call	0x38e	; 0x38e <SendData>
	SetCursorPosition((player[0].xPos), (player[0].yPos + 1));
 1a8:	6b 81       	ldd	r22, Y+3	; 0x03
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
 1ac:	8a 81       	ldd	r24, Y+2	; 0x02
 1ae:	0e 94 4e 02 	call	0x49c	; 0x49c <SetCursorPosition>
	SendData(0x7C);
 1b2:	8c e7       	ldi	r24, 0x7C	; 124
 1b4:	0e 94 c7 01 	call	0x38e	; 0x38e <SendData>
	SetCursorPosition(player[1].xPos, player[1].yPos);
 1b8:	6f 81       	ldd	r22, Y+7	; 0x07
 1ba:	8e 81       	ldd	r24, Y+6	; 0x06
 1bc:	0e 94 4e 02 	call	0x49c	; 0x49c <SetCursorPosition>
	SendData(0x7C);
 1c0:	8c e7       	ldi	r24, 0x7C	; 124
 1c2:	0e 94 c7 01 	call	0x38e	; 0x38e <SendData>
	SetCursorPosition(player[1].xPos, (player[1].yPos + 1));
 1c6:	6f 81       	ldd	r22, Y+7	; 0x07
 1c8:	6f 5f       	subi	r22, 0xFF	; 255
 1ca:	8e 81       	ldd	r24, Y+6	; 0x06
 1cc:	0e 94 4e 02 	call	0x49c	; 0x49c <SetCursorPosition>
	SendData(0x7C);
 1d0:	8c e7       	ldi	r24, 0x7C	; 124
 1d2:	0e 94 c7 01 	call	0x38e	; 0x38e <SendData>
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <InitInputs>:
#include <avr/io.h>

void InitInputs(struct Player *player)
{	
	//Initializing data direction register for button ports to be Inputs
	DDRC |= (0 << DDRC3);
 1dc:	87 b1       	in	r24, 0x07	; 7
 1de:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC2);
 1e0:	87 b1       	in	r24, 0x07	; 7
 1e2:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC1);
 1e4:	87 b1       	in	r24, 0x07	; 7
 1e6:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC0);
 1e8:	87 b1       	in	r24, 0x07	; 7
 1ea:	87 b9       	out	0x07, r24	; 7
	
	//Initializing ports of buttons to produce a signal enabling ()
	PORTC |= (1 << PORTC3);
 1ec:	88 b1       	in	r24, 0x08	; 8
 1ee:	88 60       	ori	r24, 0x08	; 8
 1f0:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC2);
 1f2:	88 b1       	in	r24, 0x08	; 8
 1f4:	84 60       	ori	r24, 0x04	; 4
 1f6:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC1);
 1f8:	88 b1       	in	r24, 0x08	; 8
 1fa:	82 60       	ori	r24, 0x02	; 2
 1fc:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC0);
 1fe:	88 b1       	in	r24, 0x08	; 8
 200:	81 60       	ori	r24, 0x01	; 1
 202:	88 b9       	out	0x08, r24	; 8
	
	//Initializing LED output (CAN BE DELETED AFTER DEBUG PHASE)
	DDRB |= (1 << DDRB5);
 204:	84 b1       	in	r24, 0x04	; 4
 206:	80 62       	ori	r24, 0x20	; 32
 208:	84 b9       	out	0x04, r24	; 4
 20a:	08 95       	ret

0000020c <PollInputs>:
}

void PollInputs(struct Player *player)
{
 20c:	fc 01       	movw	r30, r24
	//Poll for first button
	if (!(BUTTON_PORTS & FIRST_BUTTON_PIN_LOCATION))
 20e:	33 99       	sbic	0x06, 3	; 6
 210:	03 c0       	rjmp	.+6      	; 0x218 <PollInputs+0xc>
	{
		player[0].downFlag = true;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	81 83       	std	Z+1, r24	; 0x01
 216:	01 c0       	rjmp	.+2      	; 0x21a <PollInputs+0xe>
	}
	else
	{
		player[0].downFlag = false;
 218:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//Poll for second button
	if (!(BUTTON_PORTS & SECOND_BUTTON_PIN_LOCATION))
 21a:	32 99       	sbic	0x06, 2	; 6
 21c:	03 c0       	rjmp	.+6      	; 0x224 <PollInputs+0x18>
	{
		player[0].upFlag = true;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 83       	st	Z, r24
 222:	01 c0       	rjmp	.+2      	; 0x226 <PollInputs+0x1a>
	}
	else
	{
		player[0].upFlag = false;
 224:	10 82       	st	Z, r1
	}
	
	//Poll for third button
	if (!(BUTTON_PORTS & THIRD_BUTTON_PIN_LOCATION))
 226:	31 99       	sbic	0x06, 1	; 6
 228:	03 c0       	rjmp	.+6      	; 0x230 <PollInputs+0x24>
	{
		player[1].downFlag = true;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	85 83       	std	Z+5, r24	; 0x05
 22e:	01 c0       	rjmp	.+2      	; 0x232 <PollInputs+0x26>
	}
	else
	{
		player[1].downFlag = false;
 230:	15 82       	std	Z+5, r1	; 0x05
	}
	
	//Poll for fourth button
	if (!(BUTTON_PORTS & FOURTH_BUTTON_PIN_LOCATION))
 232:	30 99       	sbic	0x06, 0	; 6
 234:	03 c0       	rjmp	.+6      	; 0x23c <PollInputs+0x30>
	{
		player[1].upFlag = true;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	84 83       	std	Z+4, r24	; 0x04
 23a:	08 95       	ret
	}
	else
	{
		player[1].upFlag = false;
 23c:	14 82       	std	Z+4, r1	; 0x04
 23e:	08 95       	ret

00000240 <CheckInputs>:
	}
}

void CheckInputs(struct Player *player)
{
 240:	fc 01       	movw	r30, r24

	//checking for double inputs
	if ((player[0].downFlag == true) && (player[0].upFlag == true))
 242:	81 81       	ldd	r24, Z+1	; 0x01
 244:	88 23       	and	r24, r24
 246:	29 f0       	breq	.+10     	; 0x252 <CheckInputs+0x12>
 248:	80 81       	ld	r24, Z
 24a:	88 23       	and	r24, r24
 24c:	11 f0       	breq	.+4      	; 0x252 <CheckInputs+0x12>
	{
		player[0].downFlag = false;
 24e:	11 82       	std	Z+1, r1	; 0x01
		player[0].upFlag = false;
 250:	10 82       	st	Z, r1
	}
	if ((player[1].downFlag == true) && (player[1].upFlag == true))
 252:	85 81       	ldd	r24, Z+5	; 0x05
 254:	88 23       	and	r24, r24
 256:	29 f0       	breq	.+10     	; 0x262 <CheckInputs+0x22>
 258:	84 81       	ldd	r24, Z+4	; 0x04
 25a:	88 23       	and	r24, r24
 25c:	11 f0       	breq	.+4      	; 0x262 <CheckInputs+0x22>
	{
		player[1].downFlag = false;
 25e:	15 82       	std	Z+5, r1	; 0x05
		player[1].upFlag = false;
 260:	14 82       	std	Z+4, r1	; 0x04
	}
	
	//Checking up flag boundaries
	if ((player[0].upFlag == true) && (player[0].yPos <= 1))
 262:	80 81       	ld	r24, Z
 264:	88 23       	and	r24, r24
 266:	21 f0       	breq	.+8      	; 0x270 <CheckInputs+0x30>
 268:	83 81       	ldd	r24, Z+3	; 0x03
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	08 f4       	brcc	.+2      	; 0x270 <CheckInputs+0x30>
	{
		player[0].upFlag = false;
 26e:	10 82       	st	Z, r1
	}
	if ((player[1].upFlag == true) && (player[1].yPos <= 1))
 270:	84 81       	ldd	r24, Z+4	; 0x04
 272:	88 23       	and	r24, r24
 274:	21 f0       	breq	.+8      	; 0x27e <CheckInputs+0x3e>
 276:	87 81       	ldd	r24, Z+7	; 0x07
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	08 f4       	brcc	.+2      	; 0x27e <CheckInputs+0x3e>
	{
		player[1].upFlag = false;
 27c:	14 82       	std	Z+4, r1	; 0x04
	}
	
	//Checking down flag boundaries
	if ((player[0].downFlag == true) && (player[0].yPos >= 3))
 27e:	81 81       	ldd	r24, Z+1	; 0x01
 280:	88 23       	and	r24, r24
 282:	21 f0       	breq	.+8      	; 0x28c <CheckInputs+0x4c>
 284:	83 81       	ldd	r24, Z+3	; 0x03
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	08 f0       	brcs	.+2      	; 0x28c <CheckInputs+0x4c>
	{
		player[0].downFlag = false;
 28a:	11 82       	std	Z+1, r1	; 0x01
	}
	if ((player[1].downFlag == true) && (player[1].yPos >= 3))
 28c:	85 81       	ldd	r24, Z+5	; 0x05
 28e:	88 23       	and	r24, r24
 290:	21 f0       	breq	.+8      	; 0x29a <CheckInputs+0x5a>
 292:	87 81       	ldd	r24, Z+7	; 0x07
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	08 f0       	brcs	.+2      	; 0x29a <CheckInputs+0x5a>
	{
		player[1].downFlag = false;
 298:	15 82       	std	Z+5, r1	; 0x05
 29a:	08 95       	ret

0000029c <ExecuteInputs>:
		//PORTB = (0 << PORTB5);
	//}
}

void ExecuteInputs(struct Player *player)
{
 29c:	fc 01       	movw	r30, r24
	if (player[0].upFlag)
 29e:	80 81       	ld	r24, Z
 2a0:	88 23       	and	r24, r24
 2a2:	19 f0       	breq	.+6      	; 0x2aa <ExecuteInputs+0xe>
	{	
		player[0].yPos -= 1;
 2a4:	83 81       	ldd	r24, Z+3	; 0x03
 2a6:	81 50       	subi	r24, 0x01	; 1
 2a8:	83 83       	std	Z+3, r24	; 0x03
	}
	if (player[0].downFlag)
 2aa:	81 81       	ldd	r24, Z+1	; 0x01
 2ac:	88 23       	and	r24, r24
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <ExecuteInputs+0x1a>
	{
		player[0].yPos += 1;
 2b0:	83 81       	ldd	r24, Z+3	; 0x03
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	83 83       	std	Z+3, r24	; 0x03
	}
	if (player[1].upFlag)
 2b6:	84 81       	ldd	r24, Z+4	; 0x04
 2b8:	88 23       	and	r24, r24
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <ExecuteInputs+0x26>
	{
		player[1].yPos -= 1;
 2bc:	87 81       	ldd	r24, Z+7	; 0x07
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	87 83       	std	Z+7, r24	; 0x07
	}
	if (player[1].downFlag)
 2c2:	85 81       	ldd	r24, Z+5	; 0x05
 2c4:	88 23       	and	r24, r24
 2c6:	19 f0       	breq	.+6      	; 0x2ce <ExecuteInputs+0x32>
	{
		player[1].yPos += 1;
 2c8:	87 81       	ldd	r24, Z+7	; 0x07
 2ca:	8f 5f       	subi	r24, 0xFF	; 255
 2cc:	87 83       	std	Z+7, r24	; 0x07
 2ce:	08 95       	ret

000002d0 <BeginTransmisson>:
}

void DisplayCursor(uint8_t* displayControl)
{
	*displayControl |= 0x02;
	SendCommand(*displayControl | 0x08);
 2d0:	84 ea       	ldi	r24, 0xA4	; 164
 2d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2da:	88 23       	and	r24, r24
 2dc:	e4 f7       	brge	.-8      	; 0x2d6 <BeginTransmisson+0x6>
 2de:	8e e4       	ldi	r24, 0x4E	; 78
 2e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2e4:	84 e8       	ldi	r24, 0x84	; 132
 2e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ee:	88 23       	and	r24, r24
 2f0:	e4 f7       	brge	.-8      	; 0x2ea <BeginTransmisson+0x1a>
 2f2:	08 95       	ret

000002f4 <EndTransmisson>:
 2f4:	84 e9       	ldi	r24, 0x94	; 148
 2f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2fa:	8f e8       	ldi	r24, 0x8F	; 143
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <EndTransmisson+0xa>
 302:	00 c0       	rjmp	.+0      	; 0x304 <EndTransmisson+0x10>
 304:	00 00       	nop
 306:	08 95       	ret

00000308 <ExpanderWrite>:
 308:	cf 93       	push	r28
 30a:	c8 2f       	mov	r28, r24
 30c:	87 e2       	ldi	r24, 0x27	; 39
 30e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <BeginTransmisson>
 312:	c8 60       	ori	r28, 0x08	; 8
 314:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 318:	84 e8       	ldi	r24, 0x84	; 132
 31a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 31e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 322:	88 23       	and	r24, r24
 324:	e4 f7       	brge	.-8      	; 0x31e <ExpanderWrite+0x16>
 326:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <EndTransmisson>
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <PulseEnable>:
 32e:	cf 93       	push	r28
 330:	c8 2f       	mov	r28, r24
 332:	84 60       	ori	r24, 0x04	; 4
 334:	0e 94 84 01 	call	0x308	; 0x308 <ExpanderWrite>
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	8a 95       	dec	r24
 33c:	f1 f7       	brne	.-4      	; 0x33a <PulseEnable+0xc>
 33e:	00 00       	nop
 340:	8c 2f       	mov	r24, r28
 342:	8b 7f       	andi	r24, 0xFB	; 251
 344:	0e 94 84 01 	call	0x308	; 0x308 <ExpanderWrite>
 348:	87 ec       	ldi	r24, 0xC7	; 199
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	01 97       	sbiw	r24, 0x01	; 1
 34e:	f1 f7       	brne	.-4      	; 0x34c <PulseEnable+0x1e>
 350:	00 c0       	rjmp	.+0      	; 0x352 <PulseEnable+0x24>
 352:	00 00       	nop
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <Write4Bits>:
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
 35c:	0e 94 84 01 	call	0x308	; 0x308 <ExpanderWrite>
 360:	8c 2f       	mov	r24, r28
 362:	0e 94 97 01 	call	0x32e	; 0x32e <PulseEnable>
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <SendCommand>:
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
 36e:	80 7f       	andi	r24, 0xF0	; 240
 370:	0e 94 ac 01 	call	0x358	; 0x358 <Write4Bits>
 374:	8c 2f       	mov	r24, r28
 376:	82 95       	swap	r24
 378:	80 7f       	andi	r24, 0xF0	; 240
 37a:	0e 94 ac 01 	call	0x358	; 0x358 <Write4Bits>
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <SendCommand+0x18>
 386:	00 c0       	rjmp	.+0      	; 0x388 <SendCommand+0x1e>
 388:	00 00       	nop
 38a:	cf 91       	pop	r28
 38c:	08 95       	ret

0000038e <SendData>:
}

void SendData(uint8_t value)
{
 38e:	cf 93       	push	r28
 390:	c8 2f       	mov	r28, r24
	Write4Bits((value & 0xF0) | 0x01);
 392:	80 7f       	andi	r24, 0xF0	; 240
 394:	81 60       	ori	r24, 0x01	; 1
 396:	0e 94 ac 01 	call	0x358	; 0x358 <Write4Bits>
	Write4Bits(((value << 4) & 0xF0) | 0x01);
 39a:	20 e1       	ldi	r18, 0x10	; 16
 39c:	c2 9f       	mul	r28, r18
 39e:	c0 01       	movw	r24, r0
 3a0:	11 24       	eor	r1, r1
 3a2:	81 60       	ori	r24, 0x01	; 1
 3a4:	0e 94 ac 01 	call	0x358	; 0x358 <Write4Bits>
 3a8:	8f e9       	ldi	r24, 0x9F	; 159
 3aa:	9f e0       	ldi	r25, 0x0F	; 15
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <SendData+0x1e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <SendData+0x24>
 3b2:	00 00       	nop
	_delay_ms(1);
}
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <CreateCustomChar>:
void CreateCustomChar(uint8_t location, uint8_t charmap[]){
 3b8:	ff 92       	push	r15
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	f8 2e       	mov	r15, r24
 3c4:	8b 01       	movw	r16, r22
	for(int i=0; i<8; i++){
 3c6:	c0 e0       	ldi	r28, 0x00	; 0
 3c8:	d0 e0       	ldi	r29, 0x00	; 0
 3ca:	10 c0       	rjmp	.+32     	; 0x3ec <CreateCustomChar+0x34>
		SendCommand(0x40|((location&0x07)<<3)+i);
 3cc:	8f 2d       	mov	r24, r15
 3ce:	87 70       	andi	r24, 0x07	; 7
 3d0:	88 0f       	add	r24, r24
 3d2:	88 0f       	add	r24, r24
 3d4:	88 0f       	add	r24, r24
 3d6:	8c 0f       	add	r24, r28
 3d8:	80 64       	ori	r24, 0x40	; 64
 3da:	0e 94 b5 01 	call	0x36a	; 0x36a <SendCommand>
		SendData(charmap[i]);
 3de:	f8 01       	movw	r30, r16
 3e0:	ec 0f       	add	r30, r28
 3e2:	fd 1f       	adc	r31, r29
 3e4:	80 81       	ld	r24, Z
 3e6:	0e 94 c7 01 	call	0x38e	; 0x38e <SendData>
	Write4Bits((value & 0xF0) | 0x01);
	Write4Bits(((value << 4) & 0xF0) | 0x01);
	_delay_ms(1);
}
void CreateCustomChar(uint8_t location, uint8_t charmap[]){
	for(int i=0; i<8; i++){
 3ea:	21 96       	adiw	r28, 0x01	; 1
 3ec:	c8 30       	cpi	r28, 0x08	; 8
 3ee:	d1 05       	cpc	r29, r1
 3f0:	6c f3       	brlt	.-38     	; 0x3cc <CreateCustomChar+0x14>
		SendCommand(0x40|((location&0x07)<<3)+i);
		SendData(charmap[i]);
	}
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	08 95       	ret

000003fe <InitLCD>:
char right_wall[8]={0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01};


void InitLCD()
{	
	DDRC |= (0 << DDRC4);
 3fe:	87 b1       	in	r24, 0x07	; 7
 400:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC5);
 402:	87 b1       	in	r24, 0x07	; 7
 404:	87 b9       	out	0x07, r24	; 7
	
	PORTC |= (1 << LCD_SDA_PORT);
 406:	88 b1       	in	r24, 0x08	; 8
 408:	80 61       	ori	r24, 0x10	; 16
 40a:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << LCD_SCL_PORT);
 40c:	88 b1       	in	r24, 0x08	; 8
 40e:	80 62       	ori	r24, 0x20	; 32
 410:	88 b9       	out	0x08, r24	; 8

    // Calculate the closest TWBR value based on the desired bit rate and prescaler
    // The closest prescaler for 100 kHz is 16, so we'll use that

    // Set the TWBR value and prescaler bits in the TWCR register
    TWBR0 = 72;
 412:	88 e4       	ldi	r24, 0x48	; 72
 414:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWSR0 = (0 << TWPS1) | (0 << TWPS0); // Set prescaler to 16
 418:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

    // Enable TWI
    TWCR0 = (1 << TWEN);
 41c:	84 e0       	ldi	r24, 0x04	; 4
 41e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	ExpanderWrite(BACKLIGHT_VALUE);
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	0e 94 84 01 	call	0x308	; 0x308 <ExpanderWrite>

	Write4Bits(0x03 >> 4); // Initialization for 4-bit mode (First time)
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 ac 01 	call	0x358	; 0x358 <Write4Bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42e:	8f e4       	ldi	r24, 0x4F	; 79
 430:	96 e4       	ldi	r25, 0x46	; 70
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 438:	00 00       	nop
	_delay_us(4500);      // Wait for 5ms

	Write4Bits(0x30 >> 4); // Initialization for 4-bit mode (First time)
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	0e 94 ac 01 	call	0x358	; 0x358 <Write4Bits>
 440:	8f e4       	ldi	r24, 0x4F	; 79
 442:	96 e4       	ldi	r25, 0x46	; 70
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
	_delay_us(4500);      // Wait for 5ms

	Write4Bits(0x30 >> 4); // Initialization for 4-bit mode (Third time)
 44c:	83 e0       	ldi	r24, 0x03	; 3
 44e:	0e 94 ac 01 	call	0x358	; 0x358 <Write4Bits>
 452:	87 e5       	ldi	r24, 0x57	; 87
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	01 97       	sbiw	r24, 0x01	; 1
 458:	f1 f7       	brne	.-4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45a:	00 c0       	rjmp	.+0      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 45c:	00 00       	nop
	_delay_us(150);    // Wait for 150us

	Write4Bits(0x20 >> 4); // Initialization for 4-bit mode (Final time, sets 4-bit mode)
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	0e 94 ac 01 	call	0x358	; 0x358 <Write4Bits>
	
	SendCommand(0x28);
 464:	88 e2       	ldi	r24, 0x28	; 40
 466:	0e 94 b5 01 	call	0x36a	; 0x36a <SendCommand>
	SendCommand(0x0C);
 46a:	8c e0       	ldi	r24, 0x0C	; 12
 46c:	0e 94 b5 01 	call	0x36a	; 0x36a <SendCommand>
	CreateCustomChar(0x01,ball);
 470:	60 e1       	ldi	r22, 0x10	; 16
 472:	71 e0       	ldi	r23, 0x01	; 1
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <CreateCustomChar>
	CreateCustomChar(0x02,left_wall);
 47c:	68 e0       	ldi	r22, 0x08	; 8
 47e:	71 e0       	ldi	r23, 0x01	; 1
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <CreateCustomChar>
	CreateCustomChar(0x03,right_wall);
 488:	60 e0       	ldi	r22, 0x00	; 0
 48a:	71 e0       	ldi	r23, 0x01	; 1
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <CreateCustomChar>
	SendCommand(0x01);
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 b5 01 	call	0x36a	; 0x36a <SendCommand>
 49a:	08 95       	ret

0000049c <SetCursorPosition>:
		SendData(charmap[i]);
	}
}

void SetCursorPosition(uint8_t xCoord, uint8_t yCoord)
{
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	18 2f       	mov	r17, r24
 4a4:	c6 2f       	mov	r28, r22
	SendCommand(0x02);
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	0e 94 b5 01 	call	0x36a	; 0x36a <SendCommand>
	uint8_t createdAddress = 0;
	
	switch (yCoord)
 4ac:	c2 30       	cpi	r28, 0x02	; 2
 4ae:	21 f0       	breq	.+8      	; 0x4b8 <SetCursorPosition+0x1c>
 4b0:	c3 30       	cpi	r28, 0x03	; 3
 4b2:	19 f4       	brne	.+6      	; 0x4ba <SetCursorPosition+0x1e>
	{
		case 2:
		yCoord = 3;
		break;
		case 3:
		yCoord = 2;
 4b4:	c2 e0       	ldi	r28, 0x02	; 2
		break;
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <SetCursorPosition+0x1e>
	uint8_t createdAddress = 0;
	
	switch (yCoord)
	{
		case 2:
		yCoord = 3;
 4b8:	c3 e0       	ldi	r28, 0x03	; 3
		break;
		default:
		break;
	}

	for (int i = yCoord; i > 1; i--)
 4ba:	6c 2f       	mov	r22, r28
 4bc:	70 e0       	ldi	r23, 0x00	; 0
}

void SetCursorPosition(uint8_t xCoord, uint8_t yCoord)
{
	SendCommand(0x02);
	uint8_t createdAddress = 0;
 4be:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}

	for (int i = yCoord; i > 1; i--)
 4c0:	03 c0       	rjmp	.+6      	; 0x4c8 <SetCursorPosition+0x2c>
	{
		createdAddress += 20;
 4c2:	8c 5e       	subi	r24, 0xEC	; 236
		break;
		default:
		break;
	}

	for (int i = yCoord; i > 1; i--)
 4c4:	61 50       	subi	r22, 0x01	; 1
 4c6:	71 09       	sbc	r23, r1
 4c8:	62 30       	cpi	r22, 0x02	; 2
 4ca:	71 05       	cpc	r23, r1
 4cc:	d4 f7       	brge	.-12     	; 0x4c2 <SetCursorPosition+0x26>
	{
		createdAddress += 20;
	}
	createdAddress += xCoord;
 4ce:	18 0f       	add	r17, r24
	for (int i = 0; i <= createdAddress; i++)
 4d0:	c0 e0       	ldi	r28, 0x00	; 0
 4d2:	d0 e0       	ldi	r29, 0x00	; 0
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <SetCursorPosition+0x42>
	{
		SendCommand(0x14);
 4d6:	84 e1       	ldi	r24, 0x14	; 20
 4d8:	0e 94 b5 01 	call	0x36a	; 0x36a <SendCommand>
	for (int i = yCoord; i > 1; i--)
	{
		createdAddress += 20;
	}
	createdAddress += xCoord;
	for (int i = 0; i <= createdAddress; i++)
 4dc:	21 96       	adiw	r28, 0x01	; 1
 4de:	21 2f       	mov	r18, r17
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	2c 17       	cp	r18, r28
 4e4:	3d 07       	cpc	r19, r29
 4e6:	bc f7       	brge	.-18     	; 0x4d6 <SetCursorPosition+0x3a>
		SendCommand(0x14);
	}
	//createdAddress += xCoord;
	//
	//SendCommand(createdAddress | DDRAM_PRESCALER);
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	08 95       	ret

000004f0 <main>:
#include "Input.h"
#include "LCD.h"
#include "BoardManager.h"

int main(void)
{	
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	cd b7       	in	r28, 0x3d	; 61
 4f6:	de b7       	in	r29, 0x3e	; 62
 4f8:	28 97       	sbiw	r28, 0x08	; 8
 4fa:	0f b6       	in	r0, 0x3f	; 63
 4fc:	f8 94       	cli
 4fe:	de bf       	out	0x3e, r29	; 62
 500:	0f be       	out	0x3f, r0	; 63
 502:	cd bf       	out	0x3d, r28	; 61
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	83 ed       	ldi	r24, 0xD3	; 211
 508:	90 e3       	ldi	r25, 0x30	; 48
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0x1a>
 512:	00 c0       	rjmp	.+0      	; 0x514 <main+0x24>
 514:	00 00       	nop
	_delay_ms(1000);
	cli();
 516:	f8 94       	cli
	struct Player player[2];
	InitInputs(player);
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <InitInputs>
	InitLCD();
 520:	0e 94 ff 01 	call	0x3fe	; 0x3fe <InitLCD>
	ResetBoard(player);
 524:	ce 01       	movw	r24, r28
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	0e 94 b2 00 	call	0x164	; 0x164 <ResetBoard>
    while (1)
    {
	    PollInputs(player);
 52c:	ce 01       	movw	r24, r28
 52e:	01 96       	adiw	r24, 0x01	; 1
 530:	0e 94 06 01 	call	0x20c	; 0x20c <PollInputs>
	    CheckInputs(player);
 534:	ce 01       	movw	r24, r28
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	0e 94 20 01 	call	0x240	; 0x240 <CheckInputs>
		ExecuteInputs(player);
 53c:	ce 01       	movw	r24, r28
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	0e 94 4e 01 	call	0x29c	; 0x29c <ExecuteInputs>
		UpdateBoard(player);
 544:	ce 01       	movw	r24, r28
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	0e 94 be 00 	call	0x17c	; 0x17c <UpdateBoard>
 54c:	2f ef       	ldi	r18, 0xFF	; 255
 54e:	81 ee       	ldi	r24, 0xE1	; 225
 550:	94 e0       	ldi	r25, 0x04	; 4
 552:	21 50       	subi	r18, 0x01	; 1
 554:	80 40       	sbci	r24, 0x00	; 0
 556:	90 40       	sbci	r25, 0x00	; 0
 558:	e1 f7       	brne	.-8      	; 0x552 <main+0x62>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <main+0x6c>
 55c:	00 00       	nop
 55e:	e6 cf       	rjmp	.-52     	; 0x52c <main+0x3c>

00000560 <__vector_11>:
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	4f 93       	push	r20
 570:	5f 93       	push	r21
 572:	6f 93       	push	r22
 574:	7f 93       	push	r23
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	af 93       	push	r26
 57c:	bf 93       	push	r27
 57e:	ef 93       	push	r30
 580:	ff 93       	push	r31
 582:	0e 94 79 00 	call	0xf2	; 0xf2 <TIM1_COMPA>
 586:	ff 91       	pop	r31
 588:	ef 91       	pop	r30
 58a:	bf 91       	pop	r27
 58c:	af 91       	pop	r26
 58e:	9f 91       	pop	r25
 590:	8f 91       	pop	r24
 592:	7f 91       	pop	r23
 594:	6f 91       	pop	r22
 596:	5f 91       	pop	r21
 598:	4f 91       	pop	r20
 59a:	3f 91       	pop	r19
 59c:	2f 91       	pop	r18
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
