
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002d6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  0000036e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d03  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a46  00000000  00000000  00001163  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000060d  00000000  00000000  00001ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000021b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000559  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002da  00000000  00000000  00002811  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002aeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 ed       	ldi	r30, 0xD6	; 214
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 30       	cpi	r26, 0x07	; 7
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 55 01 	call	0x2aa	; 0x2aa <main>
  ea:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <SET_SPEAKER_PARAMS>:
.section ".text"			//student comment here


.global SET_SPEAKER_PARAMS
SET_SPEAKER_PARAMS:
		cli
  f2:	f8 94       	cli
		ldi	r16,0xFF				;PB1 or OC1A Output
  f4:	0f ef       	ldi	r16, 0xFF	; 255
		out	DDRB,r16
  f6:	04 b9       	out	0x04, r16	; 4
;initialize and start Timer A, compare match, interrupt enabled
		ldi	r16,0xC0			;set OC to compare match set output to high level
  f8:	00 ec       	ldi	r16, 0xC0	; 192
		sts TCCR1A,r16			;timer 1 control register a, Set OC1A/OC1B on compare match
  fa:	00 93 80 00 	sts	0x0080, r16	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		ldi r16,0x01			;set clock prescaler
  fe:	01 e0       	ldi	r16, 0x01	; 1
		sts TCCR1B,r16			;timber 1 control register b, clk io/64
 100:	00 93 81 00 	sts	0x0081, r16	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
		ldi r16,0x80			;force output compare, set PB1 high
 104:	00 e8       	ldi	r16, 0x80	; 128
		sts TCCR1C,r16			;student comment here
 106:	00 93 82 00 	sts	0x0082, r16	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
		ldi r16,0x40			;Student comment here
 10a:	00 e4       	ldi	r16, 0x40	; 64
		sts TCCR1A,r16			;student comment here
 10c:	00 93 80 00 	sts	0x0080, r16	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		lds r18, freq_high
 110:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		lds r17, freq_low
 114:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <freq_low>
		lds r16,TCNT1L			;student comment here
 118:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
		add r17,r16				;student comment here
 11c:	10 0f       	add	r17, r16
		lds r16,TCNT1H			;student comment here
 11e:	00 91 85 00 	lds	r16, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
		adc r18,r16				;student comment here
 122:	20 1f       	adc	r18, r16
		sts OCR1AH,r18			;student comment here
 124:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		sts OCR1AL,r17			;student comment here
 128:	10 93 88 00 	sts	0x0088, r17	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		ldi r19,0				;student comment here
 12c:	30 e0       	ldi	r19, 0x00	; 0
		ldi r16,0x02			;student comment here
 12e:	02 e0       	ldi	r16, 0x02	; 2
		sts TIMSK1,r16			;student comment here
 130:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		out TIFR1,r16			;student comment here
 134:	06 bf       	out	0x36, r16	; 54
		sei						;student comment here
 136:	78 94       	sei
ret
 138:	08 95       	ret

0000013a <TIM1_COMPA>:

.global TIM1_COMPA
TIM1_COMPA:
		lds		r19, cycle_level
 13a:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_end>
		sbrc	r19,0				;student comment here
 13e:	30 fd       	sbrc	r19, 0
		rjmp	ONE					;student cmment here
 140:	06 c0       	rjmp	.+12     	; 0x14e <ONE>
		lds		r17, freq_low			;student comment here
 142:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <freq_low>
		lds		r18, freq_high			;student comment here
 146:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,1				;student comment here
 14a:	31 e0       	ldi	r19, 0x01	; 1
		rjmp	BEGIN				;student comment here	
 14c:	20 c0       	rjmp	.+64     	; 0x18e <BEGIN>

0000014e <ONE>:
ONE:	lds		r17,freq_low			;student comment here
 14e:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <freq_low>
		lds		r18,freq_high			;student comment here
 152:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,0				;student comment here
 156:	30 e0       	ldi	r19, 0x00	; 0

		lds		r20, max_cycle_L
 158:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <max_cycle_L>
		lds		r21, max_cycle_H
 15c:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		lds		r22, cycle_count_L
 160:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <cycle_count_L>
		lds		r23, cycle_count_H
 164:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <cycle_count_H>
		ldi     r24, 0x1
 168:	81 e0       	ldi	r24, 0x01	; 1
		add     r22,r24
 16a:	68 0f       	add	r22, r24
		adc		r23,r19
 16c:	73 1f       	adc	r23, r19
		sts		cycle_count_L,r22
 16e:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <cycle_count_L>
		sts		cycle_count_H,r23
 172:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <cycle_count_H>
		cp		r20,r22
 176:	46 17       	cp	r20, r22
		cpc		r21,r23
 178:	57 07       	cpc	r21, r23
		brge	BEGIN
 17a:	4c f4       	brge	.+18     	; 0x18e <BEGIN>
		cli
 17c:	f8 94       	cli
		ldi r16,0x00			;student comment here
 17e:	00 e0       	ldi	r16, 0x00	; 0
		sts TIMSK1,r16			;student comment here
 180:	00 93 6f 00 	sts	0x006F, r16	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		out TIFR1,r16	
 184:	06 bf       	out	0x36, r16	; 54
		ldi r16,0x00			;Student comment here
 186:	00 e0       	ldi	r16, 0x00	; 0
		sts TCCR1A,r16
 188:	00 93 80 00 	sts	0x0080, r16	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sei
 18c:	78 94       	sei

0000018e <BEGIN>:

BEGIN:	lds		r16,OCR1AL			;student comment here
 18e:	00 91 88 00 	lds	r16, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		add		r17,r16				;student comment here
 192:	10 0f       	add	r17, r16
		lds		r16,OCR1AH			;student comment here
 194:	00 91 89 00 	lds	r16, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		adc		r18,r16				;student comment here
 198:	20 1f       	adc	r18, r16
		sts		OCR1AH,r18			;student comment here
 19a:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		sts		OCR1AL,r17			;student comment here
 19e:	10 93 88 00 	sts	0x0088, r17	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		sbrc r19,0
 1a2:	30 fd       	sbrc	r19, 0
		rjmp Return
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <Return>

000001a6 <Return>:
Return:
	sts cycle_level,r19
 1a6:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <__data_end>
	ret
 1aa:	08 95       	ret

000001ac <InitInputs>:
 */ 
#include "Input.h"
#include <avr/io.h>

void InitInputs(struct Player *player)
{
 1ac:	fc 01       	movw	r30, r24
	//Initializing Player Struct
	player[0].downFlag = false;
 1ae:	11 82       	std	Z+1, r1	; 0x01
	player[0].upFlag = false;
 1b0:	10 82       	st	Z, r1
	player[1].downFlag = false;
 1b2:	13 82       	std	Z+3, r1	; 0x03
	player[1].upFlag = false;
 1b4:	12 82       	std	Z+2, r1	; 0x02
	
	//Initializing data direction register for button ports to be Inputs
	DDRC |= (0 << DDRC5);
 1b6:	87 b1       	in	r24, 0x07	; 7
 1b8:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC4);
 1ba:	87 b1       	in	r24, 0x07	; 7
 1bc:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC3);
 1be:	87 b1       	in	r24, 0x07	; 7
 1c0:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC2);
 1c2:	87 b1       	in	r24, 0x07	; 7
 1c4:	87 b9       	out	0x07, r24	; 7
	
	//Initializing ports of buttons to produce a signal enabling ()
	PORTC |= (1 << PORTC3);
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	88 60       	ori	r24, 0x08	; 8
 1ca:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC2);
 1cc:	88 b1       	in	r24, 0x08	; 8
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC1);
 1d2:	88 b1       	in	r24, 0x08	; 8
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC0);
 1d8:	88 b1       	in	r24, 0x08	; 8
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	88 b9       	out	0x08, r24	; 8
	
	//Initializing LED output (CAN BE DELETED AFTER DEBUG PHASE)
	DDRB |= (1 << DDRB5);
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	84 b9       	out	0x04, r24	; 4
 1e4:	08 95       	ret

000001e6 <PollInputs>:
}

void PollInputs(struct Player *player)
{
 1e6:	fc 01       	movw	r30, r24
	//Poll for first button
	if (!(BUTTON_PORTS & FIRST_BUTTON_PIN_LOCATION))
 1e8:	33 99       	sbic	0x06, 3	; 6
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <PollInputs+0xc>
	{
		player[0].downFlag = true;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	81 83       	std	Z+1, r24	; 0x01
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <PollInputs+0xe>
	}
	else
	{
		player[0].downFlag = false;
 1f2:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//Poll for second button
	if (!(BUTTON_PORTS & SECOND_BUTTON_PIN_LOCATION))
 1f4:	32 99       	sbic	0x06, 2	; 6
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <PollInputs+0x18>
	{
		player[0].upFlag = true;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	80 83       	st	Z, r24
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <PollInputs+0x1a>
	}
	else
	{
		player[0].upFlag = false;
 1fe:	10 82       	st	Z, r1
	}
	
	//Poll for third button
	if (!(BUTTON_PORTS & THIRD_BUTTON_PIN_LOCATION))
 200:	31 99       	sbic	0x06, 1	; 6
 202:	03 c0       	rjmp	.+6      	; 0x20a <PollInputs+0x24>
	{
		player[1].downFlag = true;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	83 83       	std	Z+3, r24	; 0x03
 208:	01 c0       	rjmp	.+2      	; 0x20c <PollInputs+0x26>
	}
	else
	{
		player[1].downFlag = false;
 20a:	13 82       	std	Z+3, r1	; 0x03
	}
	
	//Poll for fourth button
	if (!(BUTTON_PORTS & FOURTH_BUTTON_PIN_LOCATION))
 20c:	30 99       	sbic	0x06, 0	; 6
 20e:	03 c0       	rjmp	.+6      	; 0x216 <PollInputs+0x30>
	{
		player[1].upFlag = true;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	82 83       	std	Z+2, r24	; 0x02
 214:	08 95       	ret
	}
	else
	{
		player[1].upFlag = false;
 216:	12 82       	std	Z+2, r1	; 0x02
 218:	08 95       	ret

0000021a <CheckInputs>:
	}
}

void CheckInputs(struct Player *player)
{
 21a:	fc 01       	movw	r30, r24
	if ((player[0].downFlag == true) && (player[0].upFlag == true))
 21c:	81 81       	ldd	r24, Z+1	; 0x01
 21e:	88 23       	and	r24, r24
 220:	29 f0       	breq	.+10     	; 0x22c <CheckInputs+0x12>
 222:	80 81       	ld	r24, Z
 224:	88 23       	and	r24, r24
 226:	11 f0       	breq	.+4      	; 0x22c <CheckInputs+0x12>
	{
		player[0].downFlag = false;
 228:	11 82       	std	Z+1, r1	; 0x01
		player[0].upFlag = false;
 22a:	10 82       	st	Z, r1
	}
	
	if ((player[1].downFlag == true) && (player[1].upFlag == true))
 22c:	83 81       	ldd	r24, Z+3	; 0x03
 22e:	88 23       	and	r24, r24
 230:	29 f0       	breq	.+10     	; 0x23c <CheckInputs+0x22>
 232:	82 81       	ldd	r24, Z+2	; 0x02
 234:	88 23       	and	r24, r24
 236:	11 f0       	breq	.+4      	; 0x23c <CheckInputs+0x22>
	{
		player[1].downFlag = false;
 238:	13 82       	std	Z+3, r1	; 0x03
		player[1].upFlag = false;
 23a:	12 82       	std	Z+2, r1	; 0x02
	}
	
	//Temp tings
	bool lightOn = false;
	if (player[0].downFlag == true)
 23c:	81 81       	ldd	r24, Z+1	; 0x01
 23e:	81 11       	cpse	r24, r1
	{
		lightOn = true;
 240:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[0].upFlag == true)
 242:	90 81       	ld	r25, Z
 244:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 246:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[1].downFlag == true)
 248:	93 81       	ldd	r25, Z+3	; 0x03
 24a:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 24c:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[1].upFlag == true)
 24e:	92 81       	ldd	r25, Z+2	; 0x02
 250:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 252:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if (lightOn)
 254:	88 23       	and	r24, r24
 256:	19 f0       	breq	.+6      	; 0x25e <CheckInputs+0x44>
	{
		PORTB = (1 << PORTB5);
 258:	80 e2       	ldi	r24, 0x20	; 32
 25a:	85 b9       	out	0x05, r24	; 5
 25c:	08 95       	ret
	}
	else
	{
		PORTB = (0 << PORTB5);
 25e:	15 b8       	out	0x05, r1	; 5
 260:	08 95       	ret

00000262 <__vector_11>:
	max_cycle_H = (count_cycle>>8) & 0xff;
	max_cycle_L = count_cycle & 0xff;
	SET_SPEAKER_PARAMS();
}

ISR(TIMER1_COMPA_vect){
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
	TIM1_COMPA();
 284:	0e 94 9d 00 	call	0x13a	; 0x13a <TIM1_COMPA>
}
 288:	ff 91       	pop	r31
 28a:	ef 91       	pop	r30
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <main>:
int main(void)
{
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <main+0x6>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <main+0x8>
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
	cli();
 2b6:	f8 94       	cli
	struct Player player[2];
	InitInputs(player);
 2b8:	ce 01       	movw	r24, r28
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	0e 94 d6 00 	call	0x1ac	; 0x1ac <InitInputs>
	while (1)
	{
		PollInputs(player);
 2c0:	ce 01       	movw	r24, r28
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <PollInputs>
		CheckInputs(player);
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	0e 94 0d 01 	call	0x21a	; 0x21a <CheckInputs>
 2d0:	f7 cf       	rjmp	.-18     	; 0x2c0 <main+0x16>

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
