
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000400  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000400  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  00000498  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000508  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000131b  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c43  00000000  00000000  00001923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000974  00000000  00000000  00002566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002edc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065a  00000000  00000000  000030cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000675  00000000  00000000  00003726  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003d9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f4 e0       	ldi	r31, 0x04	; 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 30       	cpi	r26, 0x07	; 7
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 c4 01 	call	0x388	; 0x388 <main>
  ea:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TIM1_COMPA>:
.global cycle_level			
.section ".text"			

.global TIM1_COMPA
TIM1_COMPA:
		lds		r19, cycle_level
  f2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_end>
		sbrc	r19,0				
  f6:	30 fd       	sbrc	r19, 0
		rjmp	ONE					
  f8:	06 c0       	rjmp	.+12     	; 0x106 <ONE>
		lds		r25, freq_low			
  fa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq_low>
		lds		r18, freq_high			
  fe:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,1				
 102:	31 e0       	ldi	r19, 0x01	; 1
		rjmp	BEGIN				
 104:	20 c0       	rjmp	.+64     	; 0x146 <BEGIN>

00000106 <ONE>:
ONE:	lds		r25,freq_low			
 106:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq_low>
		lds		r18,freq_high			
 10a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,0				
 10e:	30 e0       	ldi	r19, 0x00	; 0

		lds		r20, max_cycle_L//one side of cycle, load and compares cycle to max
 110:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <max_cycle_L>
		lds		r21, max_cycle_H
 114:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		lds		r22, cycle_count_L
 118:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <cycle_count_L>
		lds		r23, cycle_count_H
 11c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <cycle_count_H>
		ldi     r24, 0x1
 120:	81 e0       	ldi	r24, 0x01	; 1
		add     r22,r24
 122:	68 0f       	add	r22, r24
		adc		r23,r19
 124:	73 1f       	adc	r23, r19
		sts		cycle_count_L,r22
 126:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <cycle_count_L>
		sts		cycle_count_H,r23
 12a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <cycle_count_H>
		cp		r20,r22
 12e:	46 17       	cp	r20, r22
		cpc		r21,r23
 130:	57 07       	cpc	r21, r23
		brge	BEGIN
 132:	4c f4       	brge	.+18     	; 0x146 <BEGIN>
		cli						//at max, disable interrups
 134:	f8 94       	cli
		ldi r26,0x00			
 136:	a0 e0       	ldi	r26, 0x00	; 0
		sts TIMSK1,r26			
 138:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		out TIFR1,r26	
 13c:	a6 bf       	out	0x36, r26	; 54
		ldi r26,0x00			
 13e:	a0 e0       	ldi	r26, 0x00	; 0
		sts TCCR1A,r26//turn off B1 output pin
 140:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sei
 144:	78 94       	sei

00000146 <BEGIN>:

BEGIN:	lds		r26,OCR1AL			
 146:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		add		r25,r26			
 14a:	9a 0f       	add	r25, r26
		lds		r26,OCR1AH			
 14c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		adc		r18,r26				
 150:	2a 1f       	adc	r18, r26
		sts		OCR1AH,r18			
 152:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		sts		OCR1AL,r25			
 156:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		sbrc r19,0
 15a:	30 fd       	sbrc	r19, 0
		rjmp Return
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Return>

0000015e <Return>:
Return:
	sts cycle_level,r19
 15e:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <__data_end>
	ret
 162:	08 95       	ret

00000164 <InitInputs>:
#include "Sound.h"
#include "LCD.h"
#include <avr/io.h>

void InitInputs(struct Player *player)
{
 164:	fc 01       	movw	r30, r24
	//Initializing Player Struct
	player[0].downFlag = false;
 166:	11 82       	std	Z+1, r1	; 0x01
	player[0].upFlag = false;
 168:	10 82       	st	Z, r1
	player[1].downFlag = false;
 16a:	13 82       	std	Z+3, r1	; 0x03
	player[1].upFlag = false;
 16c:	12 82       	std	Z+2, r1	; 0x02
	
	//Initializing data direction register for button ports to be Inputs
	DDRC |= (0 << DDRC3);
 16e:	87 b1       	in	r24, 0x07	; 7
 170:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC2);
 172:	87 b1       	in	r24, 0x07	; 7
 174:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC1);
 176:	87 b1       	in	r24, 0x07	; 7
 178:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC0);
 17a:	87 b1       	in	r24, 0x07	; 7
 17c:	87 b9       	out	0x07, r24	; 7
	
	//Initializing ports of buttons to produce a signal enabling ()
	PORTC |= (1 << PORTC3);
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	88 60       	ori	r24, 0x08	; 8
 182:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC2);
 184:	88 b1       	in	r24, 0x08	; 8
 186:	84 60       	ori	r24, 0x04	; 4
 188:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC1);
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC0);
 190:	88 b1       	in	r24, 0x08	; 8
 192:	81 60       	ori	r24, 0x01	; 1
 194:	88 b9       	out	0x08, r24	; 8
	
	//Initializing LED output (CAN BE DELETED AFTER DEBUG PHASE)
	DDRB |= (1 << DDRB5);
 196:	84 b1       	in	r24, 0x04	; 4
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	84 b9       	out	0x04, r24	; 4
 19c:	08 95       	ret

0000019e <PollInputs>:
}

void PollInputs(struct Player *player)
{
 19e:	fc 01       	movw	r30, r24
	//Poll for first button
	if (!(BUTTON_PORTS & FIRST_BUTTON_PIN_LOCATION))
 1a0:	33 99       	sbic	0x06, 3	; 6
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <PollInputs+0xc>
	{
		player[0].downFlag = true;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	81 83       	std	Z+1, r24	; 0x01
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <PollInputs+0xe>
	}
	else
	{
		player[0].downFlag = false;
 1aa:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//Poll for second button
	if (!(BUTTON_PORTS & SECOND_BUTTON_PIN_LOCATION))
 1ac:	32 99       	sbic	0x06, 2	; 6
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <PollInputs+0x18>
	{
		player[0].upFlag = true;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 83       	st	Z, r24
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <PollInputs+0x1a>
	}
	else
	{
		player[0].upFlag = false;
 1b6:	10 82       	st	Z, r1
	}
	
	//Poll for third button
	if (!(BUTTON_PORTS & THIRD_BUTTON_PIN_LOCATION))
 1b8:	31 99       	sbic	0x06, 1	; 6
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <PollInputs+0x24>
	{
		player[1].downFlag = true;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	83 83       	std	Z+3, r24	; 0x03
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <PollInputs+0x26>
	}
	else
	{
		player[1].downFlag = false;
 1c2:	13 82       	std	Z+3, r1	; 0x03
	}
	
	//Poll for fourth button
	if (!(BUTTON_PORTS & FOURTH_BUTTON_PIN_LOCATION))
 1c4:	30 99       	sbic	0x06, 0	; 6
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <PollInputs+0x30>
	{
		player[1].upFlag = true;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	82 83       	std	Z+2, r24	; 0x02
 1cc:	08 95       	ret
	}
	else
	{
		player[1].upFlag = false;
 1ce:	12 82       	std	Z+2, r1	; 0x02
 1d0:	08 95       	ret

000001d2 <CheckInputs>:
	}
}

void CheckInputs(struct Player *player)
{
 1d2:	fc 01       	movw	r30, r24
	if ((player[0].downFlag == true) && (player[0].upFlag == true))
 1d4:	81 81       	ldd	r24, Z+1	; 0x01
 1d6:	88 23       	and	r24, r24
 1d8:	29 f0       	breq	.+10     	; 0x1e4 <CheckInputs+0x12>
 1da:	80 81       	ld	r24, Z
 1dc:	88 23       	and	r24, r24
 1de:	11 f0       	breq	.+4      	; 0x1e4 <CheckInputs+0x12>
	{
		player[0].downFlag = false;
 1e0:	11 82       	std	Z+1, r1	; 0x01
		player[0].upFlag = false;
 1e2:	10 82       	st	Z, r1
	}
	
	if ((player[1].downFlag == true) && (player[1].upFlag == true))
 1e4:	83 81       	ldd	r24, Z+3	; 0x03
 1e6:	88 23       	and	r24, r24
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <CheckInputs+0x22>
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	88 23       	and	r24, r24
 1ee:	11 f0       	breq	.+4      	; 0x1f4 <CheckInputs+0x22>
	{
		player[1].downFlag = false;
 1f0:	13 82       	std	Z+3, r1	; 0x03
		player[1].upFlag = false;
 1f2:	12 82       	std	Z+2, r1	; 0x02
	}
	
	//Temp tings
	bool lightOn = false;
	if (player[0].downFlag == true)
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	81 11       	cpse	r24, r1
	{
		lightOn = true;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[0].upFlag == true)
 1fa:	90 81       	ld	r25, Z
 1fc:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[1].downFlag == true)
 200:	93 81       	ldd	r25, Z+3	; 0x03
 202:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 204:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[1].upFlag == true)
 206:	92 81       	ldd	r25, Z+2	; 0x02
 208:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 20a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if (lightOn)
 20c:	88 23       	and	r24, r24
 20e:	31 f0       	breq	.+12     	; 0x21c <CheckInputs+0x4a>
	{
		PORTB = (1 << PORTB5);
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	85 b9       	out	0x05, r24	; 5
		SendData('O');
 214:	8f e4       	ldi	r24, 0x4F	; 79
 216:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SendData>
 21a:	08 95       	ret
	}
	else
	{
		PORTB = (0 << PORTB5);
 21c:	15 b8       	out	0x05, r1	; 5
 21e:	08 95       	ret

00000220 <BeginTransmisson>:
}

void DisplayCursor(uint8_t* displayControl)
{
	*displayControl |= 0x02;
	SendCommand(*displayControl | 0x08);
 220:	84 ea       	ldi	r24, 0xA4	; 164
 222:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 226:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22a:	88 23       	and	r24, r24
 22c:	e4 f7       	brge	.-8      	; 0x226 <BeginTransmisson+0x6>
 22e:	8e e4       	ldi	r24, 0x4E	; 78
 230:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 234:	84 e8       	ldi	r24, 0x84	; 132
 236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23e:	88 23       	and	r24, r24
 240:	e4 f7       	brge	.-8      	; 0x23a <BeginTransmisson+0x1a>
 242:	08 95       	ret

00000244 <EndTransmisson>:
 244:	84 e9       	ldi	r24, 0x94	; 148
 246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24a:	8f e8       	ldi	r24, 0x8F	; 143
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <EndTransmisson+0xa>
 252:	00 c0       	rjmp	.+0      	; 0x254 <EndTransmisson+0x10>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <ExpanderWrite>:
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
 25c:	87 e2       	ldi	r24, 0x27	; 39
 25e:	0e 94 10 01 	call	0x220	; 0x220 <BeginTransmisson>
 262:	c8 60       	ori	r28, 0x08	; 8
 264:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 268:	84 e8       	ldi	r24, 0x84	; 132
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 272:	88 23       	and	r24, r24
 274:	e4 f7       	brge	.-8      	; 0x26e <ExpanderWrite+0x16>
 276:	0e 94 22 01 	call	0x244	; 0x244 <EndTransmisson>
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <PulseEnable>:
 27e:	cf 93       	push	r28
 280:	c8 2f       	mov	r28, r24
 282:	84 60       	ori	r24, 0x04	; 4
 284:	0e 94 2c 01 	call	0x258	; 0x258 <ExpanderWrite>
 288:	85 e0       	ldi	r24, 0x05	; 5
 28a:	8a 95       	dec	r24
 28c:	f1 f7       	brne	.-4      	; 0x28a <PulseEnable+0xc>
 28e:	00 00       	nop
 290:	8c 2f       	mov	r24, r28
 292:	8b 7f       	andi	r24, 0xFB	; 251
 294:	0e 94 2c 01 	call	0x258	; 0x258 <ExpanderWrite>
 298:	87 ec       	ldi	r24, 0xC7	; 199
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <PulseEnable+0x1e>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <PulseEnable+0x24>
 2a2:	00 00       	nop
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <Write4Bits>:
 2a8:	cf 93       	push	r28
 2aa:	c8 2f       	mov	r28, r24
 2ac:	0e 94 2c 01 	call	0x258	; 0x258 <ExpanderWrite>
 2b0:	8c 2f       	mov	r24, r28
 2b2:	0e 94 3f 01 	call	0x27e	; 0x27e <PulseEnable>
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <SendCommand>:
 2ba:	cf 93       	push	r28
 2bc:	c8 2f       	mov	r28, r24
 2be:	80 7f       	andi	r24, 0xF0	; 240
 2c0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Write4Bits>
 2c4:	8c 2f       	mov	r24, r28
 2c6:	82 95       	swap	r24
 2c8:	80 7f       	andi	r24, 0xF0	; 240
 2ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Write4Bits>
 2ce:	cf 91       	pop	r28
 2d0:	08 95       	ret

000002d2 <SendData>:
}

void SendData(uint8_t value)
{
 2d2:	cf 93       	push	r28
 2d4:	c8 2f       	mov	r28, r24
	Write4Bits((value & 0xF0) | 0x01);
 2d6:	80 7f       	andi	r24, 0xF0	; 240
 2d8:	81 60       	ori	r24, 0x01	; 1
 2da:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Write4Bits>
	Write4Bits(((value << 4) & 0xF0) | 0x01);
 2de:	20 e1       	ldi	r18, 0x10	; 16
 2e0:	c2 9f       	mul	r28, r18
 2e2:	c0 01       	movw	r24, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Write4Bits>
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <InitLCD>:
#define BACKLIGHT_VALUE 0x08
#define ENABLE 4

void InitLCD()
{	
	DDRC |= (0 << DDRC4);
 2f0:	87 b1       	in	r24, 0x07	; 7
 2f2:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC5);
 2f4:	87 b1       	in	r24, 0x07	; 7
 2f6:	87 b9       	out	0x07, r24	; 7
	
	PORTC |= (1 << LCD_SDA_PORT);
 2f8:	88 b1       	in	r24, 0x08	; 8
 2fa:	80 61       	ori	r24, 0x10	; 16
 2fc:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << LCD_SCL_PORT);
 2fe:	88 b1       	in	r24, 0x08	; 8
 300:	80 62       	ori	r24, 0x20	; 32
 302:	88 b9       	out	0x08, r24	; 8

    // Calculate the closest TWBR value based on the desired bit rate and prescaler
    // The closest prescaler for 100 kHz is 16, so we'll use that

    // Set the TWBR value and prescaler bits in the TWCR register
    TWBR0 = 72;
 304:	88 e4       	ldi	r24, 0x48	; 72
 306:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWSR0 = (0 << TWPS1) | (0 << TWPS0); // Set prescaler to 16
 30a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

    // Enable TWI
    TWCR0 = (1 << TWEN);
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	ExpanderWrite(BACKLIGHT_VALUE);
 314:	88 e0       	ldi	r24, 0x08	; 8
 316:	0e 94 2c 01 	call	0x258	; 0x258 <ExpanderWrite>

	Write4Bits(0x03 >> 4); // Initialization for 4-bit mode (First time)
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Write4Bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	8f e4       	ldi	r24, 0x4F	; 79
 322:	96 e4       	ldi	r25, 0x46	; 70
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <InitLCD+0x34>
 328:	00 c0       	rjmp	.+0      	; 0x32a <InitLCD+0x3a>
 32a:	00 00       	nop
	_delay_us(4500);      // Wait for 5ms

	Write4Bits(0x30 >> 4); // Initialization for 4-bit mode (First time)
 32c:	83 e0       	ldi	r24, 0x03	; 3
 32e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Write4Bits>
 332:	8f e4       	ldi	r24, 0x4F	; 79
 334:	96 e4       	ldi	r25, 0x46	; 70
 336:	01 97       	sbiw	r24, 0x01	; 1
 338:	f1 f7       	brne	.-4      	; 0x336 <InitLCD+0x46>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <InitLCD+0x4c>
 33c:	00 00       	nop
	_delay_us(4500);      // Wait for 5ms

	Write4Bits(0x30 >> 4); // Initialization for 4-bit mode (Third time)
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Write4Bits>
 344:	87 e5       	ldi	r24, 0x57	; 87
 346:	92 e0       	ldi	r25, 0x02	; 2
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <InitLCD+0x58>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <InitLCD+0x5e>
 34e:	00 00       	nop
	_delay_us(150);    // Wait for 150us

	Write4Bits(0x20 >> 4); // Initialization for 4-bit mode (Final time, sets 4-bit mode)
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Write4Bits>
	
	SendCommand(0x38);	//Two line make cursor
 356:	88 e3       	ldi	r24, 0x38	; 56
 358:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendCommand>
	SendCommand(0x34);	//Two Line no cursor
 35c:	84 e3       	ldi	r24, 0x34	; 52
 35e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendCommand>
	SendCommand(0x08);		//4 line, with cursor
 362:	88 e0       	ldi	r24, 0x08	; 8
 364:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendCommand>
	SendCommand(0x0F);
 368:	8f e0       	ldi	r24, 0x0F	; 15
 36a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendCommand>
	SendCommand(0x02);
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendCommand>
	SendCommand(0x06);
 374:	86 e0       	ldi	r24, 0x06	; 6
 376:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendCommand>
	SendCommand(0x14);
 37a:	84 e1       	ldi	r24, 0x14	; 20
 37c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <SendCommand>
	SendData(0x41);
 380:	81 e4       	ldi	r24, 0x41	; 65
 382:	0e 94 69 01 	call	0x2d2	; 0x2d2 <SendData>
 386:	08 95       	ret

00000388 <main>:
#include <avr/interrupt.h>
#include "Input.h"
#include "LCD.h"

int main(void)
{	
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	00 d0       	rcall	.+0      	; 0x38e <main+0x6>
 38e:	00 d0       	rcall	.+0      	; 0x390 <main+0x8>
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
	cli();
 394:	f8 94       	cli
	struct Player player[2];
	InitInputs(player);
 396:	ce 01       	movw	r24, r28
 398:	01 96       	adiw	r24, 0x01	; 1
 39a:	0e 94 b2 00 	call	0x164	; 0x164 <InitInputs>
	InitLCD();
 39e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <InitLCD>
    while (1)
    {
	    PollInputs(player);
 3a2:	ce 01       	movw	r24, r28
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	0e 94 cf 00 	call	0x19e	; 0x19e <PollInputs>
	    CheckInputs(player);
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <CheckInputs>
 3b2:	f7 cf       	rjmp	.-18     	; 0x3a2 <main+0x1a>

000003b4 <__vector_11>:
	max_cycle_H = (count_cycle>>8) & 0xff;//bitshift int to chars
	max_cycle_L = count_cycle & 0xff;
	SET_SPEAKER_PARAMS();//set timer values
}

ISR(TIMER1_COMPA_vect){
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	2f 93       	push	r18
 3c0:	3f 93       	push	r19
 3c2:	4f 93       	push	r20
 3c4:	5f 93       	push	r21
 3c6:	6f 93       	push	r22
 3c8:	7f 93       	push	r23
 3ca:	8f 93       	push	r24
 3cc:	9f 93       	push	r25
 3ce:	af 93       	push	r26
 3d0:	bf 93       	push	r27
 3d2:	ef 93       	push	r30
 3d4:	ff 93       	push	r31
	TIM1_COMPA();//calls assembly interrupt handle
 3d6:	0e 94 79 00 	call	0xf2	; 0xf2 <TIM1_COMPA>
}
 3da:	ff 91       	pop	r31
 3dc:	ef 91       	pop	r30
 3de:	bf 91       	pop	r27
 3e0:	af 91       	pop	r26
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	7f 91       	pop	r23
 3e8:	6f 91       	pop	r22
 3ea:	5f 91       	pop	r21
 3ec:	4f 91       	pop	r20
 3ee:	3f 91       	pop	r19
 3f0:	2f 91       	pop	r18
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
