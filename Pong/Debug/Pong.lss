
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000524  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000524  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  000005bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000630  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ec  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dca  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c11  00000000  00000000  00002c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00003830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d3  00000000  00000000  00003a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000879  00000000  00000000  00004163  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000049dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e2       	ldi	r30, 0x24	; 36
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 30       	cpi	r26, 0x07	; 7
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 3d 02 	call	0x47a	; 0x47a <main>
  ea:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TIM1_COMPA>:
.global cycle_level			
.section ".text"			

.global TIM1_COMPA
TIM1_COMPA:
		lds		r19, cycle_level
  f2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_end>
		sbrc	r19,0				
  f6:	30 fd       	sbrc	r19, 0
		rjmp	ONE					
  f8:	06 c0       	rjmp	.+12     	; 0x106 <ONE>
		lds		r25, freq_low			
  fa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq_low>
		lds		r18, freq_high			
  fe:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,1				
 102:	31 e0       	ldi	r19, 0x01	; 1
		rjmp	BEGIN				
 104:	20 c0       	rjmp	.+64     	; 0x146 <BEGIN>

00000106 <ONE>:
ONE:	lds		r25,freq_low			
 106:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq_low>
		lds		r18,freq_high			
 10a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,0				
 10e:	30 e0       	ldi	r19, 0x00	; 0

		lds		r20, max_cycle_L//one side of cycle, load and compares cycle to max
 110:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <max_cycle_L>
		lds		r21, max_cycle_H
 114:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		lds		r22, cycle_count_L
 118:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <cycle_count_L>
		lds		r23, cycle_count_H
 11c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <cycle_count_H>
		ldi     r24, 0x1
 120:	81 e0       	ldi	r24, 0x01	; 1
		add     r22,r24
 122:	68 0f       	add	r22, r24
		adc		r23,r19
 124:	73 1f       	adc	r23, r19
		sts		cycle_count_L,r22
 126:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <cycle_count_L>
		sts		cycle_count_H,r23
 12a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <cycle_count_H>
		cp		r20,r22
 12e:	46 17       	cp	r20, r22
		cpc		r21,r23
 130:	57 07       	cpc	r21, r23
		brge	BEGIN
 132:	4c f4       	brge	.+18     	; 0x146 <BEGIN>
		cli						//at max, disable interrups
 134:	f8 94       	cli
		ldi r26,0x00			
 136:	a0 e0       	ldi	r26, 0x00	; 0
		sts TIMSK1,r26			
 138:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		out TIFR1,r26	
 13c:	a6 bf       	out	0x36, r26	; 54
		ldi r26,0x00			
 13e:	a0 e0       	ldi	r26, 0x00	; 0
		sts TCCR1A,r26//turn off B1 output pin
 140:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sei
 144:	78 94       	sei

00000146 <BEGIN>:

BEGIN:	lds		r26,OCR1AL			
 146:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		add		r25,r26			
 14a:	9a 0f       	add	r25, r26
		lds		r26,OCR1AH			
 14c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		adc		r18,r26				
 150:	2a 1f       	adc	r18, r26
		sts		OCR1AH,r18			
 152:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		sts		OCR1AL,r25			
 156:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		sbrc r19,0
 15a:	30 fd       	sbrc	r19, 0
		rjmp Return
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Return>

0000015e <Return>:
Return:
	sts cycle_level,r19
 15e:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <__data_end>
	ret
 162:	08 95       	ret

00000164 <ResetBoard>:
#include <stdbool.h>
#include "Input.h"
#include <util/delay.h>

void ResetBoard(struct Player *player)
{
 164:	fc 01       	movw	r30, r24
	player[0].downFlag = false;
 166:	11 82       	std	Z+1, r1	; 0x01
	player[0].upFlag = false;
 168:	10 82       	st	Z, r1
	player[1].downFlag = false;
 16a:	15 82       	std	Z+5, r1	; 0x05
	player[1].upFlag = false;
 16c:	14 82       	std	Z+4, r1	; 0x04
		
	player[0].xPos = 0;
 16e:	12 82       	std	Z+2, r1	; 0x02
	player[0].yPos = 2;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	83 83       	std	Z+3, r24	; 0x03
	player[1].xPos = 17;
 174:	91 e1       	ldi	r25, 0x11	; 17
 176:	96 83       	std	Z+6, r25	; 0x06
	player[1].yPos = 2;
 178:	87 83       	std	Z+7, r24	; 0x07
 17a:	08 95       	ret

0000017c <UpdateBoard>:
}

void UpdateBoard(struct Player *player)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
	SendCommand(0x01);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 af 01 	call	0x35e	; 0x35e <SendCommand>
	SendCommand(0x02);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 af 01 	call	0x35e	; 0x35e <SendCommand>
	SetCursorPosition(player[0].xPos, player[0].yPos);
 18e:	6b 81       	ldd	r22, Y+3	; 0x03
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	0e 94 13 02 	call	0x426	; 0x426 <SetCursorPosition>
	SendData(0x7C);
 196:	8c e7       	ldi	r24, 0x7C	; 124
 198:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SendData>
	SetCursorPosition((player[0].xPos), (player[0].yPos + 1));
 19c:	6b 81       	ldd	r22, Y+3	; 0x03
 19e:	6f 5f       	subi	r22, 0xFF	; 255
 1a0:	8a 81       	ldd	r24, Y+2	; 0x02
 1a2:	0e 94 13 02 	call	0x426	; 0x426 <SetCursorPosition>
	SendData(0x7C);
 1a6:	8c e7       	ldi	r24, 0x7C	; 124
 1a8:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SendData>
	SetCursorPosition(player[1].xPos, player[1].yPos);
 1ac:	6f 81       	ldd	r22, Y+7	; 0x07
 1ae:	8e 81       	ldd	r24, Y+6	; 0x06
 1b0:	0e 94 13 02 	call	0x426	; 0x426 <SetCursorPosition>
	SendData(0x7C);
 1b4:	8c e7       	ldi	r24, 0x7C	; 124
 1b6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SendData>
	SetCursorPosition(player[1].xPos, (player[1].yPos + 1));
 1ba:	6f 81       	ldd	r22, Y+7	; 0x07
 1bc:	6f 5f       	subi	r22, 0xFF	; 255
 1be:	8e 81       	ldd	r24, Y+6	; 0x06
 1c0:	0e 94 13 02 	call	0x426	; 0x426 <SetCursorPosition>
	SendData(0x7C);
 1c4:	8c e7       	ldi	r24, 0x7C	; 124
 1c6:	0e 94 fe 01 	call	0x3fc	; 0x3fc <SendData>
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <InitInputs>:
#include <avr/io.h>

void InitInputs(struct Player *player)
{	
	//Initializing data direction register for button ports to be Inputs
	DDRC |= (0 << DDRC3);
 1d0:	87 b1       	in	r24, 0x07	; 7
 1d2:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC2);
 1d4:	87 b1       	in	r24, 0x07	; 7
 1d6:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC1);
 1d8:	87 b1       	in	r24, 0x07	; 7
 1da:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC0);
 1dc:	87 b1       	in	r24, 0x07	; 7
 1de:	87 b9       	out	0x07, r24	; 7
	
	//Initializing ports of buttons to produce a signal enabling ()
	PORTC |= (1 << PORTC3);
 1e0:	88 b1       	in	r24, 0x08	; 8
 1e2:	88 60       	ori	r24, 0x08	; 8
 1e4:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC2);
 1e6:	88 b1       	in	r24, 0x08	; 8
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC1);
 1ec:	88 b1       	in	r24, 0x08	; 8
 1ee:	82 60       	ori	r24, 0x02	; 2
 1f0:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC0);
 1f2:	88 b1       	in	r24, 0x08	; 8
 1f4:	81 60       	ori	r24, 0x01	; 1
 1f6:	88 b9       	out	0x08, r24	; 8
	
	//Initializing LED output (CAN BE DELETED AFTER DEBUG PHASE)
	DDRB |= (1 << DDRB5);
 1f8:	84 b1       	in	r24, 0x04	; 4
 1fa:	80 62       	ori	r24, 0x20	; 32
 1fc:	84 b9       	out	0x04, r24	; 4
 1fe:	08 95       	ret

00000200 <PollInputs>:
}

void PollInputs(struct Player *player)
{
 200:	fc 01       	movw	r30, r24
	//Poll for first button
	if (!(BUTTON_PORTS & FIRST_BUTTON_PIN_LOCATION))
 202:	33 99       	sbic	0x06, 3	; 6
 204:	03 c0       	rjmp	.+6      	; 0x20c <PollInputs+0xc>
	{
		player[0].downFlag = true;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	81 83       	std	Z+1, r24	; 0x01
 20a:	01 c0       	rjmp	.+2      	; 0x20e <PollInputs+0xe>
	}
	else
	{
		player[0].downFlag = false;
 20c:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//Poll for second button
	if (!(BUTTON_PORTS & SECOND_BUTTON_PIN_LOCATION))
 20e:	32 99       	sbic	0x06, 2	; 6
 210:	03 c0       	rjmp	.+6      	; 0x218 <PollInputs+0x18>
	{
		player[0].upFlag = true;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 83       	st	Z, r24
 216:	01 c0       	rjmp	.+2      	; 0x21a <PollInputs+0x1a>
	}
	else
	{
		player[0].upFlag = false;
 218:	10 82       	st	Z, r1
	}
	
	//Poll for third button
	if (!(BUTTON_PORTS & THIRD_BUTTON_PIN_LOCATION))
 21a:	31 99       	sbic	0x06, 1	; 6
 21c:	03 c0       	rjmp	.+6      	; 0x224 <PollInputs+0x24>
	{
		player[1].downFlag = true;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	85 83       	std	Z+5, r24	; 0x05
 222:	01 c0       	rjmp	.+2      	; 0x226 <PollInputs+0x26>
	}
	else
	{
		player[1].downFlag = false;
 224:	15 82       	std	Z+5, r1	; 0x05
	}
	
	//Poll for fourth button
	if (!(BUTTON_PORTS & FOURTH_BUTTON_PIN_LOCATION))
 226:	30 99       	sbic	0x06, 0	; 6
 228:	03 c0       	rjmp	.+6      	; 0x230 <PollInputs+0x30>
	{
		player[1].upFlag = true;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	84 83       	std	Z+4, r24	; 0x04
 22e:	08 95       	ret
	}
	else
	{
		player[1].upFlag = false;
 230:	14 82       	std	Z+4, r1	; 0x04
 232:	08 95       	ret

00000234 <CheckInputs>:
	}
}

void CheckInputs(struct Player *player)
{
 234:	fc 01       	movw	r30, r24
	//checking for double inputs
	if ((player[0].downFlag == true) && (player[0].upFlag == true))
 236:	81 81       	ldd	r24, Z+1	; 0x01
 238:	88 23       	and	r24, r24
 23a:	29 f0       	breq	.+10     	; 0x246 <CheckInputs+0x12>
 23c:	80 81       	ld	r24, Z
 23e:	88 23       	and	r24, r24
 240:	11 f0       	breq	.+4      	; 0x246 <CheckInputs+0x12>
	{
		player[0].downFlag = false;
 242:	11 82       	std	Z+1, r1	; 0x01
		player[0].upFlag = false;
 244:	10 82       	st	Z, r1
	}
	if ((player[1].downFlag == true) && (player[1].upFlag == true))
 246:	85 81       	ldd	r24, Z+5	; 0x05
 248:	88 23       	and	r24, r24
 24a:	29 f0       	breq	.+10     	; 0x256 <CheckInputs+0x22>
 24c:	84 81       	ldd	r24, Z+4	; 0x04
 24e:	88 23       	and	r24, r24
 250:	11 f0       	breq	.+4      	; 0x256 <CheckInputs+0x22>
	{
		player[1].downFlag = false;
 252:	15 82       	std	Z+5, r1	; 0x05
		player[1].upFlag = false;
 254:	14 82       	std	Z+4, r1	; 0x04
	}
	
	//Checking up flag boundaries
	if ((player[0].upFlag == true) && (player[0].yPos <= 1))
 256:	80 81       	ld	r24, Z
 258:	88 23       	and	r24, r24
 25a:	21 f0       	breq	.+8      	; 0x264 <CheckInputs+0x30>
 25c:	83 81       	ldd	r24, Z+3	; 0x03
 25e:	82 30       	cpi	r24, 0x02	; 2
 260:	08 f4       	brcc	.+2      	; 0x264 <CheckInputs+0x30>
	{
		player[0].upFlag = false;
 262:	10 82       	st	Z, r1
	}
	if ((player[1].upFlag == true) && (player[1].yPos <= 1))
 264:	84 81       	ldd	r24, Z+4	; 0x04
 266:	88 23       	and	r24, r24
 268:	21 f0       	breq	.+8      	; 0x272 <CheckInputs+0x3e>
 26a:	87 81       	ldd	r24, Z+7	; 0x07
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	08 f4       	brcc	.+2      	; 0x272 <CheckInputs+0x3e>
	{
		player[1].upFlag = false;
 270:	14 82       	std	Z+4, r1	; 0x04
	}
	
	//Checking down flag boundaries
	if ((player[0].downFlag == true) && (player[0].yPos >= 3))
 272:	81 81       	ldd	r24, Z+1	; 0x01
 274:	88 23       	and	r24, r24
 276:	21 f0       	breq	.+8      	; 0x280 <CheckInputs+0x4c>
 278:	83 81       	ldd	r24, Z+3	; 0x03
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	08 f0       	brcs	.+2      	; 0x280 <CheckInputs+0x4c>
	{
		player[0].downFlag = false;
 27e:	11 82       	std	Z+1, r1	; 0x01
	}
	if ((player[1].downFlag == true) && (player[1].yPos >= 3))
 280:	85 81       	ldd	r24, Z+5	; 0x05
 282:	88 23       	and	r24, r24
 284:	21 f0       	breq	.+8      	; 0x28e <CheckInputs+0x5a>
 286:	87 81       	ldd	r24, Z+7	; 0x07
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	08 f0       	brcs	.+2      	; 0x28e <CheckInputs+0x5a>
	{
		player[1].downFlag = false;
 28c:	15 82       	std	Z+5, r1	; 0x05
 28e:	08 95       	ret

00000290 <ExecuteInputs>:
		//PORTB = (0 << PORTB5);
	//}
}

void ExecuteInputs(struct Player *player)
{
 290:	fc 01       	movw	r30, r24
	if (player[0].upFlag)
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	19 f0       	breq	.+6      	; 0x29e <ExecuteInputs+0xe>
	{
		player[0].yPos -= 1;
 298:	83 81       	ldd	r24, Z+3	; 0x03
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	83 83       	std	Z+3, r24	; 0x03
	}
	if (player[0].downFlag)
 29e:	81 81       	ldd	r24, Z+1	; 0x01
 2a0:	88 23       	and	r24, r24
 2a2:	19 f0       	breq	.+6      	; 0x2aa <ExecuteInputs+0x1a>
	{
		player[0].yPos += 1;
 2a4:	83 81       	ldd	r24, Z+3	; 0x03
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	83 83       	std	Z+3, r24	; 0x03
	}
	if (player[1].upFlag)
 2aa:	84 81       	ldd	r24, Z+4	; 0x04
 2ac:	88 23       	and	r24, r24
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <ExecuteInputs+0x26>
	{
		player[1].yPos -= 1;
 2b0:	87 81       	ldd	r24, Z+7	; 0x07
 2b2:	81 50       	subi	r24, 0x01	; 1
 2b4:	87 83       	std	Z+7, r24	; 0x07
	}
	if (player[1].downFlag)
 2b6:	85 81       	ldd	r24, Z+5	; 0x05
 2b8:	88 23       	and	r24, r24
 2ba:	19 f0       	breq	.+6      	; 0x2c2 <ExecuteInputs+0x32>
	{
		player[1].yPos += 1;
 2bc:	87 81       	ldd	r24, Z+7	; 0x07
 2be:	8f 5f       	subi	r24, 0xFF	; 255
 2c0:	87 83       	std	Z+7, r24	; 0x07
 2c2:	08 95       	ret

000002c4 <BeginTransmisson>:
}

void DisplayCursor(uint8_t* displayControl)
{
	*displayControl |= 0x02;
	SendCommand(*displayControl | 0x08);
 2c4:	84 ea       	ldi	r24, 0xA4	; 164
 2c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ce:	88 23       	and	r24, r24
 2d0:	e4 f7       	brge	.-8      	; 0x2ca <BeginTransmisson+0x6>
 2d2:	8e e4       	ldi	r24, 0x4E	; 78
 2d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2d8:	84 e8       	ldi	r24, 0x84	; 132
 2da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2e2:	88 23       	and	r24, r24
 2e4:	e4 f7       	brge	.-8      	; 0x2de <BeginTransmisson+0x1a>
 2e6:	08 95       	ret

000002e8 <EndTransmisson>:
 2e8:	84 e9       	ldi	r24, 0x94	; 148
 2ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ee:	8f e8       	ldi	r24, 0x8F	; 143
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <EndTransmisson+0xa>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <EndTransmisson+0x10>
 2f8:	00 00       	nop
 2fa:	08 95       	ret

000002fc <ExpanderWrite>:
 2fc:	cf 93       	push	r28
 2fe:	c8 2f       	mov	r28, r24
 300:	87 e2       	ldi	r24, 0x27	; 39
 302:	0e 94 62 01 	call	0x2c4	; 0x2c4 <BeginTransmisson>
 306:	c8 60       	ori	r28, 0x08	; 8
 308:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 30c:	84 e8       	ldi	r24, 0x84	; 132
 30e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 312:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 316:	88 23       	and	r24, r24
 318:	e4 f7       	brge	.-8      	; 0x312 <ExpanderWrite+0x16>
 31a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <EndTransmisson>
 31e:	cf 91       	pop	r28
 320:	08 95       	ret

00000322 <PulseEnable>:
 322:	cf 93       	push	r28
 324:	c8 2f       	mov	r28, r24
 326:	84 60       	ori	r24, 0x04	; 4
 328:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ExpanderWrite>
 32c:	85 e0       	ldi	r24, 0x05	; 5
 32e:	8a 95       	dec	r24
 330:	f1 f7       	brne	.-4      	; 0x32e <PulseEnable+0xc>
 332:	00 00       	nop
 334:	8c 2f       	mov	r24, r28
 336:	8b 7f       	andi	r24, 0xFB	; 251
 338:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ExpanderWrite>
 33c:	87 ec       	ldi	r24, 0xC7	; 199
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <PulseEnable+0x1e>
 344:	00 c0       	rjmp	.+0      	; 0x346 <PulseEnable+0x24>
 346:	00 00       	nop
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <Write4Bits>:
 34c:	cf 93       	push	r28
 34e:	c8 2f       	mov	r28, r24
 350:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ExpanderWrite>
 354:	8c 2f       	mov	r24, r28
 356:	0e 94 91 01 	call	0x322	; 0x322 <PulseEnable>
 35a:	cf 91       	pop	r28
 35c:	08 95       	ret

0000035e <SendCommand>:
 35e:	cf 93       	push	r28
 360:	c8 2f       	mov	r28, r24
 362:	80 7f       	andi	r24, 0xF0	; 240
 364:	0e 94 a6 01 	call	0x34c	; 0x34c <Write4Bits>
 368:	8c 2f       	mov	r24, r28
 36a:	82 95       	swap	r24
 36c:	80 7f       	andi	r24, 0xF0	; 240
 36e:	0e 94 a6 01 	call	0x34c	; 0x34c <Write4Bits>
 372:	8f e3       	ldi	r24, 0x3F	; 63
 374:	9f e1       	ldi	r25, 0x1F	; 31
 376:	01 97       	sbiw	r24, 0x01	; 1
 378:	f1 f7       	brne	.-4      	; 0x376 <SendCommand+0x18>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <SendCommand+0x1e>
 37c:	00 00       	nop
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <InitLCD>:
 382:	87 b1       	in	r24, 0x07	; 7
 384:	87 b9       	out	0x07, r24	; 7
 386:	87 b1       	in	r24, 0x07	; 7
 388:	87 b9       	out	0x07, r24	; 7
 38a:	88 b1       	in	r24, 0x08	; 8
 38c:	80 61       	ori	r24, 0x10	; 16
 38e:	88 b9       	out	0x08, r24	; 8
 390:	88 b1       	in	r24, 0x08	; 8
 392:	80 62       	ori	r24, 0x20	; 32
 394:	88 b9       	out	0x08, r24	; 8
 396:	88 e4       	ldi	r24, 0x48	; 72
 398:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 39c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3a0:	84 e0       	ldi	r24, 0x04	; 4
 3a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a6:	88 e0       	ldi	r24, 0x08	; 8
 3a8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <ExpanderWrite>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 a6 01 	call	0x34c	; 0x34c <Write4Bits>
 3b2:	8f e4       	ldi	r24, 0x4F	; 79
 3b4:	96 e4       	ldi	r25, 0x46	; 70
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <InitLCD+0x34>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <InitLCD+0x3a>
 3bc:	00 00       	nop
 3be:	83 e0       	ldi	r24, 0x03	; 3
 3c0:	0e 94 a6 01 	call	0x34c	; 0x34c <Write4Bits>
 3c4:	8f e4       	ldi	r24, 0x4F	; 79
 3c6:	96 e4       	ldi	r25, 0x46	; 70
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <InitLCD+0x46>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <InitLCD+0x4c>
 3ce:	00 00       	nop
 3d0:	83 e0       	ldi	r24, 0x03	; 3
 3d2:	0e 94 a6 01 	call	0x34c	; 0x34c <Write4Bits>
 3d6:	87 e5       	ldi	r24, 0x57	; 87
 3d8:	92 e0       	ldi	r25, 0x02	; 2
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <InitLCD+0x58>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <InitLCD+0x5e>
 3e0:	00 00       	nop
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 a6 01 	call	0x34c	; 0x34c <Write4Bits>
 3e8:	88 e2       	ldi	r24, 0x28	; 40
 3ea:	0e 94 af 01 	call	0x35e	; 0x35e <SendCommand>
 3ee:	8f e0       	ldi	r24, 0x0F	; 15
 3f0:	0e 94 af 01 	call	0x35e	; 0x35e <SendCommand>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 af 01 	call	0x35e	; 0x35e <SendCommand>
 3fa:	08 95       	ret

000003fc <SendData>:
}

void SendData(uint8_t value)
{
 3fc:	cf 93       	push	r28
 3fe:	c8 2f       	mov	r28, r24
	Write4Bits((value & 0xF0) | 0x01);
 400:	80 7f       	andi	r24, 0xF0	; 240
 402:	81 60       	ori	r24, 0x01	; 1
 404:	0e 94 a6 01 	call	0x34c	; 0x34c <Write4Bits>
	Write4Bits(((value << 4) & 0xF0) | 0x01);
 408:	20 e1       	ldi	r18, 0x10	; 16
 40a:	c2 9f       	mul	r28, r18
 40c:	c0 01       	movw	r24, r0
 40e:	11 24       	eor	r1, r1
 410:	81 60       	ori	r24, 0x01	; 1
 412:	0e 94 a6 01 	call	0x34c	; 0x34c <Write4Bits>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 416:	8f e3       	ldi	r24, 0x3F	; 63
 418:	9f e1       	ldi	r25, 0x1F	; 31
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
	_delay_ms(2);
}
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <SetCursorPosition>:

void SetCursorPosition(uint8_t xCoord, uint8_t yCoord)
{
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	18 2f       	mov	r17, r24
 42e:	c6 2f       	mov	r28, r22
	SendCommand(0x02);
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	0e 94 af 01 	call	0x35e	; 0x35e <SendCommand>
	uint8_t createdAddress = 0;
	
	switch (yCoord)
 436:	c2 30       	cpi	r28, 0x02	; 2
 438:	21 f0       	breq	.+8      	; 0x442 <SetCursorPosition+0x1c>
 43a:	c3 30       	cpi	r28, 0x03	; 3
 43c:	19 f4       	brne	.+6      	; 0x444 <SetCursorPosition+0x1e>
	{
		case 2:
		yCoord = 3;
		break;
		case 3:
		yCoord = 2;
 43e:	c2 e0       	ldi	r28, 0x02	; 2
		break;
 440:	01 c0       	rjmp	.+2      	; 0x444 <SetCursorPosition+0x1e>
	uint8_t createdAddress = 0;
	
	switch (yCoord)
	{
		case 2:
		yCoord = 3;
 442:	c3 e0       	ldi	r28, 0x03	; 3
		break;
		default:
		break;
	}

	for (int i = yCoord; i > 1; i--)
 444:	6c 2f       	mov	r22, r28
 446:	70 e0       	ldi	r23, 0x00	; 0
}

void SetCursorPosition(uint8_t xCoord, uint8_t yCoord)
{
	SendCommand(0x02);
	uint8_t createdAddress = 0;
 448:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}

	for (int i = yCoord; i > 1; i--)
 44a:	03 c0       	rjmp	.+6      	; 0x452 <SetCursorPosition+0x2c>
	{
		createdAddress += 20;
 44c:	8c 5e       	subi	r24, 0xEC	; 236
		break;
		default:
		break;
	}

	for (int i = yCoord; i > 1; i--)
 44e:	61 50       	subi	r22, 0x01	; 1
 450:	71 09       	sbc	r23, r1
 452:	62 30       	cpi	r22, 0x02	; 2
 454:	71 05       	cpc	r23, r1
 456:	d4 f7       	brge	.-12     	; 0x44c <SetCursorPosition+0x26>
	{
		createdAddress += 20;
	}
	createdAddress += xCoord;
 458:	18 0f       	add	r17, r24
	for (int i = 0; i <= createdAddress; i++)
 45a:	c0 e0       	ldi	r28, 0x00	; 0
 45c:	d0 e0       	ldi	r29, 0x00	; 0
 45e:	04 c0       	rjmp	.+8      	; 0x468 <SetCursorPosition+0x42>
	{
		SendCommand(0x14);
 460:	84 e1       	ldi	r24, 0x14	; 20
 462:	0e 94 af 01 	call	0x35e	; 0x35e <SendCommand>
	for (int i = yCoord; i > 1; i--)
	{
		createdAddress += 20;
	}
	createdAddress += xCoord;
	for (int i = 0; i <= createdAddress; i++)
 466:	21 96       	adiw	r28, 0x01	; 1
 468:	21 2f       	mov	r18, r17
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	2c 17       	cp	r18, r28
 46e:	3d 07       	cpc	r19, r29
 470:	bc f7       	brge	.-18     	; 0x460 <SetCursorPosition+0x3a>
		SendCommand(0x14);
	}
	//createdAddress += xCoord;
	//
	//SendCommand(createdAddress | DDRAM_PRESCALER);
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	08 95       	ret

0000047a <main>:
#include "Input.h"
#include "LCD.h"
#include "BoardManager.h"

int main(void)
{	
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	cd b7       	in	r28, 0x3d	; 61
 480:	de b7       	in	r29, 0x3e	; 62
 482:	28 97       	sbiw	r28, 0x08	; 8
 484:	0f b6       	in	r0, 0x3f	; 63
 486:	f8 94       	cli
 488:	de bf       	out	0x3e, r29	; 62
 48a:	0f be       	out	0x3f, r0	; 63
 48c:	cd bf       	out	0x3d, r28	; 61
	cli();
 48e:	f8 94       	cli
	struct Player player[2];
	InitInputs(player);
 490:	ce 01       	movw	r24, r28
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <InitInputs>
	InitLCD();
 498:	0e 94 c1 01 	call	0x382	; 0x382 <InitLCD>
	ResetBoard(player);
 49c:	ce 01       	movw	r24, r28
 49e:	01 96       	adiw	r24, 0x01	; 1
 4a0:	0e 94 b2 00 	call	0x164	; 0x164 <ResetBoard>
    while (1)
    {
	    PollInputs(player);
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	0e 94 00 01 	call	0x200	; 0x200 <PollInputs>
	    CheckInputs(player);
 4ac:	ce 01       	movw	r24, r28
 4ae:	01 96       	adiw	r24, 0x01	; 1
 4b0:	0e 94 1a 01 	call	0x234	; 0x234 <CheckInputs>
		ExecuteInputs(player);
 4b4:	ce 01       	movw	r24, r28
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	0e 94 48 01 	call	0x290	; 0x290 <ExecuteInputs>
		UpdateBoard(player);
 4bc:	ce 01       	movw	r24, r28
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	0e 94 be 00 	call	0x17c	; 0x17c <UpdateBoard>
 4c4:	2f ef       	ldi	r18, 0xFF	; 255
 4c6:	81 ee       	ldi	r24, 0xE1	; 225
 4c8:	94 e0       	ldi	r25, 0x04	; 4
 4ca:	21 50       	subi	r18, 0x01	; 1
 4cc:	80 40       	sbci	r24, 0x00	; 0
 4ce:	90 40       	sbci	r25, 0x00	; 0
 4d0:	e1 f7       	brne	.-8      	; 0x4ca <main+0x50>
 4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <main+0x5a>
 4d4:	00 00       	nop
 4d6:	e6 cf       	rjmp	.-52     	; 0x4a4 <main+0x2a>

000004d8 <__vector_11>:
	max_cycle_H = (count_cycle>>8) & 0xff;//bitshift int to chars
	max_cycle_L = count_cycle & 0xff;
	SET_SPEAKER_PARAMS();//set timer values
}

ISR(TIMER1_COMPA_vect){
 4d8:	1f 92       	push	r1
 4da:	0f 92       	push	r0
 4dc:	0f b6       	in	r0, 0x3f	; 63
 4de:	0f 92       	push	r0
 4e0:	11 24       	eor	r1, r1
 4e2:	2f 93       	push	r18
 4e4:	3f 93       	push	r19
 4e6:	4f 93       	push	r20
 4e8:	5f 93       	push	r21
 4ea:	6f 93       	push	r22
 4ec:	7f 93       	push	r23
 4ee:	8f 93       	push	r24
 4f0:	9f 93       	push	r25
 4f2:	af 93       	push	r26
 4f4:	bf 93       	push	r27
 4f6:	ef 93       	push	r30
 4f8:	ff 93       	push	r31
	TIM1_COMPA();//calls assembly interrupt handle
 4fa:	0e 94 79 00 	call	0xf2	; 0xf2 <TIM1_COMPA>
}
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
