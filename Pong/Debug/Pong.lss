
Pong.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000382  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800104  00800104  0000041a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000490  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001118  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5e  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000931  00000000  00000000  000022d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00002c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000641  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000043a  00000000  00000000  000033b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000037eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e8       	ldi	r30, 0x82	; 130
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a7 30       	cpi	r26, 0x07	; 7
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  ea:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <TIM1_COMPA>:
.global cycle_level			
.section ".text"			

.global TIM1_COMPA
TIM1_COMPA:
		lds		r19, cycle_level
  f2:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <__data_end>
		sbrc	r19,0				
  f6:	30 fd       	sbrc	r19, 0
		rjmp	ONE					
  f8:	06 c0       	rjmp	.+12     	; 0x106 <ONE>
		lds		r25, freq_low			
  fa:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq_low>
		lds		r18, freq_high			
  fe:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,1				
 102:	31 e0       	ldi	r19, 0x01	; 1
		rjmp	BEGIN				
 104:	20 c0       	rjmp	.+64     	; 0x146 <BEGIN>

00000106 <ONE>:
ONE:	lds		r25,freq_low			
 106:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <freq_low>
		lds		r18,freq_high			
 10a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <freq_high>
		ldi		r19,0				
 10e:	30 e0       	ldi	r19, 0x00	; 0

		lds		r20, max_cycle_L//one side of cycle, load and compares cycle to max
 110:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <max_cycle_L>
		lds		r21, max_cycle_H
 114:	50 91 00 01 	lds	r21, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
		lds		r22, cycle_count_L
 118:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <cycle_count_L>
		lds		r23, cycle_count_H
 11c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <cycle_count_H>
		ldi     r24, 0x1
 120:	81 e0       	ldi	r24, 0x01	; 1
		add     r22,r24
 122:	68 0f       	add	r22, r24
		adc		r23,r19
 124:	73 1f       	adc	r23, r19
		sts		cycle_count_L,r22
 126:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <cycle_count_L>
		sts		cycle_count_H,r23
 12a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <cycle_count_H>
		cp		r20,r22
 12e:	46 17       	cp	r20, r22
		cpc		r21,r23
 130:	57 07       	cpc	r21, r23
		brge	BEGIN
 132:	4c f4       	brge	.+18     	; 0x146 <BEGIN>
		cli						//at max, disable interrups
 134:	f8 94       	cli
		ldi r26,0x00			
 136:	a0 e0       	ldi	r26, 0x00	; 0
		sts TIMSK1,r26			
 138:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
		out TIFR1,r26	
 13c:	a6 bf       	out	0x36, r26	; 54
		ldi r26,0x00			
 13e:	a0 e0       	ldi	r26, 0x00	; 0
		sts TCCR1A,r26//turn off B1 output pin
 140:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		sei
 144:	78 94       	sei

00000146 <BEGIN>:

BEGIN:	lds		r26,OCR1AL			
 146:	a0 91 88 00 	lds	r26, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		add		r25,r26			
 14a:	9a 0f       	add	r25, r26
		lds		r26,OCR1AH			
 14c:	a0 91 89 00 	lds	r26, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		adc		r18,r26				
 150:	2a 1f       	adc	r18, r26
		sts		OCR1AH,r18			
 152:	20 93 89 00 	sts	0x0089, r18	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
		sts		OCR1AL,r25			
 156:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		sbrc r19,0
 15a:	30 fd       	sbrc	r19, 0
		rjmp Return
 15c:	00 c0       	rjmp	.+0      	; 0x15e <Return>

0000015e <Return>:
Return:
	sts cycle_level,r19
 15e:	30 93 04 01 	sts	0x0104, r19	; 0x800104 <__data_end>
	ret
 162:	08 95       	ret

00000164 <InitInputs>:
#include "Sound.h"
#include "LCD.h"
#include <avr/io.h>

void InitInputs(struct Player *player)
{
 164:	fc 01       	movw	r30, r24
	//Initializing Player Struct
	player[0].downFlag = false;
 166:	11 82       	std	Z+1, r1	; 0x01
	player[0].upFlag = false;
 168:	10 82       	st	Z, r1
	player[1].downFlag = false;
 16a:	13 82       	std	Z+3, r1	; 0x03
	player[1].upFlag = false;
 16c:	12 82       	std	Z+2, r1	; 0x02
	
	//Initializing data direction register for button ports to be Inputs
	DDRC |= (0 << DDRC3);
 16e:	87 b1       	in	r24, 0x07	; 7
 170:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC2);
 172:	87 b1       	in	r24, 0x07	; 7
 174:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC1);
 176:	87 b1       	in	r24, 0x07	; 7
 178:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC0);
 17a:	87 b1       	in	r24, 0x07	; 7
 17c:	87 b9       	out	0x07, r24	; 7
	
	//Initializing ports of buttons to produce a signal enabling ()
	PORTC |= (1 << PORTC3);
 17e:	88 b1       	in	r24, 0x08	; 8
 180:	88 60       	ori	r24, 0x08	; 8
 182:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC2);
 184:	88 b1       	in	r24, 0x08	; 8
 186:	84 60       	ori	r24, 0x04	; 4
 188:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC1);
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	82 60       	ori	r24, 0x02	; 2
 18e:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PORTC0);
 190:	88 b1       	in	r24, 0x08	; 8
 192:	81 60       	ori	r24, 0x01	; 1
 194:	88 b9       	out	0x08, r24	; 8
	
	//Initializing LED output (CAN BE DELETED AFTER DEBUG PHASE)
	DDRB |= (1 << DDRB5);
 196:	84 b1       	in	r24, 0x04	; 4
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	84 b9       	out	0x04, r24	; 4
 19c:	08 95       	ret

0000019e <PollInputs>:
}

void PollInputs(struct Player *player)
{
 19e:	fc 01       	movw	r30, r24
	//Poll for first button
	if (!(BUTTON_PORTS & FIRST_BUTTON_PIN_LOCATION))
 1a0:	33 99       	sbic	0x06, 3	; 6
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <PollInputs+0xc>
	{
		player[0].downFlag = true;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	81 83       	std	Z+1, r24	; 0x01
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <PollInputs+0xe>
	}
	else
	{
		player[0].downFlag = false;
 1aa:	11 82       	std	Z+1, r1	; 0x01
	}
	
	//Poll for second button
	if (!(BUTTON_PORTS & SECOND_BUTTON_PIN_LOCATION))
 1ac:	32 99       	sbic	0x06, 2	; 6
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <PollInputs+0x18>
	{
		player[0].upFlag = true;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 83       	st	Z, r24
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <PollInputs+0x1a>
	}
	else
	{
		player[0].upFlag = false;
 1b6:	10 82       	st	Z, r1
	}
	
	//Poll for third button
	if (!(BUTTON_PORTS & THIRD_BUTTON_PIN_LOCATION))
 1b8:	31 99       	sbic	0x06, 1	; 6
 1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <PollInputs+0x24>
	{
		player[1].downFlag = true;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	83 83       	std	Z+3, r24	; 0x03
 1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <PollInputs+0x26>
	}
	else
	{
		player[1].downFlag = false;
 1c2:	13 82       	std	Z+3, r1	; 0x03
	}
	
	//Poll for fourth button
	if (!(BUTTON_PORTS & FOURTH_BUTTON_PIN_LOCATION))
 1c4:	30 99       	sbic	0x06, 0	; 6
 1c6:	03 c0       	rjmp	.+6      	; 0x1ce <PollInputs+0x30>
	{
		player[1].upFlag = true;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	82 83       	std	Z+2, r24	; 0x02
 1cc:	08 95       	ret
	}
	else
	{
		player[1].upFlag = false;
 1ce:	12 82       	std	Z+2, r1	; 0x02
 1d0:	08 95       	ret

000001d2 <CheckInputs>:
	}
}

void CheckInputs(struct Player *player)
{
 1d2:	fc 01       	movw	r30, r24
	if ((player[0].downFlag == true) && (player[0].upFlag == true))
 1d4:	81 81       	ldd	r24, Z+1	; 0x01
 1d6:	88 23       	and	r24, r24
 1d8:	29 f0       	breq	.+10     	; 0x1e4 <CheckInputs+0x12>
 1da:	80 81       	ld	r24, Z
 1dc:	88 23       	and	r24, r24
 1de:	11 f0       	breq	.+4      	; 0x1e4 <CheckInputs+0x12>
	{
		player[0].downFlag = false;
 1e0:	11 82       	std	Z+1, r1	; 0x01
		player[0].upFlag = false;
 1e2:	10 82       	st	Z, r1
	}
	
	if ((player[1].downFlag == true) && (player[1].upFlag == true))
 1e4:	83 81       	ldd	r24, Z+3	; 0x03
 1e6:	88 23       	and	r24, r24
 1e8:	29 f0       	breq	.+10     	; 0x1f4 <CheckInputs+0x22>
 1ea:	82 81       	ldd	r24, Z+2	; 0x02
 1ec:	88 23       	and	r24, r24
 1ee:	11 f0       	breq	.+4      	; 0x1f4 <CheckInputs+0x22>
	{
		player[1].downFlag = false;
 1f0:	13 82       	std	Z+3, r1	; 0x03
		player[1].upFlag = false;
 1f2:	12 82       	std	Z+2, r1	; 0x02
	}
	
	//Temp tings
	bool lightOn = false;
	if (player[0].downFlag == true)
 1f4:	81 81       	ldd	r24, Z+1	; 0x01
 1f6:	81 11       	cpse	r24, r1
	{
		lightOn = true;
 1f8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[0].upFlag == true)
 1fa:	90 81       	ld	r25, Z
 1fc:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 1fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[1].downFlag == true)
 200:	93 81       	ldd	r25, Z+3	; 0x03
 202:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 204:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (player[1].upFlag == true)
 206:	92 81       	ldd	r25, Z+2	; 0x02
 208:	91 11       	cpse	r25, r1
	{
		lightOn = true;
 20a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	if (lightOn)
 20c:	88 23       	and	r24, r24
 20e:	19 f0       	breq	.+6      	; 0x216 <CheckInputs+0x44>
	{
		PORTB = (1 << PORTB5);
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	85 b9       	out	0x05, r24	; 5
 214:	08 95       	ret
	}
	else
	{
		PORTB = (0 << PORTB5);
 216:	15 b8       	out	0x05, r1	; 5
 218:	08 95       	ret

0000021a <SendCommand>:
}

void SendCommand(unsigned short command)
{
    // Start condition
	TWCR0 = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 21a:	94 ea       	ldi	r25, 0xA4	; 164
 21c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR0 & (1 << TWINT)));
 220:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 224:	99 23       	and	r25, r25
 226:	e4 f7       	brge	.-8      	; 0x220 <SendCommand+0x6>

    // Send I2C address with write bit (R/W = 0)
    TWDR0 = LCD_I2C_ADDR << 1;
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR0 = (1 << TWINT) | (1 << TWEN);
 22e:	94 e8       	ldi	r25, 0x84	; 132
 230:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR0 & (1 << TWINT)));
 234:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 238:	99 23       	and	r25, r25
 23a:	e4 f7       	brge	.-8      	; 0x234 <SendCommand+0x1a>

    // Send control byte (command indication)
    TWDR0 = 0x00; // Control byte: Register select (RS=0), R/W=0 (Write mode)
 23c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR0 = (1 << TWINT) | (1 << TWEN);
 240:	94 e8       	ldi	r25, 0x84	; 132
 242:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR0 & (1 << TWINT)));
 246:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24a:	99 23       	and	r25, r25
 24c:	e4 f7       	brge	.-8      	; 0x246 <SendCommand+0x2c>

    // Send the command
    TWDR0 = command;
 24e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR0 = (1 << TWINT) | (1 << TWEN);
 252:	84 e8       	ldi	r24, 0x84	; 132
 254:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR0 & (1 << TWINT)));
 258:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 25c:	88 23       	and	r24, r24
 25e:	e4 f7       	brge	.-8      	; 0x258 <SendCommand+0x3e>

    // Generate I2C stop condition
    TWCR0 = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 260:	84 e9       	ldi	r24, 0x94	; 148
 262:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 266:	8f e8       	ldi	r24, 0x8F	; 143
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <SendCommand+0x50>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <SendCommand+0x56>
 270:	00 00       	nop
 272:	08 95       	ret

00000274 <InitLCD>:
#include "LCD.h"
#include <util/delay.h>

void InitLCD()
{	
	DDRC |= (0 << DDRC4);
 274:	87 b1       	in	r24, 0x07	; 7
 276:	87 b9       	out	0x07, r24	; 7
	DDRC |= (0 << DDRC5);
 278:	87 b1       	in	r24, 0x07	; 7
 27a:	87 b9       	out	0x07, r24	; 7
	
	PORTC |= (1 << LCD_SDA_PORT);
 27c:	88 b1       	in	r24, 0x08	; 8
 27e:	80 61       	ori	r24, 0x10	; 16
 280:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << LCD_SCL_PORT);
 282:	88 b1       	in	r24, 0x08	; 8
 284:	80 62       	ori	r24, 0x20	; 32
 286:	88 b9       	out	0x08, r24	; 8
    // The closest prescaler for 100 kHz is 16, so we'll use that
    uint32_t prescaler = 16;
    uint8_t twbr_value = (cpu_clock / (2 * desired_bit_rate * prescaler)) - 8;

    // Set the TWBR value and prescaler bits in the TWCR register
    TWBR0 = twbr_value;
 288:	8d ef       	ldi	r24, 0xFD	; 253
 28a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWSR0 = (0 << TWPS1) | (1 << TWPS0); // Set prescaler to 16
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>

    // Enable TWI
    TWCR0 = (1 << TWEN);
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    // Initialization sequence for I2C LCD2004
    SendCommand(0x33); // Initialization for 4-bit mode
 29a:	83 e3       	ldi	r24, 0x33	; 51
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	0e 94 0d 01 	call	0x21a	; 0x21a <SendCommand>
    SendCommand(0x32); // Initialization for 4-bit mode
 2a2:	82 e3       	ldi	r24, 0x32	; 50
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 0d 01 	call	0x21a	; 0x21a <SendCommand>

    // Function Set: 4-bit data length, 2-line display, 5x8 dots font
    SendCommand(0x28);
 2aa:	88 e2       	ldi	r24, 0x28	; 40
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 0d 01 	call	0x21a	; 0x21a <SendCommand>

    // Display ON/OFF Control: Display ON, Cursor OFF, Blinking OFF
    SendCommand(0x0C);
 2b2:	8c e0       	ldi	r24, 0x0C	; 12
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 0d 01 	call	0x21a	; 0x21a <SendCommand>

    // Clear Display
    SendCommand(0x01);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 0d 01 	call	0x21a	; 0x21a <SendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	8f e3       	ldi	r24, 0x3F	; 63
 2c4:	9f e1       	ldi	r25, 0x1F	; 31
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <InitLCD+0x52>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <InitLCD+0x58>
 2cc:	00 00       	nop
    _delay_ms(2); // Wait for >1.64ms

    // Entry Mode Set: Increment cursor, No display shift
    SendCommand(0x06);
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	0e 94 0d 01 	call	0x21a	; 0x21a <SendCommand>
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
 2d8:	20 e7       	ldi	r18, 0x70	; 112
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	91 50       	subi	r25, 0x01	; 1
 2de:	20 40       	sbci	r18, 0x00	; 0
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <InitLCD+0x68>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <InitLCD+0x72>
 2e6:	00 00       	nop
 2e8:	08 95       	ret

000002ea <main>:
#include <avr/interrupt.h>
#include "Input.h"
#include "LCD.h"

int main(void)
{
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
 2ee:	00 d0       	rcall	.+0      	; 0x2f0 <main+0x6>
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <main+0x8>
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
	cli();
 2f6:	f8 94       	cli
	struct Player player[2];
	InitInputs(player);
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	0e 94 b2 00 	call	0x164	; 0x164 <InitInputs>
	InitLCD();
 300:	0e 94 3a 01 	call	0x274	; 0x274 <InitLCD>
	SendCommand(0x08);
 304:	88 e0       	ldi	r24, 0x08	; 8
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 0d 01 	call	0x21a	; 0x21a <SendCommand>
    while (1)
    {
	    PollInputs(player);
 30c:	ce 01       	movw	r24, r28
 30e:	01 96       	adiw	r24, 0x01	; 1
 310:	0e 94 cf 00 	call	0x19e	; 0x19e <PollInputs>
	    CheckInputs(player);
 314:	ce 01       	movw	r24, r28
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <CheckInputs>

	    // Clear the display before writing the string
	    SendCommand(0x08);
 31c:	88 e0       	ldi	r24, 0x08	; 8
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 0d 01 	call	0x21a	; 0x21a <SendCommand>
		if (TWSR0 == 0x68)
 324:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 328:	88 36       	cpi	r24, 0x68	; 104
 32a:	19 f4       	brne	.+6      	; 0x332 <main+0x48>
		{
			PORTB = (1 << PORTB5);
 32c:	80 e2       	ldi	r24, 0x20	; 32
 32e:	85 b9       	out	0x05, r24	; 5
 330:	ed cf       	rjmp	.-38     	; 0x30c <main+0x22>
		}
		else
		{
			PORTB = (0 << PORTB5);
 332:	15 b8       	out	0x05, r1	; 5
 334:	eb cf       	rjmp	.-42     	; 0x30c <main+0x22>

00000336 <__vector_11>:
	max_cycle_H = (count_cycle>>8) & 0xff;//bitshift int to chars
	max_cycle_L = count_cycle & 0xff;
	SET_SPEAKER_PARAMS();//set timer values
}

ISR(TIMER1_COMPA_vect){
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	TIM1_COMPA();//calls assembly interrupt handle
 358:	0e 94 79 00 	call	0xf2	; 0xf2 <TIM1_COMPA>
}
 35c:	ff 91       	pop	r31
 35e:	ef 91       	pop	r30
 360:	bf 91       	pop	r27
 362:	af 91       	pop	r26
 364:	9f 91       	pop	r25
 366:	8f 91       	pop	r24
 368:	7f 91       	pop	r23
 36a:	6f 91       	pop	r22
 36c:	5f 91       	pop	r21
 36e:	4f 91       	pop	r20
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
